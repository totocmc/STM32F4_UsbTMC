
firmware_usb_tmc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e300  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bb4  0800e490  0800e490  0001e490  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f044  0800f044  00020c50  2**0
                  CONTENTS
  4 .ARM          00000008  0800f044  0800f044  0001f044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f04c  0800f04c  00020c50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f04c  0800f04c  0001f04c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f050  0800f050  0001f050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000c50  20000000  0800f054  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f38  20000c50  0800fca4  00020c50  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002b88  0800fca4  00022b88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020c50  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025a1c  00000000  00000000  00020c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005798  00000000  00000000  0004669c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001798  00000000  00000000  0004be38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001580  00000000  00000000  0004d5d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000276aa  00000000  00000000  0004eb50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e5e4  00000000  00000000  000761fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf8bc  00000000  00000000  000947de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016409a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000075e0  00000000  00000000  001640f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000c50 	.word	0x20000c50
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e478 	.word	0x0800e478

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000c54 	.word	0x20000c54
 80001cc:	0800e478 	.word	0x0800e478

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_uldivmod>:
 8000c5c:	b953      	cbnz	r3, 8000c74 <__aeabi_uldivmod+0x18>
 8000c5e:	b94a      	cbnz	r2, 8000c74 <__aeabi_uldivmod+0x18>
 8000c60:	2900      	cmp	r1, #0
 8000c62:	bf08      	it	eq
 8000c64:	2800      	cmpeq	r0, #0
 8000c66:	bf1c      	itt	ne
 8000c68:	f04f 31ff 	movne.w	r1, #4294967295
 8000c6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c70:	f000 b9a4 	b.w	8000fbc <__aeabi_idiv0>
 8000c74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c7c:	f000 f83c 	bl	8000cf8 <__udivmoddi4>
 8000c80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c88:	b004      	add	sp, #16
 8000c8a:	4770      	bx	lr

08000c8c <__aeabi_d2lz>:
 8000c8c:	b538      	push	{r3, r4, r5, lr}
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2300      	movs	r3, #0
 8000c92:	4604      	mov	r4, r0
 8000c94:	460d      	mov	r5, r1
 8000c96:	f7ff ff21 	bl	8000adc <__aeabi_dcmplt>
 8000c9a:	b928      	cbnz	r0, 8000ca8 <__aeabi_d2lz+0x1c>
 8000c9c:	4620      	mov	r0, r4
 8000c9e:	4629      	mov	r1, r5
 8000ca0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca4:	f000 b80a 	b.w	8000cbc <__aeabi_d2ulz>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cae:	f000 f805 	bl	8000cbc <__aeabi_d2ulz>
 8000cb2:	4240      	negs	r0, r0
 8000cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb8:	bd38      	pop	{r3, r4, r5, pc}
 8000cba:	bf00      	nop

08000cbc <__aeabi_d2ulz>:
 8000cbc:	b5d0      	push	{r4, r6, r7, lr}
 8000cbe:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <__aeabi_d2ulz+0x34>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	4606      	mov	r6, r0
 8000cc4:	460f      	mov	r7, r1
 8000cc6:	f7ff fc97 	bl	80005f8 <__aeabi_dmul>
 8000cca:	f7ff ff57 	bl	8000b7c <__aeabi_d2uiz>
 8000cce:	4604      	mov	r4, r0
 8000cd0:	f7ff fc18 	bl	8000504 <__aeabi_ui2d>
 8000cd4:	4b07      	ldr	r3, [pc, #28]	; (8000cf4 <__aeabi_d2ulz+0x38>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f7ff fc8e 	bl	80005f8 <__aeabi_dmul>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	460b      	mov	r3, r1
 8000ce0:	4630      	mov	r0, r6
 8000ce2:	4639      	mov	r1, r7
 8000ce4:	f7ff fad0 	bl	8000288 <__aeabi_dsub>
 8000ce8:	f7ff ff48 	bl	8000b7c <__aeabi_d2uiz>
 8000cec:	4621      	mov	r1, r4
 8000cee:	bdd0      	pop	{r4, r6, r7, pc}
 8000cf0:	3df00000 	.word	0x3df00000
 8000cf4:	41f00000 	.word	0x41f00000

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	468c      	mov	ip, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8083 	bne.w	8000e0e <__udivmoddi4+0x116>
 8000d08:	428a      	cmp	r2, r1
 8000d0a:	4617      	mov	r7, r2
 8000d0c:	d947      	bls.n	8000d9e <__udivmoddi4+0xa6>
 8000d0e:	fab2 f282 	clz	r2, r2
 8000d12:	b142      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d14:	f1c2 0020 	rsb	r0, r2, #32
 8000d18:	fa24 f000 	lsr.w	r0, r4, r0
 8000d1c:	4091      	lsls	r1, r2
 8000d1e:	4097      	lsls	r7, r2
 8000d20:	ea40 0c01 	orr.w	ip, r0, r1
 8000d24:	4094      	lsls	r4, r2
 8000d26:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d2a:	0c23      	lsrs	r3, r4, #16
 8000d2c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d30:	fa1f fe87 	uxth.w	lr, r7
 8000d34:	fb08 c116 	mls	r1, r8, r6, ip
 8000d38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x60>
 8000d44:	18fb      	adds	r3, r7, r3
 8000d46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d4a:	f080 8119 	bcs.w	8000f80 <__udivmoddi4+0x288>
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	f240 8116 	bls.w	8000f80 <__udivmoddi4+0x288>
 8000d54:	3e02      	subs	r6, #2
 8000d56:	443b      	add	r3, r7
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d60:	fb08 3310 	mls	r3, r8, r0, r3
 8000d64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d68:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x8c>
 8000d70:	193c      	adds	r4, r7, r4
 8000d72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d76:	f080 8105 	bcs.w	8000f84 <__udivmoddi4+0x28c>
 8000d7a:	45a6      	cmp	lr, r4
 8000d7c:	f240 8102 	bls.w	8000f84 <__udivmoddi4+0x28c>
 8000d80:	3802      	subs	r0, #2
 8000d82:	443c      	add	r4, r7
 8000d84:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	2600      	movs	r6, #0
 8000d8e:	b11d      	cbz	r5, 8000d98 <__udivmoddi4+0xa0>
 8000d90:	40d4      	lsrs	r4, r2
 8000d92:	2300      	movs	r3, #0
 8000d94:	e9c5 4300 	strd	r4, r3, [r5]
 8000d98:	4631      	mov	r1, r6
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	b902      	cbnz	r2, 8000da2 <__udivmoddi4+0xaa>
 8000da0:	deff      	udf	#255	; 0xff
 8000da2:	fab2 f282 	clz	r2, r2
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	d150      	bne.n	8000e4c <__udivmoddi4+0x154>
 8000daa:	1bcb      	subs	r3, r1, r7
 8000dac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000db0:	fa1f f887 	uxth.w	r8, r7
 8000db4:	2601      	movs	r6, #1
 8000db6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dba:	0c21      	lsrs	r1, r4, #16
 8000dbc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb08 f30c 	mul.w	r3, r8, ip
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0xe4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0xe2>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	f200 80e9 	bhi.w	8000fac <__udivmoddi4+0x2b4>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1ac9      	subs	r1, r1, r3
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000de8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x10c>
 8000df4:	193c      	adds	r4, r7, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x10a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80d9 	bhi.w	8000fb4 <__udivmoddi4+0x2bc>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e7bf      	b.n	8000d8e <__udivmoddi4+0x96>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0x12e>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80b1 	beq.w	8000f7a <__udivmoddi4+0x282>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x1cc>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0x140>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80b8 	bhi.w	8000fa8 <__udivmoddi4+0x2b0>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	468c      	mov	ip, r1
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0a8      	beq.n	8000d98 <__udivmoddi4+0xa0>
 8000e46:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e4a:	e7a5      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000e4c:	f1c2 0320 	rsb	r3, r2, #32
 8000e50:	fa20 f603 	lsr.w	r6, r0, r3
 8000e54:	4097      	lsls	r7, r2
 8000e56:	fa01 f002 	lsl.w	r0, r1, r2
 8000e5a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e5e:	40d9      	lsrs	r1, r3
 8000e60:	4330      	orrs	r0, r6
 8000e62:	0c03      	lsrs	r3, r0, #16
 8000e64:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e68:	fa1f f887 	uxth.w	r8, r7
 8000e6c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e74:	fb06 f108 	mul.w	r1, r6, r8
 8000e78:	4299      	cmp	r1, r3
 8000e7a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e7e:	d909      	bls.n	8000e94 <__udivmoddi4+0x19c>
 8000e80:	18fb      	adds	r3, r7, r3
 8000e82:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e86:	f080 808d 	bcs.w	8000fa4 <__udivmoddi4+0x2ac>
 8000e8a:	4299      	cmp	r1, r3
 8000e8c:	f240 808a 	bls.w	8000fa4 <__udivmoddi4+0x2ac>
 8000e90:	3e02      	subs	r6, #2
 8000e92:	443b      	add	r3, r7
 8000e94:	1a5b      	subs	r3, r3, r1
 8000e96:	b281      	uxth	r1, r0
 8000e98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ea0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea4:	fb00 f308 	mul.w	r3, r0, r8
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	d907      	bls.n	8000ebc <__udivmoddi4+0x1c4>
 8000eac:	1879      	adds	r1, r7, r1
 8000eae:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eb2:	d273      	bcs.n	8000f9c <__udivmoddi4+0x2a4>
 8000eb4:	428b      	cmp	r3, r1
 8000eb6:	d971      	bls.n	8000f9c <__udivmoddi4+0x2a4>
 8000eb8:	3802      	subs	r0, #2
 8000eba:	4439      	add	r1, r7
 8000ebc:	1acb      	subs	r3, r1, r3
 8000ebe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ec2:	e778      	b.n	8000db6 <__udivmoddi4+0xbe>
 8000ec4:	f1c6 0c20 	rsb	ip, r6, #32
 8000ec8:	fa03 f406 	lsl.w	r4, r3, r6
 8000ecc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ed0:	431c      	orrs	r4, r3
 8000ed2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ede:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ee2:	431f      	orrs	r7, r3
 8000ee4:	0c3b      	lsrs	r3, r7, #16
 8000ee6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eea:	fa1f f884 	uxth.w	r8, r4
 8000eee:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ef2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ef6:	fb09 fa08 	mul.w	sl, r9, r8
 8000efa:	458a      	cmp	sl, r1
 8000efc:	fa02 f206 	lsl.w	r2, r2, r6
 8000f00:	fa00 f306 	lsl.w	r3, r0, r6
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x220>
 8000f06:	1861      	adds	r1, r4, r1
 8000f08:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f0c:	d248      	bcs.n	8000fa0 <__udivmoddi4+0x2a8>
 8000f0e:	458a      	cmp	sl, r1
 8000f10:	d946      	bls.n	8000fa0 <__udivmoddi4+0x2a8>
 8000f12:	f1a9 0902 	sub.w	r9, r9, #2
 8000f16:	4421      	add	r1, r4
 8000f18:	eba1 010a 	sub.w	r1, r1, sl
 8000f1c:	b2bf      	uxth	r7, r7
 8000f1e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f22:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f26:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f2a:	fb00 f808 	mul.w	r8, r0, r8
 8000f2e:	45b8      	cmp	r8, r7
 8000f30:	d907      	bls.n	8000f42 <__udivmoddi4+0x24a>
 8000f32:	19e7      	adds	r7, r4, r7
 8000f34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f38:	d22e      	bcs.n	8000f98 <__udivmoddi4+0x2a0>
 8000f3a:	45b8      	cmp	r8, r7
 8000f3c:	d92c      	bls.n	8000f98 <__udivmoddi4+0x2a0>
 8000f3e:	3802      	subs	r0, #2
 8000f40:	4427      	add	r7, r4
 8000f42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f46:	eba7 0708 	sub.w	r7, r7, r8
 8000f4a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f4e:	454f      	cmp	r7, r9
 8000f50:	46c6      	mov	lr, r8
 8000f52:	4649      	mov	r1, r9
 8000f54:	d31a      	bcc.n	8000f8c <__udivmoddi4+0x294>
 8000f56:	d017      	beq.n	8000f88 <__udivmoddi4+0x290>
 8000f58:	b15d      	cbz	r5, 8000f72 <__udivmoddi4+0x27a>
 8000f5a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f5e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f62:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f66:	40f2      	lsrs	r2, r6
 8000f68:	ea4c 0202 	orr.w	r2, ip, r2
 8000f6c:	40f7      	lsrs	r7, r6
 8000f6e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f72:	2600      	movs	r6, #0
 8000f74:	4631      	mov	r1, r6
 8000f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7a:	462e      	mov	r6, r5
 8000f7c:	4628      	mov	r0, r5
 8000f7e:	e70b      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f80:	4606      	mov	r6, r0
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0x60>
 8000f84:	4618      	mov	r0, r3
 8000f86:	e6fd      	b.n	8000d84 <__udivmoddi4+0x8c>
 8000f88:	4543      	cmp	r3, r8
 8000f8a:	d2e5      	bcs.n	8000f58 <__udivmoddi4+0x260>
 8000f8c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f90:	eb69 0104 	sbc.w	r1, r9, r4
 8000f94:	3801      	subs	r0, #1
 8000f96:	e7df      	b.n	8000f58 <__udivmoddi4+0x260>
 8000f98:	4608      	mov	r0, r1
 8000f9a:	e7d2      	b.n	8000f42 <__udivmoddi4+0x24a>
 8000f9c:	4660      	mov	r0, ip
 8000f9e:	e78d      	b.n	8000ebc <__udivmoddi4+0x1c4>
 8000fa0:	4681      	mov	r9, r0
 8000fa2:	e7b9      	b.n	8000f18 <__udivmoddi4+0x220>
 8000fa4:	4666      	mov	r6, ip
 8000fa6:	e775      	b.n	8000e94 <__udivmoddi4+0x19c>
 8000fa8:	4630      	mov	r0, r6
 8000faa:	e74a      	b.n	8000e42 <__udivmoddi4+0x14a>
 8000fac:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb0:	4439      	add	r1, r7
 8000fb2:	e713      	b.n	8000ddc <__udivmoddi4+0xe4>
 8000fb4:	3802      	subs	r0, #2
 8000fb6:	443c      	add	r4, r7
 8000fb8:	e724      	b.n	8000e04 <__udivmoddi4+0x10c>
 8000fba:	bf00      	nop

08000fbc <__aeabi_idiv0>:
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <dscpi_output_inner>:

	SCPI_CMD_LIST_END
};

static int dscpi_output_inner(scpi_t *context, int output)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
	bool action;
	if (!SCPI_ParamBool(context, &action, true)) {
 8000fca:	f107 030f 	add.w	r3, r7, #15
 8000fce:	2201      	movs	r2, #1
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f007 f9f2 	bl	80083bc <SCPI_ParamBool>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	f083 0301 	eor.w	r3, r3, #1
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d002      	beq.n	8000fea <dscpi_output_inner+0x2a>
		return SCPI_RES_ERR;
 8000fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe8:	e011      	b.n	800100e <dscpi_output_inner+0x4e>
	}
	printf("turning output %d %s", output + 1, action ? "on" : "off");
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	1c59      	adds	r1, r3, #1
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <dscpi_output_inner+0x38>
 8000ff4:	4b08      	ldr	r3, [pc, #32]	; (8001018 <dscpi_output_inner+0x58>)
 8000ff6:	e000      	b.n	8000ffa <dscpi_output_inner+0x3a>
 8000ff8:	4b08      	ldr	r3, [pc, #32]	; (800101c <dscpi_output_inner+0x5c>)
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	4808      	ldr	r0, [pc, #32]	; (8001020 <dscpi_output_inner+0x60>)
 8000ffe:	f009 ffa5 	bl	800af4c <iprintf>
	funcgen_output(output, action);
 8001002:	7bfb      	ldrb	r3, [r7, #15]
 8001004:	4619      	mov	r1, r3
 8001006:	6838      	ldr	r0, [r7, #0]
 8001008:	f000 fd70 	bl	8001aec <funcgen_output>
	return SCPI_RES_OK;
 800100c:	2301      	movs	r3, #1
}
 800100e:	4618      	mov	r0, r3
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	0800e5b0 	.word	0x0800e5b0
 800101c:	0800e5b4 	.word	0x0800e5b4
 8001020:	0800e5b8 	.word	0x0800e5b8

08001024 <dscpi_output1>:

scpi_result_t dscpi_output1(scpi_t *context)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	return dscpi_output_inner(context, 0);
 800102c:	2100      	movs	r1, #0
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff ffc6 	bl	8000fc0 <dscpi_output_inner>
 8001034:	4603      	mov	r3, r0
 8001036:	b25b      	sxtb	r3, r3
}
 8001038:	4618      	mov	r0, r3
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <dscpi_output2>:

scpi_result_t dscpi_output2(scpi_t *context)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	return dscpi_output_inner(context, 1);
 8001048:	2101      	movs	r1, #1
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff ffb8 	bl	8000fc0 <dscpi_output_inner>
 8001050:	4603      	mov	r3, r0
 8001052:	b25b      	sxtb	r3, r3
}
 8001054:	4618      	mov	r0, r3
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <dscpi_outputQ_inner>:

static int dscpi_outputQ_inner(scpi_t *context, int output)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
	printf("outputQ[%d]", output + 1);
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	3301      	adds	r3, #1
 800106a:	4619      	mov	r1, r3
 800106c:	4809      	ldr	r0, [pc, #36]	; (8001094 <dscpi_outputQ_inner+0x38>)
 800106e:	f009 ff6d 	bl	800af4c <iprintf>
	struct funcgen_state_t *fs;
	fs = funcgen_getstate();
 8001072:	f000 fd4f 	bl	8001b14 <funcgen_getstate>
 8001076:	60f8      	str	r0, [r7, #12]
	SCPI_ResultBool(context, fs->outputs[output]->enabled);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	683a      	ldr	r2, [r7, #0]
 800107c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	4619      	mov	r1, r3
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f006 ffff 	bl	8008088 <SCPI_ResultBool>
	return SCPI_RES_OK;
 800108a:	2301      	movs	r3, #1
}
 800108c:	4618      	mov	r0, r3
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	0800e5d0 	.word	0x0800e5d0

08001098 <dscpi_output1Q>:

scpi_result_t dscpi_output1Q(scpi_t *context)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	return dscpi_outputQ_inner(context, 0);
 80010a0:	2100      	movs	r1, #0
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f7ff ffda 	bl	800105c <dscpi_outputQ_inner>
 80010a8:	4603      	mov	r3, r0
 80010aa:	b25b      	sxtb	r3, r3
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <dscpi_output2Q>:

scpi_result_t dscpi_output2Q(scpi_t *context)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	return dscpi_outputQ_inner(context, 1);
 80010bc:	2101      	movs	r1, #1
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff ffcc 	bl	800105c <dscpi_outputQ_inner>
 80010c4:	4603      	mov	r3, r0
 80010c6:	b25b      	sxtb	r3, r3
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <dscpi_apply_params>:

static int dscpi_apply_params(scpi_t *context,
	scpi_number_t *freq, scpi_number_t *ampl, scpi_number_t *offset)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
 80010dc:	603b      	str	r3, [r7, #0]
	if (!SCPI_ParamNumber(context, freq, false)) {
 80010de:	2200      	movs	r2, #0
 80010e0:	68b9      	ldr	r1, [r7, #8]
 80010e2:	68f8      	ldr	r0, [r7, #12]
 80010e4:	f007 faf1 	bl	80086ca <SCPI_ParamNumber>
 80010e8:	4603      	mov	r3, r0
 80010ea:	f083 0301 	eor.w	r3, r3, #1
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d002      	beq.n	80010fa <dscpi_apply_params+0x2a>
		/* you can only get here if you gave it a bad pointer */
		return -1;
 80010f4:	f04f 33ff 	mov.w	r3, #4294967295
 80010f8:	e0a9      	b.n	800124e <dscpi_apply_params+0x17e>
	} else {
		if (freq->type == SCPI_NUM_DEF) {
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	7a5b      	ldrb	r3, [r3, #9]
 80010fe:	2b03      	cmp	r3, #3
 8001100:	d10b      	bne.n	800111a <dscpi_apply_params+0x4a>
			freq->value = 1000;
 8001102:	68b9      	ldr	r1, [r7, #8]
 8001104:	f04f 0200 	mov.w	r2, #0
 8001108:	4b55      	ldr	r3, [pc, #340]	; (8001260 <dscpi_apply_params+0x190>)
 800110a:	e9c1 2300 	strd	r2, r3, [r1]
			freq->type = SCPI_NUM_NUMBER;
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	2200      	movs	r2, #0
 8001112:	725a      	strb	r2, [r3, #9]
			freq->unit = SCPI_UNIT_HERTZ;
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	2204      	movs	r2, #4
 8001118:	721a      	strb	r2, [r3, #8]
		}
		if (freq->unit == SCPI_UNIT_NONE) {
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	7a1b      	ldrb	r3, [r3, #8]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d102      	bne.n	8001128 <dscpi_apply_params+0x58>
			freq->unit = SCPI_UNIT_HERTZ;
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	2204      	movs	r2, #4
 8001126:	721a      	strb	r2, [r3, #8]
		}
		/* handle minimum, maximum, regular*/
	}
	if (!SCPI_ParamNumber(context, ampl, false)) {
 8001128:	2200      	movs	r2, #0
 800112a:	6879      	ldr	r1, [r7, #4]
 800112c:	68f8      	ldr	r0, [r7, #12]
 800112e:	f007 facc 	bl	80086ca <SCPI_ParamNumber>
 8001132:	4603      	mov	r3, r0
 8001134:	f083 0301 	eor.w	r3, r3, #1
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2b00      	cmp	r3, #0
 800113c:	d002      	beq.n	8001144 <dscpi_apply_params+0x74>
		/* bad pointers */
		return -1;
 800113e:	f04f 33ff 	mov.w	r3, #4294967295
 8001142:	e084      	b.n	800124e <dscpi_apply_params+0x17e>
	} else {
		if (ampl->type == SCPI_NUM_DEF) {
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	7a5b      	ldrb	r3, [r3, #9]
 8001148:	2b03      	cmp	r3, #3
 800114a:	d10b      	bne.n	8001164 <dscpi_apply_params+0x94>
			ampl->type = SCPI_NUM_NUMBER;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	725a      	strb	r2, [r3, #9]
			ampl->unit = SCPI_UNIT_VOLT;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2201      	movs	r2, #1
 8001156:	721a      	strb	r2, [r3, #8]
			ampl->value = 0.1; // 100 mV by default
 8001158:	6879      	ldr	r1, [r7, #4]
 800115a:	a33f      	add	r3, pc, #252	; (adr r3, 8001258 <dscpi_apply_params+0x188>)
 800115c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001160:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if (ampl->type == SCPI_NUM_MIN) {
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	7a5b      	ldrb	r3, [r3, #9]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d106      	bne.n	800117a <dscpi_apply_params+0xaa>
			ampl->value = 0;
 800116c:	6879      	ldr	r1, [r7, #4]
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	f04f 0300 	mov.w	r3, #0
 8001176:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if (ampl->type == SCPI_NUM_MAX) {
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	7a5b      	ldrb	r3, [r3, #9]
 800117e:	2b02      	cmp	r3, #2
 8001180:	d105      	bne.n	800118e <dscpi_apply_params+0xbe>
			ampl->value = FULL_SCALE;
 8001182:	6879      	ldr	r1, [r7, #4]
 8001184:	f04f 0200 	mov.w	r2, #0
 8001188:	4b36      	ldr	r3, [pc, #216]	; (8001264 <dscpi_apply_params+0x194>)
 800118a:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if (ampl->unit == SCPI_UNIT_NONE) {
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	7a1b      	ldrb	r3, [r3, #8]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d102      	bne.n	800119c <dscpi_apply_params+0xcc>
			ampl->unit = SCPI_UNIT_VOLT;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2201      	movs	r2, #1
 800119a:	721a      	strb	r2, [r3, #8]
		}
		/* handle minimum, maximum, */
		/* TODO somehow work out how to handle Vrms units here ?*/
	}
	if (!SCPI_ParamNumber(context, offset, false)) {
 800119c:	2200      	movs	r2, #0
 800119e:	6839      	ldr	r1, [r7, #0]
 80011a0:	68f8      	ldr	r0, [r7, #12]
 80011a2:	f007 fa92 	bl	80086ca <SCPI_ParamNumber>
 80011a6:	4603      	mov	r3, r0
 80011a8:	f083 0301 	eor.w	r3, r3, #1
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d002      	beq.n	80011b8 <dscpi_apply_params+0xe8>
		/* bad pointers */
		return -1;
 80011b2:	f04f 33ff 	mov.w	r3, #4294967295
 80011b6:	e04a      	b.n	800124e <dscpi_apply_params+0x17e>
	} else {
		if (offset->type == SCPI_NUM_DEF) {
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	7a5b      	ldrb	r3, [r3, #9]
 80011bc:	2b03      	cmp	r3, #3
 80011be:	d10b      	bne.n	80011d8 <dscpi_apply_params+0x108>
			offset->type = SCPI_NUM_NUMBER;
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	2200      	movs	r2, #0
 80011c4:	725a      	strb	r2, [r3, #9]
			offset->unit = SCPI_UNIT_VOLT;
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	2201      	movs	r2, #1
 80011ca:	721a      	strb	r2, [r3, #8]
			offset->value = FULL_SCALE / 2.0;
 80011cc:	6839      	ldr	r1, [r7, #0]
 80011ce:	f04f 0200 	mov.w	r2, #0
 80011d2:	4b25      	ldr	r3, [pc, #148]	; (8001268 <dscpi_apply_params+0x198>)
 80011d4:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if (offset->type == SCPI_NUM_MIN) {
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	7a5b      	ldrb	r3, [r3, #9]
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d106      	bne.n	80011ee <dscpi_apply_params+0x11e>
			offset->value = 0;
 80011e0:	6839      	ldr	r1, [r7, #0]
 80011e2:	f04f 0200 	mov.w	r2, #0
 80011e6:	f04f 0300 	mov.w	r3, #0
 80011ea:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if (offset->type == SCPI_NUM_MAX) {
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	7a5b      	ldrb	r3, [r3, #9]
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d105      	bne.n	8001202 <dscpi_apply_params+0x132>
			offset->value = FULL_SCALE;
 80011f6:	6839      	ldr	r1, [r7, #0]
 80011f8:	f04f 0200 	mov.w	r2, #0
 80011fc:	4b19      	ldr	r3, [pc, #100]	; (8001264 <dscpi_apply_params+0x194>)
 80011fe:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if (offset->unit == SCPI_UNIT_NONE) {
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	7a1b      	ldrb	r3, [r3, #8]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d102      	bne.n	8001210 <dscpi_apply_params+0x140>
			offset->unit = SCPI_UNIT_VOLT;
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	2201      	movs	r2, #1
 800120e:	721a      	strb	r2, [r3, #8]
		}
	}
#define FULL_DEBUG 1
#if FULL_DEBUG
	SCPI_NumberToStr(context, freq, numbuf, sizeof (numbuf));
 8001210:	2364      	movs	r3, #100	; 0x64
 8001212:	4a16      	ldr	r2, [pc, #88]	; (800126c <dscpi_apply_params+0x19c>)
 8001214:	68b9      	ldr	r1, [r7, #8]
 8001216:	68f8      	ldr	r0, [r7, #12]
 8001218:	f007 faa4 	bl	8008764 <SCPI_NumberToStr>
	printf("freq: %s", numbuf);
 800121c:	4913      	ldr	r1, [pc, #76]	; (800126c <dscpi_apply_params+0x19c>)
 800121e:	4814      	ldr	r0, [pc, #80]	; (8001270 <dscpi_apply_params+0x1a0>)
 8001220:	f009 fe94 	bl	800af4c <iprintf>
	SCPI_NumberToStr(context, ampl, numbuf, sizeof (numbuf));
 8001224:	2364      	movs	r3, #100	; 0x64
 8001226:	4a11      	ldr	r2, [pc, #68]	; (800126c <dscpi_apply_params+0x19c>)
 8001228:	6879      	ldr	r1, [r7, #4]
 800122a:	68f8      	ldr	r0, [r7, #12]
 800122c:	f007 fa9a 	bl	8008764 <SCPI_NumberToStr>
	printf("ampl: %s", numbuf);
 8001230:	490e      	ldr	r1, [pc, #56]	; (800126c <dscpi_apply_params+0x19c>)
 8001232:	4810      	ldr	r0, [pc, #64]	; (8001274 <dscpi_apply_params+0x1a4>)
 8001234:	f009 fe8a 	bl	800af4c <iprintf>
	SCPI_NumberToStr(context, offset, numbuf, sizeof (numbuf));
 8001238:	2364      	movs	r3, #100	; 0x64
 800123a:	4a0c      	ldr	r2, [pc, #48]	; (800126c <dscpi_apply_params+0x19c>)
 800123c:	6839      	ldr	r1, [r7, #0]
 800123e:	68f8      	ldr	r0, [r7, #12]
 8001240:	f007 fa90 	bl	8008764 <SCPI_NumberToStr>
	printf("offset: %s", numbuf);
 8001244:	4909      	ldr	r1, [pc, #36]	; (800126c <dscpi_apply_params+0x19c>)
 8001246:	480c      	ldr	r0, [pc, #48]	; (8001278 <dscpi_apply_params+0x1a8>)
 8001248:	f009 fe80 	bl	800af4c <iprintf>
#endif
	return 0;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	9999999a 	.word	0x9999999a
 800125c:	3fb99999 	.word	0x3fb99999
 8001260:	408f4000 	.word	0x408f4000
 8001264:	40080000 	.word	0x40080000
 8001268:	3ff80000 	.word	0x3ff80000
 800126c:	20000c6c 	.word	0x20000c6c
 8001270:	0800e5dc 	.word	0x0800e5dc
 8001274:	0800e5e8 	.word	0x0800e5e8
 8001278:	0800e5f4 	.word	0x0800e5f4

0800127c <dscpi_apply_sin_inner>:

static int dscpi_apply_sin_inner(scpi_t *context, int output)
{
 800127c:	b5b0      	push	{r4, r5, r7, lr}
 800127e:	b08e      	sub	sp, #56	; 0x38
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
	scpi_number_t freq;
	scpi_number_t ampl;
	scpi_number_t offset;
	dscpi_apply_params(context, &freq, &ampl, &offset);
 8001286:	f107 0308 	add.w	r3, r7, #8
 800128a:	f107 0218 	add.w	r2, r7, #24
 800128e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff ff1c 	bl	80010d0 <dscpi_apply_params>
	funcgen_sin(output, freq.value, ampl.value, offset.value);
 8001298:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800129c:	4610      	mov	r0, r2
 800129e:	4619      	mov	r1, r3
 80012a0:	f7ff fc8c 	bl	8000bbc <__aeabi_d2f>
 80012a4:	4604      	mov	r4, r0
 80012a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012aa:	4610      	mov	r0, r2
 80012ac:	4619      	mov	r1, r3
 80012ae:	f7ff fc85 	bl	8000bbc <__aeabi_d2f>
 80012b2:	4605      	mov	r5, r0
 80012b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012b8:	4610      	mov	r0, r2
 80012ba:	4619      	mov	r1, r3
 80012bc:	f7ff fc7e 	bl	8000bbc <__aeabi_d2f>
 80012c0:	4603      	mov	r3, r0
 80012c2:	ee01 3a10 	vmov	s2, r3
 80012c6:	ee00 5a90 	vmov	s1, r5
 80012ca:	ee00 4a10 	vmov	s0, r4
 80012ce:	6838      	ldr	r0, [r7, #0]
 80012d0:	f000 fb18 	bl	8001904 <funcgen_sin>
	return SCPI_RES_OK;
 80012d4:	2301      	movs	r3, #1
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3738      	adds	r7, #56	; 0x38
 80012da:	46bd      	mov	sp, r7
 80012dc:	bdb0      	pop	{r4, r5, r7, pc}

080012de <dscpi_apply_sin1>:

scpi_result_t dscpi_apply_sin1(scpi_t *context)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
	return dscpi_apply_sin_inner(context, 0);
 80012e6:	2100      	movs	r1, #0
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff ffc7 	bl	800127c <dscpi_apply_sin_inner>
 80012ee:	4603      	mov	r3, r0
 80012f0:	b25b      	sxtb	r3, r3
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <dscpi_apply_sin2>:

scpi_result_t dscpi_apply_sin2(scpi_t *context)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b082      	sub	sp, #8
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
	return dscpi_apply_sin_inner(context, 1);
 8001302:	2101      	movs	r1, #1
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff ffb9 	bl	800127c <dscpi_apply_sin_inner>
 800130a:	4603      	mov	r3, r0
 800130c:	b25b      	sxtb	r3, r3
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <dscpi_apply_user_inner>:

static scpi_result_t dscpi_apply_user_inner(scpi_t *context, int output)
{
 8001316:	b5b0      	push	{r4, r5, r7, lr}
 8001318:	b08e      	sub	sp, #56	; 0x38
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
 800131e:	6039      	str	r1, [r7, #0]
	scpi_number_t freq;
	scpi_number_t ampl;
	scpi_number_t offset;
	dscpi_apply_params(context, &freq, &ampl, &offset);
 8001320:	f107 0308 	add.w	r3, r7, #8
 8001324:	f107 0218 	add.w	r2, r7, #24
 8001328:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f7ff fecf 	bl	80010d0 <dscpi_apply_params>
	funcgen_user(output, freq.value, ampl.value, offset.value);
 8001332:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001336:	4610      	mov	r0, r2
 8001338:	4619      	mov	r1, r3
 800133a:	f7ff fc3f 	bl	8000bbc <__aeabi_d2f>
 800133e:	4604      	mov	r4, r0
 8001340:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001344:	4610      	mov	r0, r2
 8001346:	4619      	mov	r1, r3
 8001348:	f7ff fc38 	bl	8000bbc <__aeabi_d2f>
 800134c:	4605      	mov	r5, r0
 800134e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001352:	4610      	mov	r0, r2
 8001354:	4619      	mov	r1, r3
 8001356:	f7ff fc31 	bl	8000bbc <__aeabi_d2f>
 800135a:	4603      	mov	r3, r0
 800135c:	ee01 3a10 	vmov	s2, r3
 8001360:	ee00 5a90 	vmov	s1, r5
 8001364:	ee00 4a10 	vmov	s0, r4
 8001368:	6838      	ldr	r0, [r7, #0]
 800136a:	f000 fb49 	bl	8001a00 <funcgen_user>
	return SCPI_RES_OK;
 800136e:	2301      	movs	r3, #1
}
 8001370:	4618      	mov	r0, r3
 8001372:	3738      	adds	r7, #56	; 0x38
 8001374:	46bd      	mov	sp, r7
 8001376:	bdb0      	pop	{r4, r5, r7, pc}

08001378 <dscpi_apply_user1>:

scpi_result_t dscpi_apply_user1(scpi_t *context)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
	return dscpi_apply_user_inner(context, 0);
 8001380:	2100      	movs	r1, #0
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff ffc7 	bl	8001316 <dscpi_apply_user_inner>
 8001388:	4603      	mov	r3, r0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <dscpi_apply_user2>:

scpi_result_t dscpi_apply_user2(scpi_t *context)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
	return dscpi_apply_user_inner(context, 1);
 800139a:	2101      	movs	r1, #1
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f7ff ffba 	bl	8001316 <dscpi_apply_user_inner>
 80013a2:	4603      	mov	r3, r0
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <get_output_mode_name>:
	{.name = "USER", .mode = OUTPUT_MODE_USER,},
	{.name = NULL, .mode = OUTPUT_MODE_NULL,},
};

static const char* get_output_mode_name(enum _funcgen_output_mode output_mode)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; output_modes[i].name != NULL; i++) {
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	e00f      	b.n	80013dc <get_output_mode_name+0x30>
		if (output_modes[i].mode == output_mode) {
 80013bc:	4a0e      	ldr	r2, [pc, #56]	; (80013f8 <get_output_mode_name+0x4c>)
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	00db      	lsls	r3, r3, #3
 80013c2:	4413      	add	r3, r2
 80013c4:	791b      	ldrb	r3, [r3, #4]
 80013c6:	79fa      	ldrb	r2, [r7, #7]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d104      	bne.n	80013d6 <get_output_mode_name+0x2a>
			return output_modes[i].name;
 80013cc:	4a0a      	ldr	r2, [pc, #40]	; (80013f8 <get_output_mode_name+0x4c>)
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80013d4:	e009      	b.n	80013ea <get_output_mode_name+0x3e>
	for (int i = 0; output_modes[i].name != NULL; i++) {
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	3301      	adds	r3, #1
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	4a06      	ldr	r2, [pc, #24]	; (80013f8 <get_output_mode_name+0x4c>)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1e9      	bne.n	80013bc <get_output_mode_name+0x10>
		}
	}
	return NULL;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3714      	adds	r7, #20
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	0800e988 	.word	0x0800e988

080013fc <dscpi_applyQ_inner>:

static int dscpi_applyQ_inner(scpi_t *context, int output)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
	printf("applyQ[%d]", output + 1);
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	3301      	adds	r3, #1
 800140a:	4619      	mov	r1, r3
 800140c:	482e      	ldr	r0, [pc, #184]	; (80014c8 <dscpi_applyQ_inner+0xcc>)
 800140e:	f009 fd9d 	bl	800af4c <iprintf>
	struct funcgen_state_t *fs;
	fs = funcgen_getstate();
 8001412:	f000 fb7f 	bl	8001b14 <funcgen_getstate>
 8001416:	61f8      	str	r0, [r7, #28]
	struct funcgen_output_t *outp = fs->outputs[output];
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	683a      	ldr	r2, [r7, #0]
 800141c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001420:	61bb      	str	r3, [r7, #24]
	SCPI_ResultString(context, get_output_mode_name(outp->mode));
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	7c1b      	ldrb	r3, [r3, #16]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff ffc0 	bl	80013ac <get_output_mode_name>
 800142c:	4603      	mov	r3, r0
 800142e:	4619      	mov	r1, r3
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f006 fdd9 	bl	8007fe8 <SCPI_ResultString>

	scpi_number_t nn;
	nn.type = SCPI_NUM_NUMBER;
 8001436:	2300      	movs	r3, #0
 8001438:	747b      	strb	r3, [r7, #17]

	nn.unit = SCPI_UNIT_HERTZ;
 800143a:	2304      	movs	r3, #4
 800143c:	743b      	strb	r3, [r7, #16]
	nn.value = outp->freq;
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff f880 	bl	8000548 <__aeabi_f2d>
 8001448:	4602      	mov	r2, r0
 800144a:	460b      	mov	r3, r1
 800144c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	SCPI_NumberToStr(context, &nn, numbuf, sizeof (numbuf));
 8001450:	f107 0108 	add.w	r1, r7, #8
 8001454:	2364      	movs	r3, #100	; 0x64
 8001456:	4a1d      	ldr	r2, [pc, #116]	; (80014cc <dscpi_applyQ_inner+0xd0>)
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f007 f983 	bl	8008764 <SCPI_NumberToStr>
	SCPI_ResultText(context, numbuf);
 800145e:	491b      	ldr	r1, [pc, #108]	; (80014cc <dscpi_applyQ_inner+0xd0>)
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f006 fe21 	bl	80080a8 <SCPI_ResultText>

	nn.unit = SCPI_UNIT_VOLT;
 8001466:	2301      	movs	r3, #1
 8001468:	743b      	strb	r3, [r7, #16]
	nn.value = outp->ampl;
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff f86a 	bl	8000548 <__aeabi_f2d>
 8001474:	4602      	mov	r2, r0
 8001476:	460b      	mov	r3, r1
 8001478:	e9c7 2302 	strd	r2, r3, [r7, #8]
	SCPI_NumberToStr(context, &nn, numbuf, sizeof (numbuf));
 800147c:	f107 0108 	add.w	r1, r7, #8
 8001480:	2364      	movs	r3, #100	; 0x64
 8001482:	4a12      	ldr	r2, [pc, #72]	; (80014cc <dscpi_applyQ_inner+0xd0>)
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f007 f96d 	bl	8008764 <SCPI_NumberToStr>
	SCPI_ResultText(context, numbuf);
 800148a:	4910      	ldr	r1, [pc, #64]	; (80014cc <dscpi_applyQ_inner+0xd0>)
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f006 fe0b 	bl	80080a8 <SCPI_ResultText>

	nn.unit = SCPI_UNIT_VOLT;
 8001492:	2301      	movs	r3, #1
 8001494:	743b      	strb	r3, [r7, #16]
	nn.value = outp->offset;
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff f854 	bl	8000548 <__aeabi_f2d>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	e9c7 2302 	strd	r2, r3, [r7, #8]
	SCPI_NumberToStr(context, &nn, numbuf, sizeof (numbuf));
 80014a8:	f107 0108 	add.w	r1, r7, #8
 80014ac:	2364      	movs	r3, #100	; 0x64
 80014ae:	4a07      	ldr	r2, [pc, #28]	; (80014cc <dscpi_applyQ_inner+0xd0>)
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f007 f957 	bl	8008764 <SCPI_NumberToStr>
	SCPI_ResultText(context, numbuf);
 80014b6:	4905      	ldr	r1, [pc, #20]	; (80014cc <dscpi_applyQ_inner+0xd0>)
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f006 fdf5 	bl	80080a8 <SCPI_ResultText>

	return SCPI_RES_OK;
 80014be:	2301      	movs	r3, #1
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3720      	adds	r7, #32
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	0800e614 	.word	0x0800e614
 80014cc:	20000c6c 	.word	0x20000c6c

080014d0 <dscpi_apply1Q>:

scpi_result_t dscpi_apply1Q(scpi_t *context)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
	return dscpi_applyQ_inner(context, 0);
 80014d8:	2100      	movs	r1, #0
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f7ff ff8e 	bl	80013fc <dscpi_applyQ_inner>
 80014e0:	4603      	mov	r3, r0
 80014e2:	b25b      	sxtb	r3, r3
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <dscpi_apply2Q>:

scpi_result_t dscpi_apply2Q(scpi_t *context)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
	return dscpi_applyQ_inner(context, 1);
 80014f4:	2101      	movs	r1, #1
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff ff80 	bl	80013fc <dscpi_applyQ_inner>
 80014fc:	4603      	mov	r3, r0
 80014fe:	b25b      	sxtb	r3, r3
}
 8001500:	4618      	mov	r0, r3
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <dscpi_data_dac_inner>:

/* DATA:DAC */
static scpi_result_t dscpi_data_dac_inner(scpi_t *context, int channel)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
	const void *raw_arg;
	struct funcgen_output_t *fo = funcgen_getstate()->outputs[channel];
 8001512:	f000 faff 	bl	8001b14 <funcgen_getstate>
 8001516:	4602      	mov	r2, r0
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800151e:	617b      	str	r3, [r7, #20]
	size_t outlen;

	if (!SCPI_ParamBinary(context, &raw_arg, &outlen, true)) {
 8001520:	f107 020c 	add.w	r2, r7, #12
 8001524:	f107 0110 	add.w	r1, r7, #16
 8001528:	2301      	movs	r3, #1
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f006 fee2 	bl	80082f4 <SCPI_ParamBinary>
 8001530:	4603      	mov	r3, r0
 8001532:	f083 0301 	eor.w	r3, r3, #1
 8001536:	b2db      	uxtb	r3, r3
 8001538:	2b00      	cmp	r3, #0
 800153a:	d002      	beq.n	8001542 <dscpi_data_dac_inner+0x3a>
		return SCPI_RES_ERR;
 800153c:	f04f 33ff 	mov.w	r3, #4294967295
 8001540:	e00d      	b.n	800155e <dscpi_data_dac_inner+0x56>
	} else {
		memcpy(fo->waveform, raw_arg, outlen);
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	3312      	adds	r3, #18
 8001546:	6939      	ldr	r1, [r7, #16]
 8001548:	68fa      	ldr	r2, [r7, #12]
 800154a:	4618      	mov	r0, r3
 800154c:	f009 fccd 	bl	800aeea <memcpy>
		fo->waveform_length = outlen / sizeof (fo->waveform[0]);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	085b      	lsrs	r3, r3, #1
 8001554:	461a      	mov	r2, r3
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
		return SCPI_RES_OK;
 800155c:	2301      	movs	r3, #1
	}
}
 800155e:	4618      	mov	r0, r3
 8001560:	3718      	adds	r7, #24
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <dscpi_data_dac1>:

scpi_result_t dscpi_data_dac1(scpi_t *context)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b082      	sub	sp, #8
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
	return dscpi_data_dac_inner(context, 0);
 800156e:	2100      	movs	r1, #0
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f7ff ffc9 	bl	8001508 <dscpi_data_dac_inner>
 8001576:	4603      	mov	r3, r0
}
 8001578:	4618      	mov	r0, r3
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <dscpi_data_dac2>:

scpi_result_t dscpi_data_dac2(scpi_t *context)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
	return dscpi_data_dac_inner(context, 1);
 8001588:	2101      	movs	r1, #1
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7ff ffbc 	bl	8001508 <dscpi_data_dac_inner>
 8001590:	4603      	mov	r3, r0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <dscpi_data_dacQ_inner>:

/* SOURx:OUTP:ARB x,y (DATA:DAC?) */
static scpi_result_t dscpi_data_dacQ_inner(scpi_t *context, int channel)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b084      	sub	sp, #16
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
 80015a2:	6039      	str	r1, [r7, #0]
	struct funcgen_output_t *fo = funcgen_getstate()->outputs[channel];
 80015a4:	f000 fab6 	bl	8001b14 <funcgen_getstate>
 80015a8:	4602      	mov	r2, r0
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b0:	60fb      	str	r3, [r7, #12]
	SCPI_ResultBinary(context, (const char *) fo->waveform, fo->waveform_length * sizeof (fo->waveform[0]));
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f103 0112 	add.w	r1, r3, #18
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	461a      	mov	r2, r3
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f006 fdaa 	bl	800811c <SCPI_ResultBinary>
	return SCPI_RES_OK;
 80015c8:	2301      	movs	r3, #1
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <dscpi_data_dac1Q>:

scpi_result_t dscpi_data_dac1Q(scpi_t *context)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
	return dscpi_data_dacQ_inner(context, 0);
 80015da:	2100      	movs	r1, #0
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff ffdc 	bl	800159a <dscpi_data_dacQ_inner>
 80015e2:	4603      	mov	r3, r0
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <dscpi_data_dac2Q>:

scpi_result_t dscpi_data_dac2Q(scpi_t *context)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
	return dscpi_data_dacQ_inner(context, 1);
 80015f4:	2101      	movs	r1, #1
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff ffcf 	bl	800159a <dscpi_data_dacQ_inner>
 80015fc:	4603      	mov	r3, r0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
	...

08001608 <dscpi_init>:
	.idn =
	{"Ekta labs", "DiscoTMC-F4", NULL, "0.1"},
};

void dscpi_init(scpi_interface_t *intf, char *serial_number)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
	scpi_context.interface = intf;
 8001612:	4a06      	ldr	r2, [pc, #24]	; (800162c <dscpi_init+0x24>)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	61d3      	str	r3, [r2, #28]
	scpi_context.idn[2] = serial_number;
 8001618:	4a04      	ldr	r2, [pc, #16]	; (800162c <dscpi_init+0x24>)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	6493      	str	r3, [r2, #72]	; 0x48
	SCPI_Init(&scpi_context);
 800161e:	4803      	ldr	r0, [pc, #12]	; (800162c <dscpi_init+0x24>)
 8001620:	f006 fc16 	bl	8007e50 <SCPI_Init>
}
 8001624:	bf00      	nop
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	200000b0 	.word	0x200000b0

08001630 <hexdump>:
{
	return &scpi_context;
}

void hexdump(char* prefix, uint8_t *buf, uint16_t len)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	4613      	mov	r3, r2
 800163c:	80fb      	strh	r3, [r7, #6]
	int i;
	printf("\n<%s: ", prefix);
 800163e:	68f9      	ldr	r1, [r7, #12]
 8001640:	4814      	ldr	r0, [pc, #80]	; (8001694 <hexdump+0x64>)
 8001642:	f009 fc83 	bl	800af4c <iprintf>
	for (i = 0; i < len; i++) {
 8001646:	2300      	movs	r3, #0
 8001648:	617b      	str	r3, [r7, #20]
 800164a:	e017      	b.n	800167c <hexdump+0x4c>
		printf("%x", buf[i]);
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	68ba      	ldr	r2, [r7, #8]
 8001650:	4413      	add	r3, r2
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	4619      	mov	r1, r3
 8001656:	4810      	ldr	r0, [pc, #64]	; (8001698 <hexdump+0x68>)
 8001658:	f009 fc78 	bl	800af4c <iprintf>
		if ((i + 1) % 16 == 0) {
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	3301      	adds	r3, #1
 8001660:	f003 030f 	and.w	r3, r3, #15
 8001664:	2b00      	cmp	r3, #0
 8001666:	d103      	bne.n	8001670 <hexdump+0x40>
			putchar('\n');
 8001668:	200a      	movs	r0, #10
 800166a:	f009 fc87 	bl	800af7c <putchar>
 800166e:	e002      	b.n	8001676 <hexdump+0x46>
		} else {
			putchar(' ');
 8001670:	2020      	movs	r0, #32
 8001672:	f009 fc83 	bl	800af7c <putchar>
	for (i = 0; i < len; i++) {
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	3301      	adds	r3, #1
 800167a:	617b      	str	r3, [r7, #20]
 800167c:	88fb      	ldrh	r3, [r7, #6]
 800167e:	697a      	ldr	r2, [r7, #20]
 8001680:	429a      	cmp	r2, r3
 8001682:	dbe3      	blt.n	800164c <hexdump+0x1c>
		}
	}
	putchar('>');
 8001684:	203e      	movs	r0, #62	; 0x3e
 8001686:	f009 fc79 	bl	800af7c <putchar>
}
 800168a:	bf00      	nop
 800168c:	3718      	adds	r7, #24
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	0800e63c 	.word	0x0800e63c
 8001698:	0800e644 	.word	0x0800e644

0800169c <scpi_glue_input>:

void scpi_glue_input(uint8_t *buf, uint16_t len, bool final)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	807b      	strh	r3, [r7, #2]
 80016a8:	4613      	mov	r3, r2
 80016aa:	707b      	strb	r3, [r7, #1]
	hexdump("feeding to scpi", buf, len);
 80016ac:	887b      	ldrh	r3, [r7, #2]
 80016ae:	461a      	mov	r2, r3
 80016b0:	6879      	ldr	r1, [r7, #4]
 80016b2:	480a      	ldr	r0, [pc, #40]	; (80016dc <scpi_glue_input+0x40>)
 80016b4:	f7ff ffbc 	bl	8001630 <hexdump>
	SCPI_Input(&scpi_context, (char *) buf, len);
 80016b8:	887b      	ldrh	r3, [r7, #2]
 80016ba:	461a      	mov	r2, r3
 80016bc:	6879      	ldr	r1, [r7, #4]
 80016be:	4808      	ldr	r0, [pc, #32]	; (80016e0 <scpi_glue_input+0x44>)
 80016c0:	f006 fbf8 	bl	8007eb4 <SCPI_Input>
	if (final) {
 80016c4:	787b      	ldrb	r3, [r7, #1]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d004      	beq.n	80016d4 <scpi_glue_input+0x38>
		SCPI_Input(&scpi_context, NULL, 0);
 80016ca:	2200      	movs	r2, #0
 80016cc:	2100      	movs	r1, #0
 80016ce:	4804      	ldr	r0, [pc, #16]	; (80016e0 <scpi_glue_input+0x44>)
 80016d0:	f006 fbf0 	bl	8007eb4 <SCPI_Input>
	}
}
 80016d4:	bf00      	nop
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	0800e648 	.word	0x0800e648
 80016e0:	200000b0 	.word	0x200000b0

080016e4 <interp1>:
/*
 * I ARE DUM
 * http://stackoverflow.com/questions/3304513/stretching-out-an-array
 */
static float interp1(float x, const uint16_t a[], int n)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b087      	sub	sp, #28
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	ed87 0a03 	vstr	s0, [r7, #12]
 80016ee:	60b8      	str	r0, [r7, #8]
 80016f0:	6079      	str	r1, [r7, #4]
	if (x <= 0) {
 80016f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80016f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016fe:	d806      	bhi.n	800170e <interp1+0x2a>
		return a[0];
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	881b      	ldrh	r3, [r3, #0]
 8001704:	ee07 3a90 	vmov	s15, r3
 8001708:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800170c:	e047      	b.n	800179e <interp1+0xba>
	}
	if (x >= n - 1) {
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	3b01      	subs	r3, #1
 8001712:	ee07 3a90 	vmov	s15, r3
 8001716:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800171a:	ed97 7a03 	vldr	s14, [r7, #12]
 800171e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001726:	db0c      	blt.n	8001742 <interp1+0x5e>
		return a[n - 1];
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800172e:	3b01      	subs	r3, #1
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	68ba      	ldr	r2, [r7, #8]
 8001734:	4413      	add	r3, r2
 8001736:	881b      	ldrh	r3, [r3, #0]
 8001738:	ee07 3a90 	vmov	s15, r3
 800173c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001740:	e02d      	b.n	800179e <interp1+0xba>
	}
	int j = x;
 8001742:	edd7 7a03 	vldr	s15, [r7, #12]
 8001746:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800174a:	ee17 3a90 	vmov	r3, s15
 800174e:	617b      	str	r3, [r7, #20]
	return a[j] + (x - j) * (a[j + 1] - a[j]);
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	68ba      	ldr	r2, [r7, #8]
 8001756:	4413      	add	r3, r2
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	ee07 3a90 	vmov	s15, r3
 800175e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	ee07 3a90 	vmov	s15, r3
 8001768:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800176c:	edd7 6a03 	vldr	s13, [r7, #12]
 8001770:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	3301      	adds	r3, #1
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	68ba      	ldr	r2, [r7, #8]
 800177c:	4413      	add	r3, r2
 800177e:	881b      	ldrh	r3, [r3, #0]
 8001780:	4619      	mov	r1, r3
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	68ba      	ldr	r2, [r7, #8]
 8001788:	4413      	add	r3, r2
 800178a:	881b      	ldrh	r3, [r3, #0]
 800178c:	1acb      	subs	r3, r1, r3
 800178e:	ee07 3a90 	vmov	s15, r3
 8001792:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001796:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800179a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800179e:	eeb0 0a67 	vmov.f32	s0, s15
 80017a2:	371c      	adds	r7, #28
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	0000      	movs	r0, r0
	...

080017b0 <calculate_output>:

static void calculate_output(const uint16_t *source, int source_len,
	uint16_t *dest, int dest_len,
	float ampl, float offset)
{
 80017b0:	b5b0      	push	{r4, r5, r7, lr}
 80017b2:	b08c      	sub	sp, #48	; 0x30
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6178      	str	r0, [r7, #20]
 80017b8:	6139      	str	r1, [r7, #16]
 80017ba:	60fa      	str	r2, [r7, #12]
 80017bc:	60bb      	str	r3, [r7, #8]
 80017be:	ed87 0a01 	vstr	s0, [r7, #4]
 80017c2:	edc7 0a00 	vstr	s1, [r7]
	float nom = source_len - 1;
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	3b01      	subs	r3, #1
 80017ca:	ee07 3a90 	vmov	s15, r3
 80017ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017d2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float denom = dest_len - 1;
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	3b01      	subs	r3, #1
 80017da:	ee07 3a90 	vmov	s15, r3
 80017de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017e2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float step = nom / denom;
 80017e6:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80017ea:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80017ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017f2:	edc7 7a08 	vstr	s15, [r7, #32]
	float offset_bits = offset / FULL_SCALE * 4095;
 80017f6:	6838      	ldr	r0, [r7, #0]
 80017f8:	f7fe fea6 	bl	8000548 <__aeabi_f2d>
 80017fc:	f04f 0200 	mov.w	r2, #0
 8001800:	4b3f      	ldr	r3, [pc, #252]	; (8001900 <calculate_output+0x150>)
 8001802:	f7ff f823 	bl	800084c <__aeabi_ddiv>
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	4610      	mov	r0, r2
 800180c:	4619      	mov	r1, r3
 800180e:	a33a      	add	r3, pc, #232	; (adr r3, 80018f8 <calculate_output+0x148>)
 8001810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001814:	f7fe fef0 	bl	80005f8 <__aeabi_dmul>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4610      	mov	r0, r2
 800181e:	4619      	mov	r1, r3
 8001820:	f7ff f9cc 	bl	8000bbc <__aeabi_d2f>
 8001824:	4603      	mov	r3, r0
 8001826:	61fb      	str	r3, [r7, #28]
	offset_bits += ampl / 2.0;  /* centered please! */
 8001828:	69f8      	ldr	r0, [r7, #28]
 800182a:	f7fe fe8d 	bl	8000548 <__aeabi_f2d>
 800182e:	4604      	mov	r4, r0
 8001830:	460d      	mov	r5, r1
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7fe fe88 	bl	8000548 <__aeabi_f2d>
 8001838:	f04f 0200 	mov.w	r2, #0
 800183c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001840:	f7ff f804 	bl	800084c <__aeabi_ddiv>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	4620      	mov	r0, r4
 800184a:	4629      	mov	r1, r5
 800184c:	f7fe fd1e 	bl	800028c <__adddf3>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	4610      	mov	r0, r2
 8001856:	4619      	mov	r1, r3
 8001858:	f7ff f9b0 	bl	8000bbc <__aeabi_d2f>
 800185c:	4603      	mov	r3, r0
 800185e:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < dest_len; i++) {
 8001860:	2300      	movs	r3, #0
 8001862:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001864:	e03c      	b.n	80018e0 <calculate_output+0x130>
		float si = interp1(i*step, source, source_len);
 8001866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001868:	ee07 3a90 	vmov	s15, r3
 800186c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001870:	edd7 7a08 	vldr	s15, [r7, #32]
 8001874:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001878:	6939      	ldr	r1, [r7, #16]
 800187a:	6978      	ldr	r0, [r7, #20]
 800187c:	eeb0 0a67 	vmov.f32	s0, s15
 8001880:	f7ff ff30 	bl	80016e4 <interp1>
 8001884:	ed87 0a06 	vstr	s0, [r7, #24]
		dest[i] = si * ampl / FULL_SCALE + offset_bits;
 8001888:	ed97 7a06 	vldr	s14, [r7, #24]
 800188c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001890:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001894:	ee17 0a90 	vmov	r0, s15
 8001898:	f7fe fe56 	bl	8000548 <__aeabi_f2d>
 800189c:	f04f 0200 	mov.w	r2, #0
 80018a0:	4b17      	ldr	r3, [pc, #92]	; (8001900 <calculate_output+0x150>)
 80018a2:	f7fe ffd3 	bl	800084c <__aeabi_ddiv>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	4614      	mov	r4, r2
 80018ac:	461d      	mov	r5, r3
 80018ae:	69f8      	ldr	r0, [r7, #28]
 80018b0:	f7fe fe4a 	bl	8000548 <__aeabi_f2d>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	4620      	mov	r0, r4
 80018ba:	4629      	mov	r1, r5
 80018bc:	f7fe fce6 	bl	800028c <__adddf3>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	4610      	mov	r0, r2
 80018c6:	4619      	mov	r1, r3
 80018c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	68fa      	ldr	r2, [r7, #12]
 80018ce:	18d4      	adds	r4, r2, r3
 80018d0:	f7ff f954 	bl	8000b7c <__aeabi_d2uiz>
 80018d4:	4603      	mov	r3, r0
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	8023      	strh	r3, [r4, #0]
	for (int i = 0; i < dest_len; i++) {
 80018da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018dc:	3301      	adds	r3, #1
 80018de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	dbbe      	blt.n	8001866 <calculate_output+0xb6>
	}
}
 80018e8:	bf00      	nop
 80018ea:	bf00      	nop
 80018ec:	3730      	adds	r7, #48	; 0x30
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bdb0      	pop	{r4, r5, r7, pc}
 80018f2:	bf00      	nop
 80018f4:	f3af 8000 	nop.w
 80018f8:	00000000 	.word	0x00000000
 80018fc:	40affe00 	.word	0x40affe00
 8001900:	40080000 	.word	0x40080000

08001904 <funcgen_sin>:

void funcgen_sin(int channel, float frequency, float ampl, float offset) {
 8001904:	b5b0      	push	{r4, r5, r7, lr}
 8001906:	b088      	sub	sp, #32
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001910:	edc7 0a01 	vstr	s1, [r7, #4]
 8001914:	ed87 1a00 	vstr	s2, [r7]
	uint16_t *wavedata = state.outputs[channel]->waveform;
 8001918:	4a35      	ldr	r2, [pc, #212]	; (80019f0 <funcgen_sin+0xec>)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001920:	3312      	adds	r3, #18
 8001922:	61fb      	str	r3, [r7, #28]
	int dest_len = ARRAY_LENGTH(state.outputs[channel]->waveform);
 8001924:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001928:	61bb      	str	r3, [r7, #24]
	
	/* Take the input wave and calculate the wavetable for DMA */
	calculate_output(lut_sine, ARRAY_LENGTH(lut_sine), wavedata, dest_len, ampl, offset);
 800192a:	edd7 0a00 	vldr	s1, [r7]
 800192e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	69fa      	ldr	r2, [r7, #28]
 8001936:	2121      	movs	r1, #33	; 0x21
 8001938:	482e      	ldr	r0, [pc, #184]	; (80019f4 <funcgen_sin+0xf0>)
 800193a:	f7ff ff39 	bl	80017b0 <calculate_output>
	//calculate_output(lut_sine, 32, wavedata, FUNCGEN_WAVE_SIZE, ampl, offset);

	float usecs_per_wave = 1000000 / frequency;
 800193e:	eddf 6a2e 	vldr	s13, [pc, #184]	; 80019f8 <funcgen_sin+0xf4>
 8001942:	ed97 7a02 	vldr	s14, [r7, #8]
 8001946:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800194a:	edc7 7a05 	vstr	s15, [r7, #20]
	int nanos_per_sample = ceil(1000 * usecs_per_wave / (dest_len * 1.0));
 800194e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001952:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80019fc <funcgen_sin+0xf8>
 8001956:	ee67 7a87 	vmul.f32	s15, s15, s14
 800195a:	ee17 0a90 	vmov	r0, s15
 800195e:	f7fe fdf3 	bl	8000548 <__aeabi_f2d>
 8001962:	4604      	mov	r4, r0
 8001964:	460d      	mov	r5, r1
 8001966:	69b8      	ldr	r0, [r7, #24]
 8001968:	f7fe fddc 	bl	8000524 <__aeabi_i2d>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	4620      	mov	r0, r4
 8001972:	4629      	mov	r1, r5
 8001974:	f7fe ff6a 	bl	800084c <__aeabi_ddiv>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	ec43 2b17 	vmov	d7, r2, r3
 8001980:	eeb0 0a47 	vmov.f32	s0, s14
 8001984:	eef0 0a67 	vmov.f32	s1, s15
 8001988:	f00c fcf2 	bl	800e370 <ceil>
 800198c:	ec53 2b10 	vmov	r2, r3, d0
 8001990:	4610      	mov	r0, r2
 8001992:	4619      	mov	r1, r3
 8001994:	f7ff f8ca 	bl	8000b2c <__aeabi_d2iz>
 8001998:	4603      	mov	r3, r0
 800199a:	613b      	str	r3, [r7, #16]
	//funcgen_plat_timer_setup(channel, nanos_per_sample);
	//funcgen_plat_dma_setup(channel, wavedata, dest_len);
	//funcgen_plat_dac_setup(channel);
	/*++++++++++++++++++++++*/
	
        state.outputs[channel]->mode = OUTPUT_MODE_SINE;
 800199c:	4a14      	ldr	r2, [pc, #80]	; (80019f0 <funcgen_sin+0xec>)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a4:	2200      	movs	r2, #0
 80019a6:	741a      	strb	r2, [r3, #16]
	state.outputs[channel]->enabled = true;
 80019a8:	4a11      	ldr	r2, [pc, #68]	; (80019f0 <funcgen_sin+0xec>)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b0:	2201      	movs	r2, #1
 80019b2:	701a      	strb	r2, [r3, #0]
	state.outputs[channel]->freq = frequency;
 80019b4:	4a0e      	ldr	r2, [pc, #56]	; (80019f0 <funcgen_sin+0xec>)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019bc:	68ba      	ldr	r2, [r7, #8]
 80019be:	60da      	str	r2, [r3, #12]
	state.outputs[channel]->ampl = ampl;
 80019c0:	4a0b      	ldr	r2, [pc, #44]	; (80019f0 <funcgen_sin+0xec>)
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	605a      	str	r2, [r3, #4]
	state.outputs[channel]->offset = offset;
 80019cc:	4a08      	ldr	r2, [pc, #32]	; (80019f0 <funcgen_sin+0xec>)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	609a      	str	r2, [r3, #8]
	/* we're not doing any tricks on variable lengths for better frequency control at the moment */
	state.outputs[channel]->waveform_length = dest_len;
 80019d8:	4a05      	ldr	r2, [pc, #20]	; (80019f0 <funcgen_sin+0xec>)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
}
 80019e6:	bf00      	nop
 80019e8:	3720      	adds	r7, #32
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bdb0      	pop	{r4, r5, r7, pc}
 80019ee:	bf00      	nop
 80019f0:	20000930 	.word	0x20000930
 80019f4:	0800e9b0 	.word	0x0800e9b0
 80019f8:	49742400 	.word	0x49742400
 80019fc:	447a0000 	.word	0x447a0000

08001a00 <funcgen_user>:

void funcgen_user(int channel, float frequency, float ampl, float offset) {
 8001a00:	b5b0      	push	{r4, r5, r7, lr}
 8001a02:	b088      	sub	sp, #32
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a0c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001a10:	ed87 1a00 	vstr	s2, [r7]
        uint16_t *wavedata = state.outputs[channel]->waveform;
 8001a14:	4a32      	ldr	r2, [pc, #200]	; (8001ae0 <funcgen_user+0xe0>)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a1c:	3312      	adds	r3, #18
 8001a1e:	61fb      	str	r3, [r7, #28]
	int dest_len = state.outputs[channel]->waveform_length;
 8001a20:	4a2f      	ldr	r2, [pc, #188]	; (8001ae0 <funcgen_user+0xe0>)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a28:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8001a2c:	61bb      	str	r3, [r7, #24]

	float usecs_per_wave = 1000000 / frequency;
 8001a2e:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8001ae4 <funcgen_user+0xe4>
 8001a32:	ed97 7a02 	vldr	s14, [r7, #8]
 8001a36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a3a:	edc7 7a05 	vstr	s15, [r7, #20]
	int nanos_per_sample = ceil(1000 * usecs_per_wave / (dest_len * 1.0));
 8001a3e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a42:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001ae8 <funcgen_user+0xe8>
 8001a46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a4a:	ee17 0a90 	vmov	r0, s15
 8001a4e:	f7fe fd7b 	bl	8000548 <__aeabi_f2d>
 8001a52:	4604      	mov	r4, r0
 8001a54:	460d      	mov	r5, r1
 8001a56:	69b8      	ldr	r0, [r7, #24]
 8001a58:	f7fe fd64 	bl	8000524 <__aeabi_i2d>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4620      	mov	r0, r4
 8001a62:	4629      	mov	r1, r5
 8001a64:	f7fe fef2 	bl	800084c <__aeabi_ddiv>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	ec43 2b17 	vmov	d7, r2, r3
 8001a70:	eeb0 0a47 	vmov.f32	s0, s14
 8001a74:	eef0 0a67 	vmov.f32	s1, s15
 8001a78:	f00c fc7a 	bl	800e370 <ceil>
 8001a7c:	ec53 2b10 	vmov	r2, r3, d0
 8001a80:	4610      	mov	r0, r2
 8001a82:	4619      	mov	r1, r3
 8001a84:	f7ff f852 	bl	8000b2c <__aeabi_d2iz>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	613b      	str	r3, [r7, #16]
	//funcgen_plat_timer_setup(channel, nanos_per_sample);
	//funcgen_plat_dma_setup(channel, wavedata, dest_len);
	//funcgen_plat_dac_setup(channel);
	/*++++++++++++++++++++++*/

        state.outputs[channel]->mode = OUTPUT_MODE_USER;
 8001a8c:	4a14      	ldr	r2, [pc, #80]	; (8001ae0 <funcgen_user+0xe0>)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a94:	2203      	movs	r2, #3
 8001a96:	741a      	strb	r2, [r3, #16]
	state.outputs[channel]->enabled = true;
 8001a98:	4a11      	ldr	r2, [pc, #68]	; (8001ae0 <funcgen_user+0xe0>)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	701a      	strb	r2, [r3, #0]
	state.outputs[channel]->freq = frequency;
 8001aa4:	4a0e      	ldr	r2, [pc, #56]	; (8001ae0 <funcgen_user+0xe0>)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aac:	68ba      	ldr	r2, [r7, #8]
 8001aae:	60da      	str	r2, [r3, #12]
	state.outputs[channel]->ampl = ampl;
 8001ab0:	4a0b      	ldr	r2, [pc, #44]	; (8001ae0 <funcgen_user+0xe0>)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	605a      	str	r2, [r3, #4]
	state.outputs[channel]->offset = offset;
 8001abc:	4a08      	ldr	r2, [pc, #32]	; (8001ae0 <funcgen_user+0xe0>)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	609a      	str	r2, [r3, #8]
	/* we're not doing any tricks on variable lengths for better frequency control at the moment */
	state.outputs[channel]->waveform_length = dest_len;
 8001ac8:	4a05      	ldr	r2, [pc, #20]	; (8001ae0 <funcgen_user+0xe0>)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
}
 8001ad6:	bf00      	nop
 8001ad8:	3720      	adds	r7, #32
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bdb0      	pop	{r4, r5, r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000930 	.word	0x20000930
 8001ae4:	49742400 	.word	0x49742400
 8001ae8:	447a0000 	.word	0x447a0000

08001aec <funcgen_output>:

void funcgen_output(int channel, bool enable)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	460b      	mov	r3, r1
 8001af6:	70fb      	strb	r3, [r7, #3]
	//funcgen_plat_output(channel, enable);
	state.outputs[channel]->enabled = enable;
 8001af8:	4a05      	ldr	r2, [pc, #20]	; (8001b10 <funcgen_output+0x24>)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b00:	78fa      	ldrb	r2, [r7, #3]
 8001b02:	701a      	strb	r2, [r3, #0]
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	20000930 	.word	0x20000930

08001b14 <funcgen_getstate>:

struct funcgen_state_t* funcgen_getstate(void) {
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
	return &state;
 8001b18:	4b02      	ldr	r3, [pc, #8]	; (8001b24 <funcgen_getstate+0x10>)
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	20000930 	.word	0x20000930

08001b28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b2e:	f000 fccf 	bl	80024d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b32:	f000 f811 	bl	8001b58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b36:	f000 f925 	bl	8001d84 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001b3a:	f000 f88f 	bl	8001c5c <MX_I2C1_Init>
  MX_I2S3_Init();
 8001b3e:	f000 f8bb 	bl	8001cb8 <MX_I2S3_Init>
  MX_SPI1_Init();
 8001b42:	f000 f8e9 	bl	8001d18 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8001b46:	f008 fc2b 	bl	800a3a0 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  char our_serial[9];
  our_serial[9] = '\0';
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	737b      	strb	r3, [r7, #13]
  scpi_init_platform(our_serial);
 8001b4e:	1d3b      	adds	r3, r7, #4
 8001b50:	4618      	mov	r0, r3
 8001b52:	f000 fa59 	bl	8002008 <scpi_init_platform>
  while (1)
 8001b56:	e7fe      	b.n	8001b56 <main+0x2e>

08001b58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b098      	sub	sp, #96	; 0x60
 8001b5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b5e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b62:	2230      	movs	r2, #48	; 0x30
 8001b64:	2100      	movs	r1, #0
 8001b66:	4618      	mov	r0, r3
 8001b68:	f009 f9e7 	bl	800af3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b6c:	f107 031c 	add.w	r3, r7, #28
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]
 8001b7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b7c:	f107 030c 	add.w	r3, r7, #12
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60bb      	str	r3, [r7, #8]
 8001b8e:	4b31      	ldr	r3, [pc, #196]	; (8001c54 <SystemClock_Config+0xfc>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	4a30      	ldr	r2, [pc, #192]	; (8001c54 <SystemClock_Config+0xfc>)
 8001b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b98:	6413      	str	r3, [r2, #64]	; 0x40
 8001b9a:	4b2e      	ldr	r3, [pc, #184]	; (8001c54 <SystemClock_Config+0xfc>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba2:	60bb      	str	r3, [r7, #8]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	607b      	str	r3, [r7, #4]
 8001baa:	4b2b      	ldr	r3, [pc, #172]	; (8001c58 <SystemClock_Config+0x100>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a2a      	ldr	r2, [pc, #168]	; (8001c58 <SystemClock_Config+0x100>)
 8001bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bb4:	6013      	str	r3, [r2, #0]
 8001bb6:	4b28      	ldr	r3, [pc, #160]	; (8001c58 <SystemClock_Config+0x100>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bbe:	607b      	str	r3, [r7, #4]
 8001bc0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bd0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bd4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001bd6:	2308      	movs	r3, #8
 8001bd8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001bda:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001bde:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001be0:	2302      	movs	r3, #2
 8001be2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001be4:	2307      	movs	r3, #7
 8001be6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001be8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bec:	4618      	mov	r0, r3
 8001bee:	f002 ff35 	bl	8004a5c <HAL_RCC_OscConfig>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001bf8:	f000 f9c2 	bl	8001f80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bfc:	230f      	movs	r3, #15
 8001bfe:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c00:	2302      	movs	r3, #2
 8001c02:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c04:	2300      	movs	r3, #0
 8001c06:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c08:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c0c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c12:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c14:	f107 031c 	add.w	r3, r7, #28
 8001c18:	2105      	movs	r1, #5
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f003 f996 	bl	8004f4c <HAL_RCC_ClockConfig>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001c26:	f000 f9ab 	bl	8001f80 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001c2e:	23c0      	movs	r3, #192	; 0xc0
 8001c30:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001c32:	2302      	movs	r3, #2
 8001c34:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c36:	f107 030c 	add.w	r3, r7, #12
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f003 fb6e 	bl	800531c <HAL_RCCEx_PeriphCLKConfig>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001c46:	f000 f99b 	bl	8001f80 <Error_Handler>
  }
}
 8001c4a:	bf00      	nop
 8001c4c:	3760      	adds	r7, #96	; 0x60
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40023800 	.word	0x40023800
 8001c58:	40007000 	.word	0x40007000

08001c5c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c60:	4b12      	ldr	r3, [pc, #72]	; (8001cac <MX_I2C1_Init+0x50>)
 8001c62:	4a13      	ldr	r2, [pc, #76]	; (8001cb0 <MX_I2C1_Init+0x54>)
 8001c64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001c66:	4b11      	ldr	r3, [pc, #68]	; (8001cac <MX_I2C1_Init+0x50>)
 8001c68:	4a12      	ldr	r2, [pc, #72]	; (8001cb4 <MX_I2C1_Init+0x58>)
 8001c6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c6c:	4b0f      	ldr	r3, [pc, #60]	; (8001cac <MX_I2C1_Init+0x50>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c72:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <MX_I2C1_Init+0x50>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c78:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <MX_I2C1_Init+0x50>)
 8001c7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c7e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c80:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <MX_I2C1_Init+0x50>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c86:	4b09      	ldr	r3, [pc, #36]	; (8001cac <MX_I2C1_Init+0x50>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c8c:	4b07      	ldr	r3, [pc, #28]	; (8001cac <MX_I2C1_Init+0x50>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c92:	4b06      	ldr	r3, [pc, #24]	; (8001cac <MX_I2C1_Init+0x50>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c98:	4804      	ldr	r0, [pc, #16]	; (8001cac <MX_I2C1_Init+0x50>)
 8001c9a:	f000 ff77 	bl	8002b8c <HAL_I2C_Init>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ca4:	f000 f96c 	bl	8001f80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ca8:	bf00      	nop
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	20001028 	.word	0x20001028
 8001cb0:	40005400 	.word	0x40005400
 8001cb4:	000186a0 	.word	0x000186a0

08001cb8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001cbc:	4b13      	ldr	r3, [pc, #76]	; (8001d0c <MX_I2S3_Init+0x54>)
 8001cbe:	4a14      	ldr	r2, [pc, #80]	; (8001d10 <MX_I2S3_Init+0x58>)
 8001cc0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001cc2:	4b12      	ldr	r3, [pc, #72]	; (8001d0c <MX_I2S3_Init+0x54>)
 8001cc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cc8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001cca:	4b10      	ldr	r3, [pc, #64]	; (8001d0c <MX_I2S3_Init+0x54>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001cd0:	4b0e      	ldr	r3, [pc, #56]	; (8001d0c <MX_I2S3_Init+0x54>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001cd6:	4b0d      	ldr	r3, [pc, #52]	; (8001d0c <MX_I2S3_Init+0x54>)
 8001cd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cdc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001cde:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <MX_I2S3_Init+0x54>)
 8001ce0:	4a0c      	ldr	r2, [pc, #48]	; (8001d14 <MX_I2S3_Init+0x5c>)
 8001ce2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001ce4:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <MX_I2S3_Init+0x54>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001cea:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <MX_I2S3_Init+0x54>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001cf0:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <MX_I2S3_Init+0x54>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001cf6:	4805      	ldr	r0, [pc, #20]	; (8001d0c <MX_I2S3_Init+0x54>)
 8001cf8:	f001 f88c 	bl	8002e14 <HAL_I2S_Init>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001d02:	f000 f93d 	bl	8001f80 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	200010d4 	.word	0x200010d4
 8001d10:	40003c00 	.word	0x40003c00
 8001d14:	00017700 	.word	0x00017700

08001d18 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001d1c:	4b17      	ldr	r3, [pc, #92]	; (8001d7c <MX_SPI1_Init+0x64>)
 8001d1e:	4a18      	ldr	r2, [pc, #96]	; (8001d80 <MX_SPI1_Init+0x68>)
 8001d20:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d22:	4b16      	ldr	r3, [pc, #88]	; (8001d7c <MX_SPI1_Init+0x64>)
 8001d24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d28:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d2a:	4b14      	ldr	r3, [pc, #80]	; (8001d7c <MX_SPI1_Init+0x64>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d30:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <MX_SPI1_Init+0x64>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d36:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <MX_SPI1_Init+0x64>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d3c:	4b0f      	ldr	r3, [pc, #60]	; (8001d7c <MX_SPI1_Init+0x64>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d42:	4b0e      	ldr	r3, [pc, #56]	; (8001d7c <MX_SPI1_Init+0x64>)
 8001d44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d48:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d4a:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <MX_SPI1_Init+0x64>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d50:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <MX_SPI1_Init+0x64>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d56:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <MX_SPI1_Init+0x64>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d5c:	4b07      	ldr	r3, [pc, #28]	; (8001d7c <MX_SPI1_Init+0x64>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d62:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <MX_SPI1_Init+0x64>)
 8001d64:	220a      	movs	r2, #10
 8001d66:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d68:	4804      	ldr	r0, [pc, #16]	; (8001d7c <MX_SPI1_Init+0x64>)
 8001d6a:	f003 fc17 	bl	800559c <HAL_SPI_Init>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001d74:	f000 f904 	bl	8001f80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d78:	bf00      	nop
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	2000107c 	.word	0x2000107c
 8001d80:	40013000 	.word	0x40013000

08001d84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08c      	sub	sp, #48	; 0x30
 8001d88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8a:	f107 031c 	add.w	r3, r7, #28
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	605a      	str	r2, [r3, #4]
 8001d94:	609a      	str	r2, [r3, #8]
 8001d96:	60da      	str	r2, [r3, #12]
 8001d98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	61bb      	str	r3, [r7, #24]
 8001d9e:	4b71      	ldr	r3, [pc, #452]	; (8001f64 <MX_GPIO_Init+0x1e0>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	4a70      	ldr	r2, [pc, #448]	; (8001f64 <MX_GPIO_Init+0x1e0>)
 8001da4:	f043 0310 	orr.w	r3, r3, #16
 8001da8:	6313      	str	r3, [r2, #48]	; 0x30
 8001daa:	4b6e      	ldr	r3, [pc, #440]	; (8001f64 <MX_GPIO_Init+0x1e0>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	f003 0310 	and.w	r3, r3, #16
 8001db2:	61bb      	str	r3, [r7, #24]
 8001db4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	617b      	str	r3, [r7, #20]
 8001dba:	4b6a      	ldr	r3, [pc, #424]	; (8001f64 <MX_GPIO_Init+0x1e0>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	4a69      	ldr	r2, [pc, #420]	; (8001f64 <MX_GPIO_Init+0x1e0>)
 8001dc0:	f043 0304 	orr.w	r3, r3, #4
 8001dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc6:	4b67      	ldr	r3, [pc, #412]	; (8001f64 <MX_GPIO_Init+0x1e0>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	f003 0304 	and.w	r3, r3, #4
 8001dce:	617b      	str	r3, [r7, #20]
 8001dd0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	613b      	str	r3, [r7, #16]
 8001dd6:	4b63      	ldr	r3, [pc, #396]	; (8001f64 <MX_GPIO_Init+0x1e0>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	4a62      	ldr	r2, [pc, #392]	; (8001f64 <MX_GPIO_Init+0x1e0>)
 8001ddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001de0:	6313      	str	r3, [r2, #48]	; 0x30
 8001de2:	4b60      	ldr	r3, [pc, #384]	; (8001f64 <MX_GPIO_Init+0x1e0>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dea:	613b      	str	r3, [r7, #16]
 8001dec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dee:	2300      	movs	r3, #0
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	4b5c      	ldr	r3, [pc, #368]	; (8001f64 <MX_GPIO_Init+0x1e0>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	4a5b      	ldr	r2, [pc, #364]	; (8001f64 <MX_GPIO_Init+0x1e0>)
 8001df8:	f043 0301 	orr.w	r3, r3, #1
 8001dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfe:	4b59      	ldr	r3, [pc, #356]	; (8001f64 <MX_GPIO_Init+0x1e0>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60bb      	str	r3, [r7, #8]
 8001e0e:	4b55      	ldr	r3, [pc, #340]	; (8001f64 <MX_GPIO_Init+0x1e0>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	4a54      	ldr	r2, [pc, #336]	; (8001f64 <MX_GPIO_Init+0x1e0>)
 8001e14:	f043 0302 	orr.w	r3, r3, #2
 8001e18:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1a:	4b52      	ldr	r3, [pc, #328]	; (8001f64 <MX_GPIO_Init+0x1e0>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	60bb      	str	r3, [r7, #8]
 8001e24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	607b      	str	r3, [r7, #4]
 8001e2a:	4b4e      	ldr	r3, [pc, #312]	; (8001f64 <MX_GPIO_Init+0x1e0>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	4a4d      	ldr	r2, [pc, #308]	; (8001f64 <MX_GPIO_Init+0x1e0>)
 8001e30:	f043 0308 	orr.w	r3, r3, #8
 8001e34:	6313      	str	r3, [r2, #48]	; 0x30
 8001e36:	4b4b      	ldr	r3, [pc, #300]	; (8001f64 <MX_GPIO_Init+0x1e0>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	f003 0308 	and.w	r3, r3, #8
 8001e3e:	607b      	str	r3, [r7, #4]
 8001e40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001e42:	2200      	movs	r2, #0
 8001e44:	2108      	movs	r1, #8
 8001e46:	4848      	ldr	r0, [pc, #288]	; (8001f68 <MX_GPIO_Init+0x1e4>)
 8001e48:	f000 fe86 	bl	8002b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	2101      	movs	r1, #1
 8001e50:	4846      	ldr	r0, [pc, #280]	; (8001f6c <MX_GPIO_Init+0x1e8>)
 8001e52:	f000 fe81 	bl	8002b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001e56:	2200      	movs	r2, #0
 8001e58:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001e5c:	4844      	ldr	r0, [pc, #272]	; (8001f70 <MX_GPIO_Init+0x1ec>)
 8001e5e:	f000 fe7b 	bl	8002b58 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001e62:	2308      	movs	r3, #8
 8001e64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e66:	2301      	movs	r3, #1
 8001e68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001e72:	f107 031c 	add.w	r3, r7, #28
 8001e76:	4619      	mov	r1, r3
 8001e78:	483b      	ldr	r0, [pc, #236]	; (8001f68 <MX_GPIO_Init+0x1e4>)
 8001e7a:	f000 fcd1 	bl	8002820 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e82:	2301      	movs	r3, #1
 8001e84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001e8e:	f107 031c 	add.w	r3, r7, #28
 8001e92:	4619      	mov	r1, r3
 8001e94:	4835      	ldr	r0, [pc, #212]	; (8001f6c <MX_GPIO_Init+0x1e8>)
 8001e96:	f000 fcc3 	bl	8002820 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001e9a:	2308      	movs	r3, #8
 8001e9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001eaa:	2305      	movs	r3, #5
 8001eac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001eae:	f107 031c 	add.w	r3, r7, #28
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	482d      	ldr	r0, [pc, #180]	; (8001f6c <MX_GPIO_Init+0x1e8>)
 8001eb6:	f000 fcb3 	bl	8002820 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001ebe:	4b2d      	ldr	r3, [pc, #180]	; (8001f74 <MX_GPIO_Init+0x1f0>)
 8001ec0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ec6:	f107 031c 	add.w	r3, r7, #28
 8001eca:	4619      	mov	r1, r3
 8001ecc:	482a      	ldr	r0, [pc, #168]	; (8001f78 <MX_GPIO_Init+0x1f4>)
 8001ece:	f000 fca7 	bl	8002820 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001ed2:	2304      	movs	r3, #4
 8001ed4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001ede:	f107 031c 	add.w	r3, r7, #28
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4825      	ldr	r0, [pc, #148]	; (8001f7c <MX_GPIO_Init+0x1f8>)
 8001ee6:	f000 fc9b 	bl	8002820 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001eea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001efc:	2305      	movs	r3, #5
 8001efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001f00:	f107 031c 	add.w	r3, r7, #28
 8001f04:	4619      	mov	r1, r3
 8001f06:	481d      	ldr	r0, [pc, #116]	; (8001f7c <MX_GPIO_Init+0x1f8>)
 8001f08:	f000 fc8a 	bl	8002820 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001f0c:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001f10:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f12:	2301      	movs	r3, #1
 8001f14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f1e:	f107 031c 	add.w	r3, r7, #28
 8001f22:	4619      	mov	r1, r3
 8001f24:	4812      	ldr	r0, [pc, #72]	; (8001f70 <MX_GPIO_Init+0x1ec>)
 8001f26:	f000 fc7b 	bl	8002820 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001f2a:	2320      	movs	r3, #32
 8001f2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f32:	2300      	movs	r3, #0
 8001f34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001f36:	f107 031c 	add.w	r3, r7, #28
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	480c      	ldr	r0, [pc, #48]	; (8001f70 <MX_GPIO_Init+0x1ec>)
 8001f3e:	f000 fc6f 	bl	8002820 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001f42:	2302      	movs	r3, #2
 8001f44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001f46:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <MX_GPIO_Init+0x1f0>)
 8001f48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001f4e:	f107 031c 	add.w	r3, r7, #28
 8001f52:	4619      	mov	r1, r3
 8001f54:	4804      	ldr	r0, [pc, #16]	; (8001f68 <MX_GPIO_Init+0x1e4>)
 8001f56:	f000 fc63 	bl	8002820 <HAL_GPIO_Init>

}
 8001f5a:	bf00      	nop
 8001f5c:	3730      	adds	r7, #48	; 0x30
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40023800 	.word	0x40023800
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	40020800 	.word	0x40020800
 8001f70:	40020c00 	.word	0x40020c00
 8001f74:	10120000 	.word	0x10120000
 8001f78:	40020000 	.word	0x40020000
 8001f7c:	40020400 	.word	0x40020400

08001f80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f84:	b672      	cpsid	i
}
 8001f86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f88:	e7fe      	b.n	8001f88 <Error_Handler+0x8>
	...

08001f8c <scpi_impl_write>:
#include <stdio.h>
#include <string.h>
#include "dscpi.h"

size_t scpi_impl_write(scpi_t *context, const char *data, size_t len)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
	(void) context;
	hexdump("scpi reply", (uint8_t *) data, len);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	68b9      	ldr	r1, [r7, #8]
 8001fa0:	4805      	ldr	r0, [pc, #20]	; (8001fb8 <scpi_impl_write+0x2c>)
 8001fa2:	f7ff fb45 	bl	8001630 <hexdump>
	tmc_glue_send_data((uint8_t *) data, len);
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	68b8      	ldr	r0, [r7, #8]
 8001faa:	f004 fea5 	bl	8006cf8 <tmc_glue_send_data>
	return len;
 8001fae:	687b      	ldr	r3, [r7, #4]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	0800e658 	.word	0x0800e658

08001fbc <scpi_impl_error>:

int scpi_impl_error(scpi_t * context, int_fast16_t err)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
	(void) context;
	printf("**ERROR: %d, \"%s\"\r\n", err, SCPI_ErrorTranslate(err));
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	b21b      	sxth	r3, r3
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f005 fa6e 	bl	80074ac <SCPI_ErrorTranslate>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	6839      	ldr	r1, [r7, #0]
 8001fd6:	4804      	ldr	r0, [pc, #16]	; (8001fe8 <scpi_impl_error+0x2c>)
 8001fd8:	f008 ffb8 	bl	800af4c <iprintf>
	return 0;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	0800e664 	.word	0x0800e664

08001fec <scpi_impl_reset>:

scpi_result_t scpi_impl_reset(scpi_t *context)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
	(void) context;
	/* TODO could do a full system reset here? */
	printf("Result handler got called!\n");
 8001ff4:	4803      	ldr	r0, [pc, #12]	; (8002004 <scpi_impl_reset+0x18>)
 8001ff6:	f009 f845 	bl	800b084 <puts>
	return SCPI_RES_OK;
 8001ffa:	2301      	movs	r3, #1
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	0800e678 	.word	0x0800e678

08002008 <scpi_init_platform>:
	.test = NULL,
	.control = NULL,
};


void scpi_init_platform(char *serial_number) {
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
	/* gross having to pass this down twice.  must be a better way.... */
	dscpi_init(&scpi_interface, serial_number);
 8002010:	6879      	ldr	r1, [r7, #4]
 8002012:	4803      	ldr	r0, [pc, #12]	; (8002020 <scpi_init_platform+0x18>)
 8002014:	f7ff faf8 	bl	8001608 <dscpi_init>
}
 8002018:	bf00      	nop
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	20000938 	.word	0x20000938

08002024 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	607b      	str	r3, [r7, #4]
 800202e:	4b10      	ldr	r3, [pc, #64]	; (8002070 <HAL_MspInit+0x4c>)
 8002030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002032:	4a0f      	ldr	r2, [pc, #60]	; (8002070 <HAL_MspInit+0x4c>)
 8002034:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002038:	6453      	str	r3, [r2, #68]	; 0x44
 800203a:	4b0d      	ldr	r3, [pc, #52]	; (8002070 <HAL_MspInit+0x4c>)
 800203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002042:	607b      	str	r3, [r7, #4]
 8002044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	603b      	str	r3, [r7, #0]
 800204a:	4b09      	ldr	r3, [pc, #36]	; (8002070 <HAL_MspInit+0x4c>)
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	4a08      	ldr	r2, [pc, #32]	; (8002070 <HAL_MspInit+0x4c>)
 8002050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002054:	6413      	str	r3, [r2, #64]	; 0x40
 8002056:	4b06      	ldr	r3, [pc, #24]	; (8002070 <HAL_MspInit+0x4c>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205e:	603b      	str	r3, [r7, #0]
 8002060:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002062:	2007      	movs	r0, #7
 8002064:	f000 fb9a 	bl	800279c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002068:	bf00      	nop
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40023800 	.word	0x40023800

08002074 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b08a      	sub	sp, #40	; 0x28
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800207c:	f107 0314 	add.w	r3, r7, #20
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	60da      	str	r2, [r3, #12]
 800208a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a19      	ldr	r2, [pc, #100]	; (80020f8 <HAL_I2C_MspInit+0x84>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d12c      	bne.n	80020f0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	613b      	str	r3, [r7, #16]
 800209a:	4b18      	ldr	r3, [pc, #96]	; (80020fc <HAL_I2C_MspInit+0x88>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	4a17      	ldr	r2, [pc, #92]	; (80020fc <HAL_I2C_MspInit+0x88>)
 80020a0:	f043 0302 	orr.w	r3, r3, #2
 80020a4:	6313      	str	r3, [r2, #48]	; 0x30
 80020a6:	4b15      	ldr	r3, [pc, #84]	; (80020fc <HAL_I2C_MspInit+0x88>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	613b      	str	r3, [r7, #16]
 80020b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80020b2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80020b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020b8:	2312      	movs	r3, #18
 80020ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020bc:	2301      	movs	r3, #1
 80020be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c0:	2300      	movs	r3, #0
 80020c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020c4:	2304      	movs	r3, #4
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c8:	f107 0314 	add.w	r3, r7, #20
 80020cc:	4619      	mov	r1, r3
 80020ce:	480c      	ldr	r0, [pc, #48]	; (8002100 <HAL_I2C_MspInit+0x8c>)
 80020d0:	f000 fba6 	bl	8002820 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020d4:	2300      	movs	r3, #0
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	4b08      	ldr	r3, [pc, #32]	; (80020fc <HAL_I2C_MspInit+0x88>)
 80020da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020dc:	4a07      	ldr	r2, [pc, #28]	; (80020fc <HAL_I2C_MspInit+0x88>)
 80020de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020e2:	6413      	str	r3, [r2, #64]	; 0x40
 80020e4:	4b05      	ldr	r3, [pc, #20]	; (80020fc <HAL_I2C_MspInit+0x88>)
 80020e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80020f0:	bf00      	nop
 80020f2:	3728      	adds	r7, #40	; 0x28
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40005400 	.word	0x40005400
 80020fc:	40023800 	.word	0x40023800
 8002100:	40020400 	.word	0x40020400

08002104 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b08a      	sub	sp, #40	; 0x28
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800210c:	f107 0314 	add.w	r3, r7, #20
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	605a      	str	r2, [r3, #4]
 8002116:	609a      	str	r2, [r3, #8]
 8002118:	60da      	str	r2, [r3, #12]
 800211a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a28      	ldr	r2, [pc, #160]	; (80021c4 <HAL_I2S_MspInit+0xc0>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d14a      	bne.n	80021bc <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	613b      	str	r3, [r7, #16]
 800212a:	4b27      	ldr	r3, [pc, #156]	; (80021c8 <HAL_I2S_MspInit+0xc4>)
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	4a26      	ldr	r2, [pc, #152]	; (80021c8 <HAL_I2S_MspInit+0xc4>)
 8002130:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002134:	6413      	str	r3, [r2, #64]	; 0x40
 8002136:	4b24      	ldr	r3, [pc, #144]	; (80021c8 <HAL_I2S_MspInit+0xc4>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800213e:	613b      	str	r3, [r7, #16]
 8002140:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	4b20      	ldr	r3, [pc, #128]	; (80021c8 <HAL_I2S_MspInit+0xc4>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	4a1f      	ldr	r2, [pc, #124]	; (80021c8 <HAL_I2S_MspInit+0xc4>)
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	6313      	str	r3, [r2, #48]	; 0x30
 8002152:	4b1d      	ldr	r3, [pc, #116]	; (80021c8 <HAL_I2S_MspInit+0xc4>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	4b19      	ldr	r3, [pc, #100]	; (80021c8 <HAL_I2S_MspInit+0xc4>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	4a18      	ldr	r2, [pc, #96]	; (80021c8 <HAL_I2S_MspInit+0xc4>)
 8002168:	f043 0304 	orr.w	r3, r3, #4
 800216c:	6313      	str	r3, [r2, #48]	; 0x30
 800216e:	4b16      	ldr	r3, [pc, #88]	; (80021c8 <HAL_I2S_MspInit+0xc4>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	f003 0304 	and.w	r3, r3, #4
 8002176:	60bb      	str	r3, [r7, #8]
 8002178:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800217a:	2310      	movs	r3, #16
 800217c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217e:	2302      	movs	r3, #2
 8002180:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002182:	2300      	movs	r3, #0
 8002184:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002186:	2300      	movs	r3, #0
 8002188:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800218a:	2306      	movs	r3, #6
 800218c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800218e:	f107 0314 	add.w	r3, r7, #20
 8002192:	4619      	mov	r1, r3
 8002194:	480d      	ldr	r0, [pc, #52]	; (80021cc <HAL_I2S_MspInit+0xc8>)
 8002196:	f000 fb43 	bl	8002820 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800219a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800219e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a0:	2302      	movs	r3, #2
 80021a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a4:	2300      	movs	r3, #0
 80021a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a8:	2300      	movs	r3, #0
 80021aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80021ac:	2306      	movs	r3, #6
 80021ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021b0:	f107 0314 	add.w	r3, r7, #20
 80021b4:	4619      	mov	r1, r3
 80021b6:	4806      	ldr	r0, [pc, #24]	; (80021d0 <HAL_I2S_MspInit+0xcc>)
 80021b8:	f000 fb32 	bl	8002820 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80021bc:	bf00      	nop
 80021be:	3728      	adds	r7, #40	; 0x28
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40003c00 	.word	0x40003c00
 80021c8:	40023800 	.word	0x40023800
 80021cc:	40020000 	.word	0x40020000
 80021d0:	40020800 	.word	0x40020800

080021d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b08a      	sub	sp, #40	; 0x28
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021dc:	f107 0314 	add.w	r3, r7, #20
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	609a      	str	r2, [r3, #8]
 80021e8:	60da      	str	r2, [r3, #12]
 80021ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a19      	ldr	r2, [pc, #100]	; (8002258 <HAL_SPI_MspInit+0x84>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d12b      	bne.n	800224e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	613b      	str	r3, [r7, #16]
 80021fa:	4b18      	ldr	r3, [pc, #96]	; (800225c <HAL_SPI_MspInit+0x88>)
 80021fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fe:	4a17      	ldr	r2, [pc, #92]	; (800225c <HAL_SPI_MspInit+0x88>)
 8002200:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002204:	6453      	str	r3, [r2, #68]	; 0x44
 8002206:	4b15      	ldr	r3, [pc, #84]	; (800225c <HAL_SPI_MspInit+0x88>)
 8002208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800220e:	613b      	str	r3, [r7, #16]
 8002210:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	4b11      	ldr	r3, [pc, #68]	; (800225c <HAL_SPI_MspInit+0x88>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	4a10      	ldr	r2, [pc, #64]	; (800225c <HAL_SPI_MspInit+0x88>)
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	6313      	str	r3, [r2, #48]	; 0x30
 8002222:	4b0e      	ldr	r3, [pc, #56]	; (800225c <HAL_SPI_MspInit+0x88>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800222e:	23e0      	movs	r3, #224	; 0xe0
 8002230:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002232:	2302      	movs	r3, #2
 8002234:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002236:	2300      	movs	r3, #0
 8002238:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800223a:	2300      	movs	r3, #0
 800223c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800223e:	2305      	movs	r3, #5
 8002240:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002242:	f107 0314 	add.w	r3, r7, #20
 8002246:	4619      	mov	r1, r3
 8002248:	4805      	ldr	r0, [pc, #20]	; (8002260 <HAL_SPI_MspInit+0x8c>)
 800224a:	f000 fae9 	bl	8002820 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800224e:	bf00      	nop
 8002250:	3728      	adds	r7, #40	; 0x28
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40013000 	.word	0x40013000
 800225c:	40023800 	.word	0x40023800
 8002260:	40020000 	.word	0x40020000

08002264 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002268:	e7fe      	b.n	8002268 <NMI_Handler+0x4>

0800226a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800226a:	b480      	push	{r7}
 800226c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800226e:	e7fe      	b.n	800226e <HardFault_Handler+0x4>

08002270 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002274:	e7fe      	b.n	8002274 <MemManage_Handler+0x4>

08002276 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002276:	b480      	push	{r7}
 8002278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800227a:	e7fe      	b.n	800227a <BusFault_Handler+0x4>

0800227c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002280:	e7fe      	b.n	8002280 <UsageFault_Handler+0x4>

08002282 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002282:	b480      	push	{r7}
 8002284:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002286:	bf00      	nop
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002294:	bf00      	nop
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800229e:	b480      	push	{r7}
 80022a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022b0:	f000 f960 	bl	8002574 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022b4:	bf00      	nop
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80022bc:	4802      	ldr	r0, [pc, #8]	; (80022c8 <OTG_FS_IRQHandler+0x10>)
 80022be:	f001 fb99 	bl	80039f4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80022c2:	bf00      	nop
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	20002770 	.word	0x20002770

080022cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
	return 1;
 80022d0:	2301      	movs	r3, #1
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <_kill>:

int _kill(int pid, int sig)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80022e6:	f008 fdd3 	bl	800ae90 <__errno>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2216      	movs	r2, #22
 80022ee:	601a      	str	r2, [r3, #0]
	return -1;
 80022f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <_exit>:

void _exit (int status)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002304:	f04f 31ff 	mov.w	r1, #4294967295
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f7ff ffe7 	bl	80022dc <_kill>
	while (1) {}		/* Make sure we hang here */
 800230e:	e7fe      	b.n	800230e <_exit+0x12>

08002310 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]
 8002320:	e00a      	b.n	8002338 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002322:	f3af 8000 	nop.w
 8002326:	4601      	mov	r1, r0
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	1c5a      	adds	r2, r3, #1
 800232c:	60ba      	str	r2, [r7, #8]
 800232e:	b2ca      	uxtb	r2, r1
 8002330:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	3301      	adds	r3, #1
 8002336:	617b      	str	r3, [r7, #20]
 8002338:	697a      	ldr	r2, [r7, #20]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	429a      	cmp	r2, r3
 800233e:	dbf0      	blt.n	8002322 <_read+0x12>
	}

return len;
 8002340:	687b      	ldr	r3, [r7, #4]
}
 8002342:	4618      	mov	r0, r3
 8002344:	3718      	adds	r7, #24
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b086      	sub	sp, #24
 800234e:	af00      	add	r7, sp, #0
 8002350:	60f8      	str	r0, [r7, #12]
 8002352:	60b9      	str	r1, [r7, #8]
 8002354:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002356:	2300      	movs	r3, #0
 8002358:	617b      	str	r3, [r7, #20]
 800235a:	e009      	b.n	8002370 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	1c5a      	adds	r2, r3, #1
 8002360:	60ba      	str	r2, [r7, #8]
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	3301      	adds	r3, #1
 800236e:	617b      	str	r3, [r7, #20]
 8002370:	697a      	ldr	r2, [r7, #20]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	429a      	cmp	r2, r3
 8002376:	dbf1      	blt.n	800235c <_write+0x12>
	}
	return len;
 8002378:	687b      	ldr	r3, [r7, #4]
}
 800237a:	4618      	mov	r0, r3
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <_close>:

int _close(int file)
{
 8002382:	b480      	push	{r7}
 8002384:	b083      	sub	sp, #12
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
	return -1;
 800238a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800238e:	4618      	mov	r0, r3
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800239a:	b480      	push	{r7}
 800239c:	b083      	sub	sp, #12
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
 80023a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023aa:	605a      	str	r2, [r3, #4]
	return 0;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <_isatty>:

int _isatty(int file)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
	return 1;
 80023c2:	2301      	movs	r3, #1
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
	return 0;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
	...

080023ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023f4:	4a14      	ldr	r2, [pc, #80]	; (8002448 <_sbrk+0x5c>)
 80023f6:	4b15      	ldr	r3, [pc, #84]	; (800244c <_sbrk+0x60>)
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002400:	4b13      	ldr	r3, [pc, #76]	; (8002450 <_sbrk+0x64>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d102      	bne.n	800240e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002408:	4b11      	ldr	r3, [pc, #68]	; (8002450 <_sbrk+0x64>)
 800240a:	4a12      	ldr	r2, [pc, #72]	; (8002454 <_sbrk+0x68>)
 800240c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800240e:	4b10      	ldr	r3, [pc, #64]	; (8002450 <_sbrk+0x64>)
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4413      	add	r3, r2
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	429a      	cmp	r2, r3
 800241a:	d207      	bcs.n	800242c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800241c:	f008 fd38 	bl	800ae90 <__errno>
 8002420:	4603      	mov	r3, r0
 8002422:	220c      	movs	r2, #12
 8002424:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002426:	f04f 33ff 	mov.w	r3, #4294967295
 800242a:	e009      	b.n	8002440 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800242c:	4b08      	ldr	r3, [pc, #32]	; (8002450 <_sbrk+0x64>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002432:	4b07      	ldr	r3, [pc, #28]	; (8002450 <_sbrk+0x64>)
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4413      	add	r3, r2
 800243a:	4a05      	ldr	r2, [pc, #20]	; (8002450 <_sbrk+0x64>)
 800243c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800243e:	68fb      	ldr	r3, [r7, #12]
}
 8002440:	4618      	mov	r0, r3
 8002442:	3718      	adds	r7, #24
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	20020000 	.word	0x20020000
 800244c:	00000400 	.word	0x00000400
 8002450:	20000dd0 	.word	0x20000dd0
 8002454:	20002b88 	.word	0x20002b88

08002458 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800245c:	4b06      	ldr	r3, [pc, #24]	; (8002478 <SystemInit+0x20>)
 800245e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002462:	4a05      	ldr	r2, [pc, #20]	; (8002478 <SystemInit+0x20>)
 8002464:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002468:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800246c:	bf00      	nop
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	e000ed00 	.word	0xe000ed00

0800247c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800247c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002480:	480d      	ldr	r0, [pc, #52]	; (80024b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002482:	490e      	ldr	r1, [pc, #56]	; (80024bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002484:	4a0e      	ldr	r2, [pc, #56]	; (80024c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002486:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002488:	e002      	b.n	8002490 <LoopCopyDataInit>

0800248a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800248a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800248c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800248e:	3304      	adds	r3, #4

08002490 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002490:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002492:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002494:	d3f9      	bcc.n	800248a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002496:	4a0b      	ldr	r2, [pc, #44]	; (80024c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002498:	4c0b      	ldr	r4, [pc, #44]	; (80024c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800249a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800249c:	e001      	b.n	80024a2 <LoopFillZerobss>

0800249e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800249e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024a0:	3204      	adds	r2, #4

080024a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024a4:	d3fb      	bcc.n	800249e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80024a6:	f7ff ffd7 	bl	8002458 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024aa:	f008 fcf7 	bl	800ae9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024ae:	f7ff fb3b 	bl	8001b28 <main>
  bx  lr    
 80024b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80024b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024bc:	20000c50 	.word	0x20000c50
  ldr r2, =_sidata
 80024c0:	0800f054 	.word	0x0800f054
  ldr r2, =_sbss
 80024c4:	20000c50 	.word	0x20000c50
  ldr r4, =_ebss
 80024c8:	20002b88 	.word	0x20002b88

080024cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024cc:	e7fe      	b.n	80024cc <ADC_IRQHandler>
	...

080024d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024d4:	4b0e      	ldr	r3, [pc, #56]	; (8002510 <HAL_Init+0x40>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a0d      	ldr	r2, [pc, #52]	; (8002510 <HAL_Init+0x40>)
 80024da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024e0:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <HAL_Init+0x40>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a0a      	ldr	r2, [pc, #40]	; (8002510 <HAL_Init+0x40>)
 80024e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024ec:	4b08      	ldr	r3, [pc, #32]	; (8002510 <HAL_Init+0x40>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a07      	ldr	r2, [pc, #28]	; (8002510 <HAL_Init+0x40>)
 80024f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024f8:	2003      	movs	r0, #3
 80024fa:	f000 f94f 	bl	800279c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024fe:	2000      	movs	r0, #0
 8002500:	f000 f808 	bl	8002514 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002504:	f7ff fd8e 	bl	8002024 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40023c00 	.word	0x40023c00

08002514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800251c:	4b12      	ldr	r3, [pc, #72]	; (8002568 <HAL_InitTick+0x54>)
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	4b12      	ldr	r3, [pc, #72]	; (800256c <HAL_InitTick+0x58>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	4619      	mov	r1, r3
 8002526:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800252a:	fbb3 f3f1 	udiv	r3, r3, r1
 800252e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002532:	4618      	mov	r0, r3
 8002534:	f000 f967 	bl	8002806 <HAL_SYSTICK_Config>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e00e      	b.n	8002560 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b0f      	cmp	r3, #15
 8002546:	d80a      	bhi.n	800255e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002548:	2200      	movs	r2, #0
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	f04f 30ff 	mov.w	r0, #4294967295
 8002550:	f000 f92f 	bl	80027b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002554:	4a06      	ldr	r2, [pc, #24]	; (8002570 <HAL_InitTick+0x5c>)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800255a:	2300      	movs	r3, #0
 800255c:	e000      	b.n	8002560 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
}
 8002560:	4618      	mov	r0, r3
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	20000950 	.word	0x20000950
 800256c:	20000958 	.word	0x20000958
 8002570:	20000954 	.word	0x20000954

08002574 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002578:	4b06      	ldr	r3, [pc, #24]	; (8002594 <HAL_IncTick+0x20>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	461a      	mov	r2, r3
 800257e:	4b06      	ldr	r3, [pc, #24]	; (8002598 <HAL_IncTick+0x24>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4413      	add	r3, r2
 8002584:	4a04      	ldr	r2, [pc, #16]	; (8002598 <HAL_IncTick+0x24>)
 8002586:	6013      	str	r3, [r2, #0]
}
 8002588:	bf00      	nop
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	20000958 	.word	0x20000958
 8002598:	2000111c 	.word	0x2000111c

0800259c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  return uwTick;
 80025a0:	4b03      	ldr	r3, [pc, #12]	; (80025b0 <HAL_GetTick+0x14>)
 80025a2:	681b      	ldr	r3, [r3, #0]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	2000111c 	.word	0x2000111c

080025b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025bc:	f7ff ffee 	bl	800259c <HAL_GetTick>
 80025c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025cc:	d005      	beq.n	80025da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025ce:	4b0a      	ldr	r3, [pc, #40]	; (80025f8 <HAL_Delay+0x44>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	461a      	mov	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4413      	add	r3, r2
 80025d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025da:	bf00      	nop
 80025dc:	f7ff ffde 	bl	800259c <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d8f7      	bhi.n	80025dc <HAL_Delay+0x28>
  {
  }
}
 80025ec:	bf00      	nop
 80025ee:	bf00      	nop
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	20000958 	.word	0x20000958

080025fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800260c:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <__NVIC_SetPriorityGrouping+0x44>)
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002612:	68ba      	ldr	r2, [r7, #8]
 8002614:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002618:	4013      	ands	r3, r2
 800261a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002624:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800262c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800262e:	4a04      	ldr	r2, [pc, #16]	; (8002640 <__NVIC_SetPriorityGrouping+0x44>)
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	60d3      	str	r3, [r2, #12]
}
 8002634:	bf00      	nop
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	e000ed00 	.word	0xe000ed00

08002644 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002648:	4b04      	ldr	r3, [pc, #16]	; (800265c <__NVIC_GetPriorityGrouping+0x18>)
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	0a1b      	lsrs	r3, r3, #8
 800264e:	f003 0307 	and.w	r3, r3, #7
}
 8002652:	4618      	mov	r0, r3
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	e000ed00 	.word	0xe000ed00

08002660 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	4603      	mov	r3, r0
 8002668:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800266a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266e:	2b00      	cmp	r3, #0
 8002670:	db0b      	blt.n	800268a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002672:	79fb      	ldrb	r3, [r7, #7]
 8002674:	f003 021f 	and.w	r2, r3, #31
 8002678:	4907      	ldr	r1, [pc, #28]	; (8002698 <__NVIC_EnableIRQ+0x38>)
 800267a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267e:	095b      	lsrs	r3, r3, #5
 8002680:	2001      	movs	r0, #1
 8002682:	fa00 f202 	lsl.w	r2, r0, r2
 8002686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800268a:	bf00      	nop
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	e000e100 	.word	0xe000e100

0800269c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	4603      	mov	r3, r0
 80026a4:	6039      	str	r1, [r7, #0]
 80026a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	db0a      	blt.n	80026c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	490c      	ldr	r1, [pc, #48]	; (80026e8 <__NVIC_SetPriority+0x4c>)
 80026b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ba:	0112      	lsls	r2, r2, #4
 80026bc:	b2d2      	uxtb	r2, r2
 80026be:	440b      	add	r3, r1
 80026c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026c4:	e00a      	b.n	80026dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	b2da      	uxtb	r2, r3
 80026ca:	4908      	ldr	r1, [pc, #32]	; (80026ec <__NVIC_SetPriority+0x50>)
 80026cc:	79fb      	ldrb	r3, [r7, #7]
 80026ce:	f003 030f 	and.w	r3, r3, #15
 80026d2:	3b04      	subs	r3, #4
 80026d4:	0112      	lsls	r2, r2, #4
 80026d6:	b2d2      	uxtb	r2, r2
 80026d8:	440b      	add	r3, r1
 80026da:	761a      	strb	r2, [r3, #24]
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	e000e100 	.word	0xe000e100
 80026ec:	e000ed00 	.word	0xe000ed00

080026f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b089      	sub	sp, #36	; 0x24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f1c3 0307 	rsb	r3, r3, #7
 800270a:	2b04      	cmp	r3, #4
 800270c:	bf28      	it	cs
 800270e:	2304      	movcs	r3, #4
 8002710:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	3304      	adds	r3, #4
 8002716:	2b06      	cmp	r3, #6
 8002718:	d902      	bls.n	8002720 <NVIC_EncodePriority+0x30>
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	3b03      	subs	r3, #3
 800271e:	e000      	b.n	8002722 <NVIC_EncodePriority+0x32>
 8002720:	2300      	movs	r3, #0
 8002722:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002724:	f04f 32ff 	mov.w	r2, #4294967295
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	43da      	mvns	r2, r3
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	401a      	ands	r2, r3
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002738:	f04f 31ff 	mov.w	r1, #4294967295
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	fa01 f303 	lsl.w	r3, r1, r3
 8002742:	43d9      	mvns	r1, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002748:	4313      	orrs	r3, r2
         );
}
 800274a:	4618      	mov	r0, r3
 800274c:	3724      	adds	r7, #36	; 0x24
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
	...

08002758 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	3b01      	subs	r3, #1
 8002764:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002768:	d301      	bcc.n	800276e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800276a:	2301      	movs	r3, #1
 800276c:	e00f      	b.n	800278e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800276e:	4a0a      	ldr	r2, [pc, #40]	; (8002798 <SysTick_Config+0x40>)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	3b01      	subs	r3, #1
 8002774:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002776:	210f      	movs	r1, #15
 8002778:	f04f 30ff 	mov.w	r0, #4294967295
 800277c:	f7ff ff8e 	bl	800269c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002780:	4b05      	ldr	r3, [pc, #20]	; (8002798 <SysTick_Config+0x40>)
 8002782:	2200      	movs	r2, #0
 8002784:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002786:	4b04      	ldr	r3, [pc, #16]	; (8002798 <SysTick_Config+0x40>)
 8002788:	2207      	movs	r2, #7
 800278a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	e000e010 	.word	0xe000e010

0800279c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f7ff ff29 	bl	80025fc <__NVIC_SetPriorityGrouping>
}
 80027aa:	bf00      	nop
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b086      	sub	sp, #24
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	4603      	mov	r3, r0
 80027ba:	60b9      	str	r1, [r7, #8]
 80027bc:	607a      	str	r2, [r7, #4]
 80027be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027c0:	2300      	movs	r3, #0
 80027c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027c4:	f7ff ff3e 	bl	8002644 <__NVIC_GetPriorityGrouping>
 80027c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	68b9      	ldr	r1, [r7, #8]
 80027ce:	6978      	ldr	r0, [r7, #20]
 80027d0:	f7ff ff8e 	bl	80026f0 <NVIC_EncodePriority>
 80027d4:	4602      	mov	r2, r0
 80027d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027da:	4611      	mov	r1, r2
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff ff5d 	bl	800269c <__NVIC_SetPriority>
}
 80027e2:	bf00      	nop
 80027e4:	3718      	adds	r7, #24
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b082      	sub	sp, #8
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	4603      	mov	r3, r0
 80027f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff ff31 	bl	8002660 <__NVIC_EnableIRQ>
}
 80027fe:	bf00      	nop
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b082      	sub	sp, #8
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f7ff ffa2 	bl	8002758 <SysTick_Config>
 8002814:	4603      	mov	r3, r0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
	...

08002820 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002820:	b480      	push	{r7}
 8002822:	b089      	sub	sp, #36	; 0x24
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800282a:	2300      	movs	r3, #0
 800282c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800282e:	2300      	movs	r3, #0
 8002830:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002832:	2300      	movs	r3, #0
 8002834:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002836:	2300      	movs	r3, #0
 8002838:	61fb      	str	r3, [r7, #28]
 800283a:	e16b      	b.n	8002b14 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800283c:	2201      	movs	r2, #1
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	4013      	ands	r3, r2
 800284e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	429a      	cmp	r2, r3
 8002856:	f040 815a 	bne.w	8002b0e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f003 0303 	and.w	r3, r3, #3
 8002862:	2b01      	cmp	r3, #1
 8002864:	d005      	beq.n	8002872 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800286e:	2b02      	cmp	r3, #2
 8002870:	d130      	bne.n	80028d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	2203      	movs	r2, #3
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	43db      	mvns	r3, r3
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	4013      	ands	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	68da      	ldr	r2, [r3, #12]
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4313      	orrs	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028a8:	2201      	movs	r2, #1
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	43db      	mvns	r3, r3
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	4013      	ands	r3, r2
 80028b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	091b      	lsrs	r3, r3, #4
 80028be:	f003 0201 	and.w	r2, r3, #1
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f003 0303 	and.w	r3, r3, #3
 80028dc:	2b03      	cmp	r3, #3
 80028de:	d017      	beq.n	8002910 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	2203      	movs	r2, #3
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	43db      	mvns	r3, r3
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	4013      	ands	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	4313      	orrs	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f003 0303 	and.w	r3, r3, #3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d123      	bne.n	8002964 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	08da      	lsrs	r2, r3, #3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3208      	adds	r2, #8
 8002924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002928:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	f003 0307 	and.w	r3, r3, #7
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	220f      	movs	r2, #15
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	43db      	mvns	r3, r3
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	4013      	ands	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	691a      	ldr	r2, [r3, #16]
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4313      	orrs	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	08da      	lsrs	r2, r3, #3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	3208      	adds	r2, #8
 800295e:	69b9      	ldr	r1, [r7, #24]
 8002960:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	2203      	movs	r2, #3
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	43db      	mvns	r3, r3
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4013      	ands	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f003 0203 	and.w	r2, r3, #3
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	4313      	orrs	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 80b4 	beq.w	8002b0e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029a6:	2300      	movs	r3, #0
 80029a8:	60fb      	str	r3, [r7, #12]
 80029aa:	4b60      	ldr	r3, [pc, #384]	; (8002b2c <HAL_GPIO_Init+0x30c>)
 80029ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ae:	4a5f      	ldr	r2, [pc, #380]	; (8002b2c <HAL_GPIO_Init+0x30c>)
 80029b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029b4:	6453      	str	r3, [r2, #68]	; 0x44
 80029b6:	4b5d      	ldr	r3, [pc, #372]	; (8002b2c <HAL_GPIO_Init+0x30c>)
 80029b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029c2:	4a5b      	ldr	r2, [pc, #364]	; (8002b30 <HAL_GPIO_Init+0x310>)
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	089b      	lsrs	r3, r3, #2
 80029c8:	3302      	adds	r3, #2
 80029ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	f003 0303 	and.w	r3, r3, #3
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	220f      	movs	r2, #15
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	43db      	mvns	r3, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4013      	ands	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a52      	ldr	r2, [pc, #328]	; (8002b34 <HAL_GPIO_Init+0x314>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d02b      	beq.n	8002a46 <HAL_GPIO_Init+0x226>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a51      	ldr	r2, [pc, #324]	; (8002b38 <HAL_GPIO_Init+0x318>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d025      	beq.n	8002a42 <HAL_GPIO_Init+0x222>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a50      	ldr	r2, [pc, #320]	; (8002b3c <HAL_GPIO_Init+0x31c>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d01f      	beq.n	8002a3e <HAL_GPIO_Init+0x21e>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a4f      	ldr	r2, [pc, #316]	; (8002b40 <HAL_GPIO_Init+0x320>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d019      	beq.n	8002a3a <HAL_GPIO_Init+0x21a>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a4e      	ldr	r2, [pc, #312]	; (8002b44 <HAL_GPIO_Init+0x324>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d013      	beq.n	8002a36 <HAL_GPIO_Init+0x216>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a4d      	ldr	r2, [pc, #308]	; (8002b48 <HAL_GPIO_Init+0x328>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d00d      	beq.n	8002a32 <HAL_GPIO_Init+0x212>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a4c      	ldr	r2, [pc, #304]	; (8002b4c <HAL_GPIO_Init+0x32c>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d007      	beq.n	8002a2e <HAL_GPIO_Init+0x20e>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a4b      	ldr	r2, [pc, #300]	; (8002b50 <HAL_GPIO_Init+0x330>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d101      	bne.n	8002a2a <HAL_GPIO_Init+0x20a>
 8002a26:	2307      	movs	r3, #7
 8002a28:	e00e      	b.n	8002a48 <HAL_GPIO_Init+0x228>
 8002a2a:	2308      	movs	r3, #8
 8002a2c:	e00c      	b.n	8002a48 <HAL_GPIO_Init+0x228>
 8002a2e:	2306      	movs	r3, #6
 8002a30:	e00a      	b.n	8002a48 <HAL_GPIO_Init+0x228>
 8002a32:	2305      	movs	r3, #5
 8002a34:	e008      	b.n	8002a48 <HAL_GPIO_Init+0x228>
 8002a36:	2304      	movs	r3, #4
 8002a38:	e006      	b.n	8002a48 <HAL_GPIO_Init+0x228>
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e004      	b.n	8002a48 <HAL_GPIO_Init+0x228>
 8002a3e:	2302      	movs	r3, #2
 8002a40:	e002      	b.n	8002a48 <HAL_GPIO_Init+0x228>
 8002a42:	2301      	movs	r3, #1
 8002a44:	e000      	b.n	8002a48 <HAL_GPIO_Init+0x228>
 8002a46:	2300      	movs	r3, #0
 8002a48:	69fa      	ldr	r2, [r7, #28]
 8002a4a:	f002 0203 	and.w	r2, r2, #3
 8002a4e:	0092      	lsls	r2, r2, #2
 8002a50:	4093      	lsls	r3, r2
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a58:	4935      	ldr	r1, [pc, #212]	; (8002b30 <HAL_GPIO_Init+0x310>)
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	089b      	lsrs	r3, r3, #2
 8002a5e:	3302      	adds	r3, #2
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a66:	4b3b      	ldr	r3, [pc, #236]	; (8002b54 <HAL_GPIO_Init+0x334>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	43db      	mvns	r3, r3
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	4013      	ands	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d003      	beq.n	8002a8a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a8a:	4a32      	ldr	r2, [pc, #200]	; (8002b54 <HAL_GPIO_Init+0x334>)
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a90:	4b30      	ldr	r3, [pc, #192]	; (8002b54 <HAL_GPIO_Init+0x334>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d003      	beq.n	8002ab4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ab4:	4a27      	ldr	r2, [pc, #156]	; (8002b54 <HAL_GPIO_Init+0x334>)
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aba:	4b26      	ldr	r3, [pc, #152]	; (8002b54 <HAL_GPIO_Init+0x334>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ade:	4a1d      	ldr	r2, [pc, #116]	; (8002b54 <HAL_GPIO_Init+0x334>)
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ae4:	4b1b      	ldr	r3, [pc, #108]	; (8002b54 <HAL_GPIO_Init+0x334>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	43db      	mvns	r3, r3
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4013      	ands	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d003      	beq.n	8002b08 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b08:	4a12      	ldr	r2, [pc, #72]	; (8002b54 <HAL_GPIO_Init+0x334>)
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	3301      	adds	r3, #1
 8002b12:	61fb      	str	r3, [r7, #28]
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	2b0f      	cmp	r3, #15
 8002b18:	f67f ae90 	bls.w	800283c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b1c:	bf00      	nop
 8002b1e:	bf00      	nop
 8002b20:	3724      	adds	r7, #36	; 0x24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	40013800 	.word	0x40013800
 8002b34:	40020000 	.word	0x40020000
 8002b38:	40020400 	.word	0x40020400
 8002b3c:	40020800 	.word	0x40020800
 8002b40:	40020c00 	.word	0x40020c00
 8002b44:	40021000 	.word	0x40021000
 8002b48:	40021400 	.word	0x40021400
 8002b4c:	40021800 	.word	0x40021800
 8002b50:	40021c00 	.word	0x40021c00
 8002b54:	40013c00 	.word	0x40013c00

08002b58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	460b      	mov	r3, r1
 8002b62:	807b      	strh	r3, [r7, #2]
 8002b64:	4613      	mov	r3, r2
 8002b66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b68:	787b      	ldrb	r3, [r7, #1]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b6e:	887a      	ldrh	r2, [r7, #2]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b74:	e003      	b.n	8002b7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b76:	887b      	ldrh	r3, [r7, #2]
 8002b78:	041a      	lsls	r2, r3, #16
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	619a      	str	r2, [r3, #24]
}
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
	...

08002b8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e12b      	b.n	8002df6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d106      	bne.n	8002bb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f7ff fa5e 	bl	8002074 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2224      	movs	r2, #36	; 0x24
 8002bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f022 0201 	bic.w	r2, r2, #1
 8002bce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bde:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002bf0:	f002 fb80 	bl	80052f4 <HAL_RCC_GetPCLK1Freq>
 8002bf4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	4a81      	ldr	r2, [pc, #516]	; (8002e00 <HAL_I2C_Init+0x274>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d807      	bhi.n	8002c10 <HAL_I2C_Init+0x84>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	4a80      	ldr	r2, [pc, #512]	; (8002e04 <HAL_I2C_Init+0x278>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	bf94      	ite	ls
 8002c08:	2301      	movls	r3, #1
 8002c0a:	2300      	movhi	r3, #0
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	e006      	b.n	8002c1e <HAL_I2C_Init+0x92>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	4a7d      	ldr	r2, [pc, #500]	; (8002e08 <HAL_I2C_Init+0x27c>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	bf94      	ite	ls
 8002c18:	2301      	movls	r3, #1
 8002c1a:	2300      	movhi	r3, #0
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e0e7      	b.n	8002df6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	4a78      	ldr	r2, [pc, #480]	; (8002e0c <HAL_I2C_Init+0x280>)
 8002c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2e:	0c9b      	lsrs	r3, r3, #18
 8002c30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68ba      	ldr	r2, [r7, #8]
 8002c42:	430a      	orrs	r2, r1
 8002c44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6a1b      	ldr	r3, [r3, #32]
 8002c4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	4a6a      	ldr	r2, [pc, #424]	; (8002e00 <HAL_I2C_Init+0x274>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d802      	bhi.n	8002c60 <HAL_I2C_Init+0xd4>
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	e009      	b.n	8002c74 <HAL_I2C_Init+0xe8>
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c66:	fb02 f303 	mul.w	r3, r2, r3
 8002c6a:	4a69      	ldr	r2, [pc, #420]	; (8002e10 <HAL_I2C_Init+0x284>)
 8002c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c70:	099b      	lsrs	r3, r3, #6
 8002c72:	3301      	adds	r3, #1
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	6812      	ldr	r2, [r2, #0]
 8002c78:	430b      	orrs	r3, r1
 8002c7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	69db      	ldr	r3, [r3, #28]
 8002c82:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c86:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	495c      	ldr	r1, [pc, #368]	; (8002e00 <HAL_I2C_Init+0x274>)
 8002c90:	428b      	cmp	r3, r1
 8002c92:	d819      	bhi.n	8002cc8 <HAL_I2C_Init+0x13c>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	1e59      	subs	r1, r3, #1
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ca2:	1c59      	adds	r1, r3, #1
 8002ca4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ca8:	400b      	ands	r3, r1
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00a      	beq.n	8002cc4 <HAL_I2C_Init+0x138>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	1e59      	subs	r1, r3, #1
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cc2:	e051      	b.n	8002d68 <HAL_I2C_Init+0x1dc>
 8002cc4:	2304      	movs	r3, #4
 8002cc6:	e04f      	b.n	8002d68 <HAL_I2C_Init+0x1dc>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d111      	bne.n	8002cf4 <HAL_I2C_Init+0x168>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	1e58      	subs	r0, r3, #1
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6859      	ldr	r1, [r3, #4]
 8002cd8:	460b      	mov	r3, r1
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	440b      	add	r3, r1
 8002cde:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	bf0c      	ite	eq
 8002cec:	2301      	moveq	r3, #1
 8002cee:	2300      	movne	r3, #0
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	e012      	b.n	8002d1a <HAL_I2C_Init+0x18e>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	1e58      	subs	r0, r3, #1
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6859      	ldr	r1, [r3, #4]
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	440b      	add	r3, r1
 8002d02:	0099      	lsls	r1, r3, #2
 8002d04:	440b      	add	r3, r1
 8002d06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	bf0c      	ite	eq
 8002d14:	2301      	moveq	r3, #1
 8002d16:	2300      	movne	r3, #0
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <HAL_I2C_Init+0x196>
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e022      	b.n	8002d68 <HAL_I2C_Init+0x1dc>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10e      	bne.n	8002d48 <HAL_I2C_Init+0x1bc>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	1e58      	subs	r0, r3, #1
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6859      	ldr	r1, [r3, #4]
 8002d32:	460b      	mov	r3, r1
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	440b      	add	r3, r1
 8002d38:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d46:	e00f      	b.n	8002d68 <HAL_I2C_Init+0x1dc>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	1e58      	subs	r0, r3, #1
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6859      	ldr	r1, [r3, #4]
 8002d50:	460b      	mov	r3, r1
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	440b      	add	r3, r1
 8002d56:	0099      	lsls	r1, r3, #2
 8002d58:	440b      	add	r3, r1
 8002d5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d5e:	3301      	adds	r3, #1
 8002d60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d68:	6879      	ldr	r1, [r7, #4]
 8002d6a:	6809      	ldr	r1, [r1, #0]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	69da      	ldr	r2, [r3, #28]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	431a      	orrs	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	6911      	ldr	r1, [r2, #16]
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	68d2      	ldr	r2, [r2, #12]
 8002da2:	4311      	orrs	r1, r2
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6812      	ldr	r2, [r2, #0]
 8002da8:	430b      	orrs	r3, r1
 8002daa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	695a      	ldr	r2, [r3, #20]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f042 0201 	orr.w	r2, r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2220      	movs	r2, #32
 8002de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	000186a0 	.word	0x000186a0
 8002e04:	001e847f 	.word	0x001e847f
 8002e08:	003d08ff 	.word	0x003d08ff
 8002e0c:	431bde83 	.word	0x431bde83
 8002e10:	10624dd3 	.word	0x10624dd3

08002e14 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b088      	sub	sp, #32
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e128      	b.n	8003078 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d109      	bne.n	8002e46 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a90      	ldr	r2, [pc, #576]	; (8003080 <HAL_I2S_Init+0x26c>)
 8002e3e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f7ff f95f 	bl	8002104 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2202      	movs	r2, #2
 8002e4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	69db      	ldr	r3, [r3, #28]
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	6812      	ldr	r2, [r2, #0]
 8002e58:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002e5c:	f023 030f 	bic.w	r3, r3, #15
 8002e60:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2202      	movs	r2, #2
 8002e68:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d060      	beq.n	8002f34 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d102      	bne.n	8002e80 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002e7a:	2310      	movs	r3, #16
 8002e7c:	617b      	str	r3, [r7, #20]
 8002e7e:	e001      	b.n	8002e84 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002e80:	2320      	movs	r3, #32
 8002e82:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	2b20      	cmp	r3, #32
 8002e8a:	d802      	bhi.n	8002e92 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002e92:	2001      	movs	r0, #1
 8002e94:	f002 fb24 	bl	80054e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002e98:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ea2:	d125      	bne.n	8002ef0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d010      	beq.n	8002ece <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	fbb2 f2f3 	udiv	r2, r2, r3
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	4413      	add	r3, r2
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec8:	3305      	adds	r3, #5
 8002eca:	613b      	str	r3, [r7, #16]
 8002ecc:	e01f      	b.n	8002f0e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ed8:	4613      	mov	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4413      	add	r3, r2
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eea:	3305      	adds	r3, #5
 8002eec:	613b      	str	r3, [r7, #16]
 8002eee:	e00e      	b.n	8002f0e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ef8:	4613      	mov	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4413      	add	r3, r2
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	461a      	mov	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f0a:	3305      	adds	r3, #5
 8002f0c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	4a5c      	ldr	r2, [pc, #368]	; (8003084 <HAL_I2S_Init+0x270>)
 8002f12:	fba2 2303 	umull	r2, r3, r2, r3
 8002f16:	08db      	lsrs	r3, r3, #3
 8002f18:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	085b      	lsrs	r3, r3, #1
 8002f2a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	021b      	lsls	r3, r3, #8
 8002f30:	61bb      	str	r3, [r7, #24]
 8002f32:	e003      	b.n	8002f3c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002f34:	2302      	movs	r3, #2
 8002f36:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d902      	bls.n	8002f48 <HAL_I2S_Init+0x134>
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	2bff      	cmp	r3, #255	; 0xff
 8002f46:	d907      	bls.n	8002f58 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4c:	f043 0210 	orr.w	r2, r3, #16
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e08f      	b.n	8003078 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	691a      	ldr	r2, [r3, #16]
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	ea42 0103 	orr.w	r1, r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	69fa      	ldr	r2, [r7, #28]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	69db      	ldr	r3, [r3, #28]
 8002f72:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002f76:	f023 030f 	bic.w	r3, r3, #15
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	6851      	ldr	r1, [r2, #4]
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	6892      	ldr	r2, [r2, #8]
 8002f82:	4311      	orrs	r1, r2
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	68d2      	ldr	r2, [r2, #12]
 8002f88:	4311      	orrs	r1, r2
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	6992      	ldr	r2, [r2, #24]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	431a      	orrs	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f9a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d161      	bne.n	8003068 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a38      	ldr	r2, [pc, #224]	; (8003088 <HAL_I2S_Init+0x274>)
 8002fa8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a37      	ldr	r2, [pc, #220]	; (800308c <HAL_I2S_Init+0x278>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d101      	bne.n	8002fb8 <HAL_I2S_Init+0x1a4>
 8002fb4:	4b36      	ldr	r3, [pc, #216]	; (8003090 <HAL_I2S_Init+0x27c>)
 8002fb6:	e001      	b.n	8002fbc <HAL_I2S_Init+0x1a8>
 8002fb8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	6812      	ldr	r2, [r2, #0]
 8002fc2:	4932      	ldr	r1, [pc, #200]	; (800308c <HAL_I2S_Init+0x278>)
 8002fc4:	428a      	cmp	r2, r1
 8002fc6:	d101      	bne.n	8002fcc <HAL_I2S_Init+0x1b8>
 8002fc8:	4a31      	ldr	r2, [pc, #196]	; (8003090 <HAL_I2S_Init+0x27c>)
 8002fca:	e001      	b.n	8002fd0 <HAL_I2S_Init+0x1bc>
 8002fcc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002fd0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002fd4:	f023 030f 	bic.w	r3, r3, #15
 8002fd8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a2b      	ldr	r2, [pc, #172]	; (800308c <HAL_I2S_Init+0x278>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d101      	bne.n	8002fe8 <HAL_I2S_Init+0x1d4>
 8002fe4:	4b2a      	ldr	r3, [pc, #168]	; (8003090 <HAL_I2S_Init+0x27c>)
 8002fe6:	e001      	b.n	8002fec <HAL_I2S_Init+0x1d8>
 8002fe8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fec:	2202      	movs	r2, #2
 8002fee:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a25      	ldr	r2, [pc, #148]	; (800308c <HAL_I2S_Init+0x278>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d101      	bne.n	8002ffe <HAL_I2S_Init+0x1ea>
 8002ffa:	4b25      	ldr	r3, [pc, #148]	; (8003090 <HAL_I2S_Init+0x27c>)
 8002ffc:	e001      	b.n	8003002 <HAL_I2S_Init+0x1ee>
 8002ffe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003002:	69db      	ldr	r3, [r3, #28]
 8003004:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800300e:	d003      	beq.n	8003018 <HAL_I2S_Init+0x204>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d103      	bne.n	8003020 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003018:	f44f 7380 	mov.w	r3, #256	; 0x100
 800301c:	613b      	str	r3, [r7, #16]
 800301e:	e001      	b.n	8003024 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003020:	2300      	movs	r3, #0
 8003022:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800302e:	4313      	orrs	r3, r2
 8003030:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003038:	4313      	orrs	r3, r2
 800303a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003042:	4313      	orrs	r3, r2
 8003044:	b29a      	uxth	r2, r3
 8003046:	897b      	ldrh	r3, [r7, #10]
 8003048:	4313      	orrs	r3, r2
 800304a:	b29b      	uxth	r3, r3
 800304c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003050:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a0d      	ldr	r2, [pc, #52]	; (800308c <HAL_I2S_Init+0x278>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d101      	bne.n	8003060 <HAL_I2S_Init+0x24c>
 800305c:	4b0c      	ldr	r3, [pc, #48]	; (8003090 <HAL_I2S_Init+0x27c>)
 800305e:	e001      	b.n	8003064 <HAL_I2S_Init+0x250>
 8003060:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003064:	897a      	ldrh	r2, [r7, #10]
 8003066:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3720      	adds	r7, #32
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	0800318b 	.word	0x0800318b
 8003084:	cccccccd 	.word	0xcccccccd
 8003088:	080032a1 	.word	0x080032a1
 800308c:	40003800 	.word	0x40003800
 8003090:	40003400 	.word	0x40003400

08003094 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	881a      	ldrh	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	1c9a      	adds	r2, r3, #2
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	3b01      	subs	r3, #1
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003100:	b29b      	uxth	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10e      	bne.n	8003124 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003114:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f7ff ffb8 	bl	8003094 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003124:	bf00      	nop
 8003126:	3708      	adds	r7, #8
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68da      	ldr	r2, [r3, #12]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313e:	b292      	uxth	r2, r2
 8003140:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003146:	1c9a      	adds	r2, r3, #2
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003150:	b29b      	uxth	r3, r3
 8003152:	3b01      	subs	r3, #1
 8003154:	b29a      	uxth	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800315e:	b29b      	uxth	r3, r3
 8003160:	2b00      	cmp	r3, #0
 8003162:	d10e      	bne.n	8003182 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003172:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f7ff ff93 	bl	80030a8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003182:	bf00      	nop
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800318a:	b580      	push	{r7, lr}
 800318c:	b086      	sub	sp, #24
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b04      	cmp	r3, #4
 80031a4:	d13a      	bne.n	800321c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f003 0301 	and.w	r3, r3, #1
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d109      	bne.n	80031c4 <I2S_IRQHandler+0x3a>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ba:	2b40      	cmp	r3, #64	; 0x40
 80031bc:	d102      	bne.n	80031c4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7ff ffb4 	bl	800312c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ca:	2b40      	cmp	r3, #64	; 0x40
 80031cc:	d126      	bne.n	800321c <I2S_IRQHandler+0x92>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f003 0320 	and.w	r3, r3, #32
 80031d8:	2b20      	cmp	r3, #32
 80031da:	d11f      	bne.n	800321c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80031ea:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80031ec:	2300      	movs	r3, #0
 80031ee:	613b      	str	r3, [r7, #16]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	613b      	str	r3, [r7, #16]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	613b      	str	r3, [r7, #16]
 8003200:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800320e:	f043 0202 	orr.w	r2, r3, #2
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f7ff ff50 	bl	80030bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b03      	cmp	r3, #3
 8003226:	d136      	bne.n	8003296 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b02      	cmp	r3, #2
 8003230:	d109      	bne.n	8003246 <I2S_IRQHandler+0xbc>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800323c:	2b80      	cmp	r3, #128	; 0x80
 800323e:	d102      	bne.n	8003246 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f7ff ff45 	bl	80030d0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	f003 0308 	and.w	r3, r3, #8
 800324c:	2b08      	cmp	r3, #8
 800324e:	d122      	bne.n	8003296 <I2S_IRQHandler+0x10c>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f003 0320 	and.w	r3, r3, #32
 800325a:	2b20      	cmp	r3, #32
 800325c:	d11b      	bne.n	8003296 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	685a      	ldr	r2, [r3, #4]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800326c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800326e:	2300      	movs	r3, #0
 8003270:	60fb      	str	r3, [r7, #12]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	60fb      	str	r3, [r7, #12]
 800327a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003288:	f043 0204 	orr.w	r2, r3, #4
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f7ff ff13 	bl	80030bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003296:	bf00      	nop
 8003298:	3718      	adds	r7, #24
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
	...

080032a0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b088      	sub	sp, #32
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4aa2      	ldr	r2, [pc, #648]	; (8003540 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d101      	bne.n	80032be <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80032ba:	4ba2      	ldr	r3, [pc, #648]	; (8003544 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80032bc:	e001      	b.n	80032c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80032be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a9b      	ldr	r2, [pc, #620]	; (8003540 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d101      	bne.n	80032dc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80032d8:	4b9a      	ldr	r3, [pc, #616]	; (8003544 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80032da:	e001      	b.n	80032e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80032dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032ec:	d004      	beq.n	80032f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f040 8099 	bne.w	800342a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d107      	bne.n	8003312 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003308:	2b00      	cmp	r3, #0
 800330a:	d002      	beq.n	8003312 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 f925 	bl	800355c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	f003 0301 	and.w	r3, r3, #1
 8003318:	2b01      	cmp	r3, #1
 800331a:	d107      	bne.n	800332c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003322:	2b00      	cmp	r3, #0
 8003324:	d002      	beq.n	800332c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f9c8 	bl	80036bc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003332:	2b40      	cmp	r3, #64	; 0x40
 8003334:	d13a      	bne.n	80033ac <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	f003 0320 	and.w	r3, r3, #32
 800333c:	2b00      	cmp	r3, #0
 800333e:	d035      	beq.n	80033ac <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a7e      	ldr	r2, [pc, #504]	; (8003540 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d101      	bne.n	800334e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800334a:	4b7e      	ldr	r3, [pc, #504]	; (8003544 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800334c:	e001      	b.n	8003352 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800334e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4979      	ldr	r1, [pc, #484]	; (8003540 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800335a:	428b      	cmp	r3, r1
 800335c:	d101      	bne.n	8003362 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800335e:	4b79      	ldr	r3, [pc, #484]	; (8003544 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003360:	e001      	b.n	8003366 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003362:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003366:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800336a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800337a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800337c:	2300      	movs	r3, #0
 800337e:	60fb      	str	r3, [r7, #12]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	60fb      	str	r3, [r7, #12]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	60fb      	str	r3, [r7, #12]
 8003390:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2201      	movs	r2, #1
 8003396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800339e:	f043 0202 	orr.w	r2, r3, #2
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f7ff fe88 	bl	80030bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	f003 0308 	and.w	r3, r3, #8
 80033b2:	2b08      	cmp	r3, #8
 80033b4:	f040 80be 	bne.w	8003534 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	f003 0320 	and.w	r3, r3, #32
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f000 80b8 	beq.w	8003534 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	685a      	ldr	r2, [r3, #4]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80033d2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a59      	ldr	r2, [pc, #356]	; (8003540 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d101      	bne.n	80033e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80033de:	4b59      	ldr	r3, [pc, #356]	; (8003544 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80033e0:	e001      	b.n	80033e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80033e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4954      	ldr	r1, [pc, #336]	; (8003540 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80033ee:	428b      	cmp	r3, r1
 80033f0:	d101      	bne.n	80033f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80033f2:	4b54      	ldr	r3, [pc, #336]	; (8003544 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80033f4:	e001      	b.n	80033fa <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80033f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80033fe:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003400:	2300      	movs	r3, #0
 8003402:	60bb      	str	r3, [r7, #8]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	60bb      	str	r3, [r7, #8]
 800340c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341a:	f043 0204 	orr.w	r2, r3, #4
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7ff fe4a 	bl	80030bc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003428:	e084      	b.n	8003534 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	2b02      	cmp	r3, #2
 8003432:	d107      	bne.n	8003444 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800343a:	2b00      	cmp	r3, #0
 800343c:	d002      	beq.n	8003444 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 f8be 	bl	80035c0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b01      	cmp	r3, #1
 800344c:	d107      	bne.n	800345e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003454:	2b00      	cmp	r3, #0
 8003456:	d002      	beq.n	800345e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 f8fd 	bl	8003658 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003464:	2b40      	cmp	r3, #64	; 0x40
 8003466:	d12f      	bne.n	80034c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	f003 0320 	and.w	r3, r3, #32
 800346e:	2b00      	cmp	r3, #0
 8003470:	d02a      	beq.n	80034c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685a      	ldr	r2, [r3, #4]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003480:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a2e      	ldr	r2, [pc, #184]	; (8003540 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d101      	bne.n	8003490 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800348c:	4b2d      	ldr	r3, [pc, #180]	; (8003544 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800348e:	e001      	b.n	8003494 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003490:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003494:	685a      	ldr	r2, [r3, #4]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4929      	ldr	r1, [pc, #164]	; (8003540 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800349c:	428b      	cmp	r3, r1
 800349e:	d101      	bne.n	80034a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80034a0:	4b28      	ldr	r3, [pc, #160]	; (8003544 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80034a2:	e001      	b.n	80034a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80034a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034ac:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ba:	f043 0202 	orr.w	r2, r3, #2
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f7ff fdfa 	bl	80030bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	f003 0308 	and.w	r3, r3, #8
 80034ce:	2b08      	cmp	r3, #8
 80034d0:	d131      	bne.n	8003536 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	f003 0320 	and.w	r3, r3, #32
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d02c      	beq.n	8003536 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a17      	ldr	r2, [pc, #92]	; (8003540 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d101      	bne.n	80034ea <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80034e6:	4b17      	ldr	r3, [pc, #92]	; (8003544 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80034e8:	e001      	b.n	80034ee <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80034ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4912      	ldr	r1, [pc, #72]	; (8003540 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80034f6:	428b      	cmp	r3, r1
 80034f8:	d101      	bne.n	80034fe <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80034fa:	4b12      	ldr	r3, [pc, #72]	; (8003544 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80034fc:	e001      	b.n	8003502 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80034fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003502:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003506:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	685a      	ldr	r2, [r3, #4]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003516:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003524:	f043 0204 	orr.w	r2, r3, #4
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f7ff fdc5 	bl	80030bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003532:	e000      	b.n	8003536 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003534:	bf00      	nop
}
 8003536:	bf00      	nop
 8003538:	3720      	adds	r7, #32
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	40003800 	.word	0x40003800
 8003544:	40003400 	.word	0x40003400

08003548 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	1c99      	adds	r1, r3, #2
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	6251      	str	r1, [r2, #36]	; 0x24
 800356e:	881a      	ldrh	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800357a:	b29b      	uxth	r3, r3
 800357c:	3b01      	subs	r3, #1
 800357e:	b29a      	uxth	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003588:	b29b      	uxth	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d113      	bne.n	80035b6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800359c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d106      	bne.n	80035b6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f7ff ffc9 	bl	8003548 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80035b6:	bf00      	nop
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
	...

080035c0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	1c99      	adds	r1, r3, #2
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	6251      	str	r1, [r2, #36]	; 0x24
 80035d2:	8819      	ldrh	r1, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a1d      	ldr	r2, [pc, #116]	; (8003650 <I2SEx_TxISR_I2SExt+0x90>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d101      	bne.n	80035e2 <I2SEx_TxISR_I2SExt+0x22>
 80035de:	4b1d      	ldr	r3, [pc, #116]	; (8003654 <I2SEx_TxISR_I2SExt+0x94>)
 80035e0:	e001      	b.n	80035e6 <I2SEx_TxISR_I2SExt+0x26>
 80035e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035e6:	460a      	mov	r2, r1
 80035e8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	3b01      	subs	r3, #1
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d121      	bne.n	8003646 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a12      	ldr	r2, [pc, #72]	; (8003650 <I2SEx_TxISR_I2SExt+0x90>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d101      	bne.n	8003610 <I2SEx_TxISR_I2SExt+0x50>
 800360c:	4b11      	ldr	r3, [pc, #68]	; (8003654 <I2SEx_TxISR_I2SExt+0x94>)
 800360e:	e001      	b.n	8003614 <I2SEx_TxISR_I2SExt+0x54>
 8003610:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003614:	685a      	ldr	r2, [r3, #4]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	490d      	ldr	r1, [pc, #52]	; (8003650 <I2SEx_TxISR_I2SExt+0x90>)
 800361c:	428b      	cmp	r3, r1
 800361e:	d101      	bne.n	8003624 <I2SEx_TxISR_I2SExt+0x64>
 8003620:	4b0c      	ldr	r3, [pc, #48]	; (8003654 <I2SEx_TxISR_I2SExt+0x94>)
 8003622:	e001      	b.n	8003628 <I2SEx_TxISR_I2SExt+0x68>
 8003624:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003628:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800362c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003632:	b29b      	uxth	r3, r3
 8003634:	2b00      	cmp	r3, #0
 8003636:	d106      	bne.n	8003646 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f7ff ff81 	bl	8003548 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003646:	bf00      	nop
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	40003800 	.word	0x40003800
 8003654:	40003400 	.word	0x40003400

08003658 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68d8      	ldr	r0, [r3, #12]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366a:	1c99      	adds	r1, r3, #2
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003670:	b282      	uxth	r2, r0
 8003672:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003678:	b29b      	uxth	r3, r3
 800367a:	3b01      	subs	r3, #1
 800367c:	b29a      	uxth	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003686:	b29b      	uxth	r3, r3
 8003688:	2b00      	cmp	r3, #0
 800368a:	d113      	bne.n	80036b4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	685a      	ldr	r2, [r3, #4]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800369a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d106      	bne.n	80036b4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f7ff ff4a 	bl	8003548 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036b4:	bf00      	nop
 80036b6:	3708      	adds	r7, #8
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a20      	ldr	r2, [pc, #128]	; (800374c <I2SEx_RxISR_I2SExt+0x90>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d101      	bne.n	80036d2 <I2SEx_RxISR_I2SExt+0x16>
 80036ce:	4b20      	ldr	r3, [pc, #128]	; (8003750 <I2SEx_RxISR_I2SExt+0x94>)
 80036d0:	e001      	b.n	80036d6 <I2SEx_RxISR_I2SExt+0x1a>
 80036d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036d6:	68d8      	ldr	r0, [r3, #12]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036dc:	1c99      	adds	r1, r3, #2
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80036e2:	b282      	uxth	r2, r0
 80036e4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	3b01      	subs	r3, #1
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d121      	bne.n	8003742 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a12      	ldr	r2, [pc, #72]	; (800374c <I2SEx_RxISR_I2SExt+0x90>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d101      	bne.n	800370c <I2SEx_RxISR_I2SExt+0x50>
 8003708:	4b11      	ldr	r3, [pc, #68]	; (8003750 <I2SEx_RxISR_I2SExt+0x94>)
 800370a:	e001      	b.n	8003710 <I2SEx_RxISR_I2SExt+0x54>
 800370c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003710:	685a      	ldr	r2, [r3, #4]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	490d      	ldr	r1, [pc, #52]	; (800374c <I2SEx_RxISR_I2SExt+0x90>)
 8003718:	428b      	cmp	r3, r1
 800371a:	d101      	bne.n	8003720 <I2SEx_RxISR_I2SExt+0x64>
 800371c:	4b0c      	ldr	r3, [pc, #48]	; (8003750 <I2SEx_RxISR_I2SExt+0x94>)
 800371e:	e001      	b.n	8003724 <I2SEx_RxISR_I2SExt+0x68>
 8003720:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003724:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003728:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372e:	b29b      	uxth	r3, r3
 8003730:	2b00      	cmp	r3, #0
 8003732:	d106      	bne.n	8003742 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f7ff ff03 	bl	8003548 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003742:	bf00      	nop
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	40003800 	.word	0x40003800
 8003750:	40003400 	.word	0x40003400

08003754 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003756:	b08f      	sub	sp, #60	; 0x3c
 8003758:	af0a      	add	r7, sp, #40	; 0x28
 800375a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e10f      	b.n	8003986 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b00      	cmp	r3, #0
 8003776:	d106      	bne.n	8003786 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f007 f863 	bl	800a84c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2203      	movs	r2, #3
 800378a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003796:	2b00      	cmp	r3, #0
 8003798:	d102      	bne.n	80037a0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f002 f896 	bl	80058d6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	603b      	str	r3, [r7, #0]
 80037b0:	687e      	ldr	r6, [r7, #4]
 80037b2:	466d      	mov	r5, sp
 80037b4:	f106 0410 	add.w	r4, r6, #16
 80037b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80037c8:	1d33      	adds	r3, r6, #4
 80037ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037cc:	6838      	ldr	r0, [r7, #0]
 80037ce:	f001 ff6e 	bl	80056ae <USB_CoreInit>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d005      	beq.n	80037e4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2202      	movs	r2, #2
 80037dc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e0d0      	b.n	8003986 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2100      	movs	r1, #0
 80037ea:	4618      	mov	r0, r3
 80037ec:	f002 f884 	bl	80058f8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037f0:	2300      	movs	r3, #0
 80037f2:	73fb      	strb	r3, [r7, #15]
 80037f4:	e04a      	b.n	800388c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80037f6:	7bfa      	ldrb	r2, [r7, #15]
 80037f8:	6879      	ldr	r1, [r7, #4]
 80037fa:	4613      	mov	r3, r2
 80037fc:	00db      	lsls	r3, r3, #3
 80037fe:	1a9b      	subs	r3, r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	440b      	add	r3, r1
 8003804:	333d      	adds	r3, #61	; 0x3d
 8003806:	2201      	movs	r2, #1
 8003808:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800380a:	7bfa      	ldrb	r2, [r7, #15]
 800380c:	6879      	ldr	r1, [r7, #4]
 800380e:	4613      	mov	r3, r2
 8003810:	00db      	lsls	r3, r3, #3
 8003812:	1a9b      	subs	r3, r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	440b      	add	r3, r1
 8003818:	333c      	adds	r3, #60	; 0x3c
 800381a:	7bfa      	ldrb	r2, [r7, #15]
 800381c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800381e:	7bfa      	ldrb	r2, [r7, #15]
 8003820:	7bfb      	ldrb	r3, [r7, #15]
 8003822:	b298      	uxth	r0, r3
 8003824:	6879      	ldr	r1, [r7, #4]
 8003826:	4613      	mov	r3, r2
 8003828:	00db      	lsls	r3, r3, #3
 800382a:	1a9b      	subs	r3, r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	440b      	add	r3, r1
 8003830:	3342      	adds	r3, #66	; 0x42
 8003832:	4602      	mov	r2, r0
 8003834:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003836:	7bfa      	ldrb	r2, [r7, #15]
 8003838:	6879      	ldr	r1, [r7, #4]
 800383a:	4613      	mov	r3, r2
 800383c:	00db      	lsls	r3, r3, #3
 800383e:	1a9b      	subs	r3, r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	440b      	add	r3, r1
 8003844:	333f      	adds	r3, #63	; 0x3f
 8003846:	2200      	movs	r2, #0
 8003848:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800384a:	7bfa      	ldrb	r2, [r7, #15]
 800384c:	6879      	ldr	r1, [r7, #4]
 800384e:	4613      	mov	r3, r2
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	1a9b      	subs	r3, r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	440b      	add	r3, r1
 8003858:	3344      	adds	r3, #68	; 0x44
 800385a:	2200      	movs	r2, #0
 800385c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800385e:	7bfa      	ldrb	r2, [r7, #15]
 8003860:	6879      	ldr	r1, [r7, #4]
 8003862:	4613      	mov	r3, r2
 8003864:	00db      	lsls	r3, r3, #3
 8003866:	1a9b      	subs	r3, r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	440b      	add	r3, r1
 800386c:	3348      	adds	r3, #72	; 0x48
 800386e:	2200      	movs	r2, #0
 8003870:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003872:	7bfa      	ldrb	r2, [r7, #15]
 8003874:	6879      	ldr	r1, [r7, #4]
 8003876:	4613      	mov	r3, r2
 8003878:	00db      	lsls	r3, r3, #3
 800387a:	1a9b      	subs	r3, r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	440b      	add	r3, r1
 8003880:	3350      	adds	r3, #80	; 0x50
 8003882:	2200      	movs	r2, #0
 8003884:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003886:	7bfb      	ldrb	r3, [r7, #15]
 8003888:	3301      	adds	r3, #1
 800388a:	73fb      	strb	r3, [r7, #15]
 800388c:	7bfa      	ldrb	r2, [r7, #15]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	429a      	cmp	r2, r3
 8003894:	d3af      	bcc.n	80037f6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003896:	2300      	movs	r3, #0
 8003898:	73fb      	strb	r3, [r7, #15]
 800389a:	e044      	b.n	8003926 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800389c:	7bfa      	ldrb	r2, [r7, #15]
 800389e:	6879      	ldr	r1, [r7, #4]
 80038a0:	4613      	mov	r3, r2
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	1a9b      	subs	r3, r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	440b      	add	r3, r1
 80038aa:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80038ae:	2200      	movs	r2, #0
 80038b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80038b2:	7bfa      	ldrb	r2, [r7, #15]
 80038b4:	6879      	ldr	r1, [r7, #4]
 80038b6:	4613      	mov	r3, r2
 80038b8:	00db      	lsls	r3, r3, #3
 80038ba:	1a9b      	subs	r3, r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	440b      	add	r3, r1
 80038c0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80038c4:	7bfa      	ldrb	r2, [r7, #15]
 80038c6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80038c8:	7bfa      	ldrb	r2, [r7, #15]
 80038ca:	6879      	ldr	r1, [r7, #4]
 80038cc:	4613      	mov	r3, r2
 80038ce:	00db      	lsls	r3, r3, #3
 80038d0:	1a9b      	subs	r3, r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	440b      	add	r3, r1
 80038d6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80038da:	2200      	movs	r2, #0
 80038dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80038de:	7bfa      	ldrb	r2, [r7, #15]
 80038e0:	6879      	ldr	r1, [r7, #4]
 80038e2:	4613      	mov	r3, r2
 80038e4:	00db      	lsls	r3, r3, #3
 80038e6:	1a9b      	subs	r3, r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	440b      	add	r3, r1
 80038ec:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80038f0:	2200      	movs	r2, #0
 80038f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80038f4:	7bfa      	ldrb	r2, [r7, #15]
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	4613      	mov	r3, r2
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	1a9b      	subs	r3, r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	440b      	add	r3, r1
 8003902:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003906:	2200      	movs	r2, #0
 8003908:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800390a:	7bfa      	ldrb	r2, [r7, #15]
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	4613      	mov	r3, r2
 8003910:	00db      	lsls	r3, r3, #3
 8003912:	1a9b      	subs	r3, r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	440b      	add	r3, r1
 8003918:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800391c:	2200      	movs	r2, #0
 800391e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003920:	7bfb      	ldrb	r3, [r7, #15]
 8003922:	3301      	adds	r3, #1
 8003924:	73fb      	strb	r3, [r7, #15]
 8003926:	7bfa      	ldrb	r2, [r7, #15]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	429a      	cmp	r2, r3
 800392e:	d3b5      	bcc.n	800389c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	603b      	str	r3, [r7, #0]
 8003936:	687e      	ldr	r6, [r7, #4]
 8003938:	466d      	mov	r5, sp
 800393a:	f106 0410 	add.w	r4, r6, #16
 800393e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003940:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003942:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003944:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003946:	e894 0003 	ldmia.w	r4, {r0, r1}
 800394a:	e885 0003 	stmia.w	r5, {r0, r1}
 800394e:	1d33      	adds	r3, r6, #4
 8003950:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003952:	6838      	ldr	r0, [r7, #0]
 8003954:	f001 fffa 	bl	800594c <USB_DevInit>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d005      	beq.n	800396a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2202      	movs	r2, #2
 8003962:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e00d      	b.n	8003986 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2201      	movs	r2, #1
 8003976:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4618      	mov	r0, r3
 8003980:	f003 f842 	bl	8006a08 <USB_DevDisconnect>

  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3714      	adds	r7, #20
 800398a:	46bd      	mov	sp, r7
 800398c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800398e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b084      	sub	sp, #16
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d101      	bne.n	80039aa <HAL_PCD_Start+0x1c>
 80039a6:	2302      	movs	r3, #2
 80039a8:	e020      	b.n	80039ec <HAL_PCD_Start+0x5e>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d109      	bne.n	80039ce <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d005      	beq.n	80039ce <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f001 ff6e 	bl	80058b4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4618      	mov	r0, r3
 80039de:	f002 fff2 	bl	80069c6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80039f4:	b590      	push	{r4, r7, lr}
 80039f6:	b08d      	sub	sp, #52	; 0x34
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a02:	6a3b      	ldr	r3, [r7, #32]
 8003a04:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f003 f8b0 	bl	8006b70 <USB_GetMode>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	f040 839d 	bne.w	8004152 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f003 f814 	bl	8006a4a <USB_ReadInterrupts>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f000 8393 	beq.w	8004150 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f003 f80b 	bl	8006a4a <USB_ReadInterrupts>
 8003a34:	4603      	mov	r3, r0
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d107      	bne.n	8003a4e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	695a      	ldr	r2, [r3, #20]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f002 0202 	and.w	r2, r2, #2
 8003a4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f002 fff9 	bl	8006a4a <USB_ReadInterrupts>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	f003 0310 	and.w	r3, r3, #16
 8003a5e:	2b10      	cmp	r3, #16
 8003a60:	d161      	bne.n	8003b26 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	699a      	ldr	r2, [r3, #24]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f022 0210 	bic.w	r2, r2, #16
 8003a70:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003a72:	6a3b      	ldr	r3, [r7, #32]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	f003 020f 	and.w	r2, r3, #15
 8003a7e:	4613      	mov	r3, r2
 8003a80:	00db      	lsls	r3, r3, #3
 8003a82:	1a9b      	subs	r3, r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	3304      	adds	r3, #4
 8003a90:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	0c5b      	lsrs	r3, r3, #17
 8003a96:	f003 030f 	and.w	r3, r3, #15
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d124      	bne.n	8003ae8 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d035      	beq.n	8003b16 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	091b      	lsrs	r3, r3, #4
 8003ab2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003ab4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	461a      	mov	r2, r3
 8003abc:	6a38      	ldr	r0, [r7, #32]
 8003abe:	f002 fe5f 	bl	8006780 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	68da      	ldr	r2, [r3, #12]
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	091b      	lsrs	r3, r3, #4
 8003aca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ace:	441a      	add	r2, r3
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	699a      	ldr	r2, [r3, #24]
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	091b      	lsrs	r3, r3, #4
 8003adc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ae0:	441a      	add	r2, r3
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	619a      	str	r2, [r3, #24]
 8003ae6:	e016      	b.n	8003b16 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	0c5b      	lsrs	r3, r3, #17
 8003aec:	f003 030f 	and.w	r3, r3, #15
 8003af0:	2b06      	cmp	r3, #6
 8003af2:	d110      	bne.n	8003b16 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003afa:	2208      	movs	r2, #8
 8003afc:	4619      	mov	r1, r3
 8003afe:	6a38      	ldr	r0, [r7, #32]
 8003b00:	f002 fe3e 	bl	8006780 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	699a      	ldr	r2, [r3, #24]
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	091b      	lsrs	r3, r3, #4
 8003b0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b10:	441a      	add	r2, r3
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	699a      	ldr	r2, [r3, #24]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f042 0210 	orr.w	r2, r2, #16
 8003b24:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f002 ff8d 	bl	8006a4a <USB_ReadInterrupts>
 8003b30:	4603      	mov	r3, r0
 8003b32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b36:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003b3a:	d16e      	bne.n	8003c1a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f002 ff93 	bl	8006a70 <USB_ReadDevAllOutEpInterrupt>
 8003b4a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003b4c:	e062      	b.n	8003c14 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d057      	beq.n	8003c08 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b5e:	b2d2      	uxtb	r2, r2
 8003b60:	4611      	mov	r1, r2
 8003b62:	4618      	mov	r0, r3
 8003b64:	f002 ffb8 	bl	8006ad8 <USB_ReadDevOutEPInterrupt>
 8003b68:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d00c      	beq.n	8003b8e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b76:	015a      	lsls	r2, r3, #5
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b80:	461a      	mov	r2, r3
 8003b82:	2301      	movs	r3, #1
 8003b84:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003b86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 fdb1 	bl	80046f0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	f003 0308 	and.w	r3, r3, #8
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00c      	beq.n	8003bb2 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9a:	015a      	lsls	r2, r3, #5
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	2308      	movs	r3, #8
 8003ba8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003baa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 feab 	bl	8004908 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	f003 0310 	and.w	r3, r3, #16
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d008      	beq.n	8003bce <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbe:	015a      	lsls	r2, r3, #5
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bc8:	461a      	mov	r2, r3
 8003bca:	2310      	movs	r3, #16
 8003bcc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	f003 0320 	and.w	r3, r3, #32
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d008      	beq.n	8003bea <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bda:	015a      	lsls	r2, r3, #5
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	4413      	add	r3, r2
 8003be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003be4:	461a      	mov	r2, r3
 8003be6:	2320      	movs	r3, #32
 8003be8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d009      	beq.n	8003c08 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf6:	015a      	lsls	r2, r3, #5
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c00:	461a      	mov	r2, r3
 8003c02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c06:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c10:	085b      	lsrs	r3, r3, #1
 8003c12:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d199      	bne.n	8003b4e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f002 ff13 	bl	8006a4a <USB_ReadInterrupts>
 8003c24:	4603      	mov	r3, r0
 8003c26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c2e:	f040 80c0 	bne.w	8003db2 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f002 ff34 	bl	8006aa4 <USB_ReadDevAllInEpInterrupt>
 8003c3c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003c42:	e0b2      	b.n	8003daa <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f000 80a7 	beq.w	8003d9e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c56:	b2d2      	uxtb	r2, r2
 8003c58:	4611      	mov	r1, r2
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f002 ff5a 	bl	8006b14 <USB_ReadDevInEPInterrupt>
 8003c60:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	f003 0301 	and.w	r3, r3, #1
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d057      	beq.n	8003d1c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6e:	f003 030f 	and.w	r3, r3, #15
 8003c72:	2201      	movs	r2, #1
 8003c74:	fa02 f303 	lsl.w	r3, r2, r3
 8003c78:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	43db      	mvns	r3, r3
 8003c86:	69f9      	ldr	r1, [r7, #28]
 8003c88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c92:	015a      	lsls	r2, r3, #5
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	4413      	add	r3, r2
 8003c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d132      	bne.n	8003d10 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003caa:	6879      	ldr	r1, [r7, #4]
 8003cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cae:	4613      	mov	r3, r2
 8003cb0:	00db      	lsls	r3, r3, #3
 8003cb2:	1a9b      	subs	r3, r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	440b      	add	r3, r1
 8003cb8:	3348      	adds	r3, #72	; 0x48
 8003cba:	6819      	ldr	r1, [r3, #0]
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	1a9b      	subs	r3, r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	4403      	add	r3, r0
 8003cca:	3344      	adds	r3, #68	; 0x44
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4419      	add	r1, r3
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	00db      	lsls	r3, r3, #3
 8003cd8:	1a9b      	subs	r3, r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	4403      	add	r3, r0
 8003cde:	3348      	adds	r3, #72	; 0x48
 8003ce0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d113      	bne.n	8003d10 <HAL_PCD_IRQHandler+0x31c>
 8003ce8:	6879      	ldr	r1, [r7, #4]
 8003cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cec:	4613      	mov	r3, r2
 8003cee:	00db      	lsls	r3, r3, #3
 8003cf0:	1a9b      	subs	r3, r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	440b      	add	r3, r1
 8003cf6:	3350      	adds	r3, #80	; 0x50
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d108      	bne.n	8003d10 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6818      	ldr	r0, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003d08:	461a      	mov	r2, r3
 8003d0a:	2101      	movs	r1, #1
 8003d0c:	f002 ff62 	bl	8006bd4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	4619      	mov	r1, r3
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f006 fe27 	bl	800a96a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	f003 0308 	and.w	r3, r3, #8
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d008      	beq.n	8003d38 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d28:	015a      	lsls	r2, r3, #5
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d32:	461a      	mov	r2, r3
 8003d34:	2308      	movs	r3, #8
 8003d36:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	f003 0310 	and.w	r3, r3, #16
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d008      	beq.n	8003d54 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d44:	015a      	lsls	r2, r3, #5
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	4413      	add	r3, r2
 8003d4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d4e:	461a      	mov	r2, r3
 8003d50:	2310      	movs	r3, #16
 8003d52:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d008      	beq.n	8003d70 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d60:	015a      	lsls	r2, r3, #5
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	4413      	add	r3, r2
 8003d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	2340      	movs	r3, #64	; 0x40
 8003d6e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d008      	beq.n	8003d8c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7c:	015a      	lsls	r2, r3, #5
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	4413      	add	r3, r2
 8003d82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d86:	461a      	mov	r2, r3
 8003d88:	2302      	movs	r3, #2
 8003d8a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d003      	beq.n	8003d9e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003d96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 fc1b 	bl	80045d4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da0:	3301      	adds	r3, #1
 8003da2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da6:	085b      	lsrs	r3, r3, #1
 8003da8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f47f af49 	bne.w	8003c44 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f002 fe47 	bl	8006a4a <USB_ReadInterrupts>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003dc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003dc6:	d122      	bne.n	8003e0e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	69fa      	ldr	r2, [r7, #28]
 8003dd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dd6:	f023 0301 	bic.w	r3, r3, #1
 8003dda:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d108      	bne.n	8003df8 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003dee:	2100      	movs	r1, #0
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 fe27 	bl	8004a44 <HAL_PCDEx_LPM_Callback>
 8003df6:	e002      	b.n	8003dfe <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f006 fe2d 	bl	800aa58 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	695a      	ldr	r2, [r3, #20]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003e0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f002 fe19 	bl	8006a4a <USB_ReadInterrupts>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e22:	d112      	bne.n	8003e4a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f003 0301 	and.w	r3, r3, #1
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d102      	bne.n	8003e3a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f006 fde9 	bl	800aa0c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	695a      	ldr	r2, [r3, #20]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003e48:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f002 fdfb 	bl	8006a4a <USB_ReadInterrupts>
 8003e54:	4603      	mov	r3, r0
 8003e56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e5e:	f040 80c7 	bne.w	8003ff0 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	69fa      	ldr	r2, [r7, #28]
 8003e6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e70:	f023 0301 	bic.w	r3, r3, #1
 8003e74:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2110      	movs	r1, #16
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f001 fec9 	bl	8005c14 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e82:	2300      	movs	r3, #0
 8003e84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e86:	e056      	b.n	8003f36 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e8a:	015a      	lsls	r2, r3, #5
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	4413      	add	r3, r2
 8003e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e94:	461a      	mov	r2, r3
 8003e96:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e9a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e9e:	015a      	lsls	r2, r3, #5
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003eac:	0151      	lsls	r1, r2, #5
 8003eae:	69fa      	ldr	r2, [r7, #28]
 8003eb0:	440a      	add	r2, r1
 8003eb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003eba:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ebe:	015a      	lsls	r2, r3, #5
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ecc:	0151      	lsls	r1, r2, #5
 8003ece:	69fa      	ldr	r2, [r7, #28]
 8003ed0:	440a      	add	r2, r1
 8003ed2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ed6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003eda:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee8:	461a      	mov	r2, r3
 8003eea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003eee:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef2:	015a      	lsls	r2, r3, #5
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f00:	0151      	lsls	r1, r2, #5
 8003f02:	69fa      	ldr	r2, [r7, #28]
 8003f04:	440a      	add	r2, r1
 8003f06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f0e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f12:	015a      	lsls	r2, r3, #5
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	4413      	add	r3, r2
 8003f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f20:	0151      	lsls	r1, r2, #5
 8003f22:	69fa      	ldr	r2, [r7, #28]
 8003f24:	440a      	add	r2, r1
 8003f26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f2e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f32:	3301      	adds	r3, #1
 8003f34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d3a3      	bcc.n	8003e88 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f46:	69db      	ldr	r3, [r3, #28]
 8003f48:	69fa      	ldr	r2, [r7, #28]
 8003f4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f4e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003f52:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d016      	beq.n	8003f8a <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f66:	69fa      	ldr	r2, [r7, #28]
 8003f68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f6c:	f043 030b 	orr.w	r3, r3, #11
 8003f70:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f7c:	69fa      	ldr	r2, [r7, #28]
 8003f7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f82:	f043 030b 	orr.w	r3, r3, #11
 8003f86:	6453      	str	r3, [r2, #68]	; 0x44
 8003f88:	e015      	b.n	8003fb6 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	69fa      	ldr	r2, [r7, #28]
 8003f94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f98:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003f9c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003fa0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	69fa      	ldr	r2, [r7, #28]
 8003fac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fb0:	f043 030b 	orr.w	r3, r3, #11
 8003fb4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	69fa      	ldr	r2, [r7, #28]
 8003fc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fc4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003fc8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6818      	ldr	r0, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003fda:	461a      	mov	r2, r3
 8003fdc:	f002 fdfa 	bl	8006bd4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	695a      	ldr	r2, [r3, #20]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003fee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f002 fd28 	bl	8006a4a <USB_ReadInterrupts>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004000:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004004:	d124      	bne.n	8004050 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4618      	mov	r0, r3
 800400c:	f002 fdbe 	bl	8006b8c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4618      	mov	r0, r3
 8004016:	f001 fe5e 	bl	8005cd6 <USB_GetDevSpeed>
 800401a:	4603      	mov	r3, r0
 800401c:	461a      	mov	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681c      	ldr	r4, [r3, #0]
 8004026:	f001 f959 	bl	80052dc <HAL_RCC_GetHCLKFreq>
 800402a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004030:	b2db      	uxtb	r3, r3
 8004032:	461a      	mov	r2, r3
 8004034:	4620      	mov	r0, r4
 8004036:	f001 fb9b 	bl	8005770 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f006 fcbd 	bl	800a9ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	695a      	ldr	r2, [r3, #20]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800404e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4618      	mov	r0, r3
 8004056:	f002 fcf8 	bl	8006a4a <USB_ReadInterrupts>
 800405a:	4603      	mov	r3, r0
 800405c:	f003 0308 	and.w	r3, r3, #8
 8004060:	2b08      	cmp	r3, #8
 8004062:	d10a      	bne.n	800407a <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f006 fc9a 	bl	800a99e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	695a      	ldr	r2, [r3, #20]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f002 0208 	and.w	r2, r2, #8
 8004078:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4618      	mov	r0, r3
 8004080:	f002 fce3 	bl	8006a4a <USB_ReadInterrupts>
 8004084:	4603      	mov	r3, r0
 8004086:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800408a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800408e:	d10f      	bne.n	80040b0 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004090:	2300      	movs	r3, #0
 8004092:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004096:	b2db      	uxtb	r3, r3
 8004098:	4619      	mov	r1, r3
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f006 fcfc 	bl	800aa98 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	695a      	ldr	r2, [r3, #20]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80040ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f002 fcc8 	bl	8006a4a <USB_ReadInterrupts>
 80040ba:	4603      	mov	r3, r0
 80040bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040c4:	d10f      	bne.n	80040e6 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80040c6:	2300      	movs	r3, #0
 80040c8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	4619      	mov	r1, r3
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f006 fccf 	bl	800aa74 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	695a      	ldr	r2, [r3, #20]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80040e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4618      	mov	r0, r3
 80040ec:	f002 fcad 	bl	8006a4a <USB_ReadInterrupts>
 80040f0:	4603      	mov	r3, r0
 80040f2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80040f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040fa:	d10a      	bne.n	8004112 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f006 fcdd 	bl	800aabc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	695a      	ldr	r2, [r3, #20]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004110:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4618      	mov	r0, r3
 8004118:	f002 fc97 	bl	8006a4a <USB_ReadInterrupts>
 800411c:	4603      	mov	r3, r0
 800411e:	f003 0304 	and.w	r3, r3, #4
 8004122:	2b04      	cmp	r3, #4
 8004124:	d115      	bne.n	8004152 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	f003 0304 	and.w	r3, r3, #4
 8004134:	2b00      	cmp	r3, #0
 8004136:	d002      	beq.n	800413e <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f006 fccd 	bl	800aad8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	6859      	ldr	r1, [r3, #4]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	69ba      	ldr	r2, [r7, #24]
 800414a:	430a      	orrs	r2, r1
 800414c:	605a      	str	r2, [r3, #4]
 800414e:	e000      	b.n	8004152 <HAL_PCD_IRQHandler+0x75e>
      return;
 8004150:	bf00      	nop
    }
  }
}
 8004152:	3734      	adds	r7, #52	; 0x34
 8004154:	46bd      	mov	sp, r7
 8004156:	bd90      	pop	{r4, r7, pc}

08004158 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	460b      	mov	r3, r1
 8004162:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800416a:	2b01      	cmp	r3, #1
 800416c:	d101      	bne.n	8004172 <HAL_PCD_SetAddress+0x1a>
 800416e:	2302      	movs	r3, #2
 8004170:	e013      	b.n	800419a <HAL_PCD_SetAddress+0x42>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	78fa      	ldrb	r2, [r7, #3]
 800417e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	78fa      	ldrb	r2, [r7, #3]
 8004188:	4611      	mov	r1, r2
 800418a:	4618      	mov	r0, r3
 800418c:	f002 fbf5 	bl	800697a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3708      	adds	r7, #8
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}

080041a2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b084      	sub	sp, #16
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
 80041aa:	4608      	mov	r0, r1
 80041ac:	4611      	mov	r1, r2
 80041ae:	461a      	mov	r2, r3
 80041b0:	4603      	mov	r3, r0
 80041b2:	70fb      	strb	r3, [r7, #3]
 80041b4:	460b      	mov	r3, r1
 80041b6:	803b      	strh	r3, [r7, #0]
 80041b8:	4613      	mov	r3, r2
 80041ba:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80041bc:	2300      	movs	r3, #0
 80041be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80041c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	da0f      	bge.n	80041e8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041c8:	78fb      	ldrb	r3, [r7, #3]
 80041ca:	f003 020f 	and.w	r2, r3, #15
 80041ce:	4613      	mov	r3, r2
 80041d0:	00db      	lsls	r3, r3, #3
 80041d2:	1a9b      	subs	r3, r3, r2
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	3338      	adds	r3, #56	; 0x38
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	4413      	add	r3, r2
 80041dc:	3304      	adds	r3, #4
 80041de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2201      	movs	r2, #1
 80041e4:	705a      	strb	r2, [r3, #1]
 80041e6:	e00f      	b.n	8004208 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041e8:	78fb      	ldrb	r3, [r7, #3]
 80041ea:	f003 020f 	and.w	r2, r3, #15
 80041ee:	4613      	mov	r3, r2
 80041f0:	00db      	lsls	r3, r3, #3
 80041f2:	1a9b      	subs	r3, r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	4413      	add	r3, r2
 80041fe:	3304      	adds	r3, #4
 8004200:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004208:	78fb      	ldrb	r3, [r7, #3]
 800420a:	f003 030f 	and.w	r3, r3, #15
 800420e:	b2da      	uxtb	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004214:	883a      	ldrh	r2, [r7, #0]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	78ba      	ldrb	r2, [r7, #2]
 800421e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	785b      	ldrb	r3, [r3, #1]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d004      	beq.n	8004232 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	b29a      	uxth	r2, r3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004232:	78bb      	ldrb	r3, [r7, #2]
 8004234:	2b02      	cmp	r3, #2
 8004236:	d102      	bne.n	800423e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004244:	2b01      	cmp	r3, #1
 8004246:	d101      	bne.n	800424c <HAL_PCD_EP_Open+0xaa>
 8004248:	2302      	movs	r3, #2
 800424a:	e00e      	b.n	800426a <HAL_PCD_EP_Open+0xc8>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68f9      	ldr	r1, [r7, #12]
 800425a:	4618      	mov	r0, r3
 800425c:	f001 fd60 	bl	8005d20 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004268:	7afb      	ldrb	r3, [r7, #11]
}
 800426a:	4618      	mov	r0, r3
 800426c:	3710      	adds	r7, #16
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004272:	b580      	push	{r7, lr}
 8004274:	b084      	sub	sp, #16
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
 800427a:	460b      	mov	r3, r1
 800427c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800427e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004282:	2b00      	cmp	r3, #0
 8004284:	da0f      	bge.n	80042a6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004286:	78fb      	ldrb	r3, [r7, #3]
 8004288:	f003 020f 	and.w	r2, r3, #15
 800428c:	4613      	mov	r3, r2
 800428e:	00db      	lsls	r3, r3, #3
 8004290:	1a9b      	subs	r3, r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	3338      	adds	r3, #56	; 0x38
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	4413      	add	r3, r2
 800429a:	3304      	adds	r3, #4
 800429c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2201      	movs	r2, #1
 80042a2:	705a      	strb	r2, [r3, #1]
 80042a4:	e00f      	b.n	80042c6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042a6:	78fb      	ldrb	r3, [r7, #3]
 80042a8:	f003 020f 	and.w	r2, r3, #15
 80042ac:	4613      	mov	r3, r2
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	1a9b      	subs	r3, r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	4413      	add	r3, r2
 80042bc:	3304      	adds	r3, #4
 80042be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80042c6:	78fb      	ldrb	r3, [r7, #3]
 80042c8:	f003 030f 	and.w	r3, r3, #15
 80042cc:	b2da      	uxtb	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d101      	bne.n	80042e0 <HAL_PCD_EP_Close+0x6e>
 80042dc:	2302      	movs	r3, #2
 80042de:	e00e      	b.n	80042fe <HAL_PCD_EP_Close+0x8c>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68f9      	ldr	r1, [r7, #12]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f001 fd9e 	bl	8005e30 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b086      	sub	sp, #24
 800430a:	af00      	add	r7, sp, #0
 800430c:	60f8      	str	r0, [r7, #12]
 800430e:	607a      	str	r2, [r7, #4]
 8004310:	603b      	str	r3, [r7, #0]
 8004312:	460b      	mov	r3, r1
 8004314:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004316:	7afb      	ldrb	r3, [r7, #11]
 8004318:	f003 020f 	and.w	r2, r3, #15
 800431c:	4613      	mov	r3, r2
 800431e:	00db      	lsls	r3, r3, #3
 8004320:	1a9b      	subs	r3, r3, r2
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	4413      	add	r3, r2
 800432c:	3304      	adds	r3, #4
 800432e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	683a      	ldr	r2, [r7, #0]
 800433a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	2200      	movs	r2, #0
 8004340:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	2200      	movs	r2, #0
 8004346:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004348:	7afb      	ldrb	r3, [r7, #11]
 800434a:	f003 030f 	and.w	r3, r3, #15
 800434e:	b2da      	uxtb	r2, r3
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d102      	bne.n	8004362 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004362:	7afb      	ldrb	r3, [r7, #11]
 8004364:	f003 030f 	and.w	r3, r3, #15
 8004368:	2b00      	cmp	r3, #0
 800436a:	d109      	bne.n	8004380 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6818      	ldr	r0, [r3, #0]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	b2db      	uxtb	r3, r3
 8004376:	461a      	mov	r2, r3
 8004378:	6979      	ldr	r1, [r7, #20]
 800437a:	f002 f879 	bl	8006470 <USB_EP0StartXfer>
 800437e:	e008      	b.n	8004392 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6818      	ldr	r0, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	b2db      	uxtb	r3, r3
 800438a:	461a      	mov	r2, r3
 800438c:	6979      	ldr	r1, [r7, #20]
 800438e:	f001 fe2b 	bl	8005fe8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	3718      	adds	r7, #24
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	460b      	mov	r3, r1
 80043a6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80043a8:	78fb      	ldrb	r3, [r7, #3]
 80043aa:	f003 020f 	and.w	r2, r3, #15
 80043ae:	6879      	ldr	r1, [r7, #4]
 80043b0:	4613      	mov	r3, r2
 80043b2:	00db      	lsls	r3, r3, #3
 80043b4:	1a9b      	subs	r3, r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	440b      	add	r3, r1
 80043ba:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80043be:	681b      	ldr	r3, [r3, #0]
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	607a      	str	r2, [r7, #4]
 80043d6:	603b      	str	r3, [r7, #0]
 80043d8:	460b      	mov	r3, r1
 80043da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043dc:	7afb      	ldrb	r3, [r7, #11]
 80043de:	f003 020f 	and.w	r2, r3, #15
 80043e2:	4613      	mov	r3, r2
 80043e4:	00db      	lsls	r3, r3, #3
 80043e6:	1a9b      	subs	r3, r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	3338      	adds	r3, #56	; 0x38
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	4413      	add	r3, r2
 80043f0:	3304      	adds	r3, #4
 80043f2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	683a      	ldr	r2, [r7, #0]
 80043fe:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	2200      	movs	r2, #0
 8004404:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	2201      	movs	r2, #1
 800440a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800440c:	7afb      	ldrb	r3, [r7, #11]
 800440e:	f003 030f 	and.w	r3, r3, #15
 8004412:	b2da      	uxtb	r2, r3
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d102      	bne.n	8004426 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004426:	7afb      	ldrb	r3, [r7, #11]
 8004428:	f003 030f 	and.w	r3, r3, #15
 800442c:	2b00      	cmp	r3, #0
 800442e:	d109      	bne.n	8004444 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6818      	ldr	r0, [r3, #0]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	b2db      	uxtb	r3, r3
 800443a:	461a      	mov	r2, r3
 800443c:	6979      	ldr	r1, [r7, #20]
 800443e:	f002 f817 	bl	8006470 <USB_EP0StartXfer>
 8004442:	e008      	b.n	8004456 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6818      	ldr	r0, [r3, #0]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	b2db      	uxtb	r3, r3
 800444e:	461a      	mov	r2, r3
 8004450:	6979      	ldr	r1, [r7, #20]
 8004452:	f001 fdc9 	bl	8005fe8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	3718      	adds	r7, #24
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	460b      	mov	r3, r1
 800446a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800446c:	78fb      	ldrb	r3, [r7, #3]
 800446e:	f003 020f 	and.w	r2, r3, #15
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	429a      	cmp	r2, r3
 8004478:	d901      	bls.n	800447e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e050      	b.n	8004520 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800447e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004482:	2b00      	cmp	r3, #0
 8004484:	da0f      	bge.n	80044a6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004486:	78fb      	ldrb	r3, [r7, #3]
 8004488:	f003 020f 	and.w	r2, r3, #15
 800448c:	4613      	mov	r3, r2
 800448e:	00db      	lsls	r3, r3, #3
 8004490:	1a9b      	subs	r3, r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	3338      	adds	r3, #56	; 0x38
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	4413      	add	r3, r2
 800449a:	3304      	adds	r3, #4
 800449c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2201      	movs	r2, #1
 80044a2:	705a      	strb	r2, [r3, #1]
 80044a4:	e00d      	b.n	80044c2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80044a6:	78fa      	ldrb	r2, [r7, #3]
 80044a8:	4613      	mov	r3, r2
 80044aa:	00db      	lsls	r3, r3, #3
 80044ac:	1a9b      	subs	r3, r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	4413      	add	r3, r2
 80044b8:	3304      	adds	r3, #4
 80044ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2201      	movs	r2, #1
 80044c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044c8:	78fb      	ldrb	r3, [r7, #3]
 80044ca:	f003 030f 	and.w	r3, r3, #15
 80044ce:	b2da      	uxtb	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d101      	bne.n	80044e2 <HAL_PCD_EP_SetStall+0x82>
 80044de:	2302      	movs	r3, #2
 80044e0:	e01e      	b.n	8004520 <HAL_PCD_EP_SetStall+0xc0>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68f9      	ldr	r1, [r7, #12]
 80044f0:	4618      	mov	r0, r3
 80044f2:	f002 f96e 	bl	80067d2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80044f6:	78fb      	ldrb	r3, [r7, #3]
 80044f8:	f003 030f 	and.w	r3, r3, #15
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d10a      	bne.n	8004516 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6818      	ldr	r0, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	b2d9      	uxtb	r1, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004510:	461a      	mov	r2, r3
 8004512:	f002 fb5f 	bl	8006bd4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	460b      	mov	r3, r1
 8004532:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004534:	78fb      	ldrb	r3, [r7, #3]
 8004536:	f003 020f 	and.w	r2, r3, #15
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	429a      	cmp	r2, r3
 8004540:	d901      	bls.n	8004546 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e042      	b.n	80045cc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004546:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800454a:	2b00      	cmp	r3, #0
 800454c:	da0f      	bge.n	800456e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800454e:	78fb      	ldrb	r3, [r7, #3]
 8004550:	f003 020f 	and.w	r2, r3, #15
 8004554:	4613      	mov	r3, r2
 8004556:	00db      	lsls	r3, r3, #3
 8004558:	1a9b      	subs	r3, r3, r2
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	3338      	adds	r3, #56	; 0x38
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	4413      	add	r3, r2
 8004562:	3304      	adds	r3, #4
 8004564:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2201      	movs	r2, #1
 800456a:	705a      	strb	r2, [r3, #1]
 800456c:	e00f      	b.n	800458e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800456e:	78fb      	ldrb	r3, [r7, #3]
 8004570:	f003 020f 	and.w	r2, r3, #15
 8004574:	4613      	mov	r3, r2
 8004576:	00db      	lsls	r3, r3, #3
 8004578:	1a9b      	subs	r3, r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	4413      	add	r3, r2
 8004584:	3304      	adds	r3, #4
 8004586:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004594:	78fb      	ldrb	r3, [r7, #3]
 8004596:	f003 030f 	and.w	r3, r3, #15
 800459a:	b2da      	uxtb	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d101      	bne.n	80045ae <HAL_PCD_EP_ClrStall+0x86>
 80045aa:	2302      	movs	r3, #2
 80045ac:	e00e      	b.n	80045cc <HAL_PCD_EP_ClrStall+0xa4>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68f9      	ldr	r1, [r7, #12]
 80045bc:	4618      	mov	r0, r3
 80045be:	f002 f976 	bl	80068ae <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3710      	adds	r7, #16
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b08a      	sub	sp, #40	; 0x28
 80045d8:	af02      	add	r7, sp, #8
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80045e8:	683a      	ldr	r2, [r7, #0]
 80045ea:	4613      	mov	r3, r2
 80045ec:	00db      	lsls	r3, r3, #3
 80045ee:	1a9b      	subs	r3, r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	3338      	adds	r3, #56	; 0x38
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	4413      	add	r3, r2
 80045f8:	3304      	adds	r3, #4
 80045fa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	699a      	ldr	r2, [r3, #24]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	429a      	cmp	r2, r3
 8004606:	d901      	bls.n	800460c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e06c      	b.n	80046e6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	695a      	ldr	r2, [r3, #20]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	699b      	ldr	r3, [r3, #24]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	69fa      	ldr	r2, [r7, #28]
 800461e:	429a      	cmp	r2, r3
 8004620:	d902      	bls.n	8004628 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	3303      	adds	r3, #3
 800462c:	089b      	lsrs	r3, r3, #2
 800462e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004630:	e02b      	b.n	800468a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	695a      	ldr	r2, [r3, #20]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	69fa      	ldr	r2, [r7, #28]
 8004644:	429a      	cmp	r2, r3
 8004646:	d902      	bls.n	800464e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	3303      	adds	r3, #3
 8004652:	089b      	lsrs	r3, r3, #2
 8004654:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	68d9      	ldr	r1, [r3, #12]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	b2da      	uxtb	r2, r3
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004666:	b2db      	uxtb	r3, r3
 8004668:	9300      	str	r3, [sp, #0]
 800466a:	4603      	mov	r3, r0
 800466c:	6978      	ldr	r0, [r7, #20]
 800466e:	f002 f852 	bl	8006716 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	68da      	ldr	r2, [r3, #12]
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	441a      	add	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	699a      	ldr	r2, [r3, #24]
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	441a      	add	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	015a      	lsls	r2, r3, #5
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	4413      	add	r3, r2
 8004692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	b29b      	uxth	r3, r3
 800469a:	69ba      	ldr	r2, [r7, #24]
 800469c:	429a      	cmp	r2, r3
 800469e:	d809      	bhi.n	80046b4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	699a      	ldr	r2, [r3, #24]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d203      	bcs.n	80046b4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	695b      	ldr	r3, [r3, #20]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1be      	bne.n	8004632 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	695a      	ldr	r2, [r3, #20]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d811      	bhi.n	80046e4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	f003 030f 	and.w	r3, r3, #15
 80046c6:	2201      	movs	r2, #1
 80046c8:	fa02 f303 	lsl.w	r3, r2, r3
 80046cc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	43db      	mvns	r3, r3
 80046da:	6939      	ldr	r1, [r7, #16]
 80046dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046e0:	4013      	ands	r3, r2
 80046e2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3720      	adds	r7, #32
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
	...

080046f0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	333c      	adds	r3, #60	; 0x3c
 8004708:	3304      	adds	r3, #4
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	015a      	lsls	r2, r3, #5
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	4413      	add	r3, r2
 8004716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	2b01      	cmp	r3, #1
 8004724:	f040 80a0 	bne.w	8004868 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	f003 0308 	and.w	r3, r3, #8
 800472e:	2b00      	cmp	r3, #0
 8004730:	d015      	beq.n	800475e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	4a72      	ldr	r2, [pc, #456]	; (8004900 <PCD_EP_OutXfrComplete_int+0x210>)
 8004736:	4293      	cmp	r3, r2
 8004738:	f240 80dd 	bls.w	80048f6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004742:	2b00      	cmp	r3, #0
 8004744:	f000 80d7 	beq.w	80048f6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	015a      	lsls	r2, r3, #5
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	4413      	add	r3, r2
 8004750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004754:	461a      	mov	r2, r3
 8004756:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800475a:	6093      	str	r3, [r2, #8]
 800475c:	e0cb      	b.n	80048f6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	f003 0320 	and.w	r3, r3, #32
 8004764:	2b00      	cmp	r3, #0
 8004766:	d009      	beq.n	800477c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	015a      	lsls	r2, r3, #5
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	4413      	add	r3, r2
 8004770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004774:	461a      	mov	r2, r3
 8004776:	2320      	movs	r3, #32
 8004778:	6093      	str	r3, [r2, #8]
 800477a:	e0bc      	b.n	80048f6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004782:	2b00      	cmp	r3, #0
 8004784:	f040 80b7 	bne.w	80048f6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	4a5d      	ldr	r2, [pc, #372]	; (8004900 <PCD_EP_OutXfrComplete_int+0x210>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d90f      	bls.n	80047b0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00a      	beq.n	80047b0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	015a      	lsls	r2, r3, #5
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	4413      	add	r3, r2
 80047a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047a6:	461a      	mov	r2, r3
 80047a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047ac:	6093      	str	r3, [r2, #8]
 80047ae:	e0a2      	b.n	80048f6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80047b0:	6879      	ldr	r1, [r7, #4]
 80047b2:	683a      	ldr	r2, [r7, #0]
 80047b4:	4613      	mov	r3, r2
 80047b6:	00db      	lsls	r3, r3, #3
 80047b8:	1a9b      	subs	r3, r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	440b      	add	r3, r1
 80047be:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80047c2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	0159      	lsls	r1, r3, #5
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	440b      	add	r3, r1
 80047cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80047d6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	4613      	mov	r3, r2
 80047de:	00db      	lsls	r3, r3, #3
 80047e0:	1a9b      	subs	r3, r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	4403      	add	r3, r0
 80047e6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80047ea:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80047ec:	6879      	ldr	r1, [r7, #4]
 80047ee:	683a      	ldr	r2, [r7, #0]
 80047f0:	4613      	mov	r3, r2
 80047f2:	00db      	lsls	r3, r3, #3
 80047f4:	1a9b      	subs	r3, r3, r2
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	440b      	add	r3, r1
 80047fa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80047fe:	6819      	ldr	r1, [r3, #0]
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	683a      	ldr	r2, [r7, #0]
 8004804:	4613      	mov	r3, r2
 8004806:	00db      	lsls	r3, r3, #3
 8004808:	1a9b      	subs	r3, r3, r2
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	4403      	add	r3, r0
 800480e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4419      	add	r1, r3
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	683a      	ldr	r2, [r7, #0]
 800481a:	4613      	mov	r3, r2
 800481c:	00db      	lsls	r3, r3, #3
 800481e:	1a9b      	subs	r3, r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	4403      	add	r3, r0
 8004824:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004828:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d114      	bne.n	800485a <PCD_EP_OutXfrComplete_int+0x16a>
 8004830:	6879      	ldr	r1, [r7, #4]
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	4613      	mov	r3, r2
 8004836:	00db      	lsls	r3, r3, #3
 8004838:	1a9b      	subs	r3, r3, r2
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	440b      	add	r3, r1
 800483e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d108      	bne.n	800485a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6818      	ldr	r0, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004852:	461a      	mov	r2, r3
 8004854:	2101      	movs	r1, #1
 8004856:	f002 f9bd 	bl	8006bd4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	b2db      	uxtb	r3, r3
 800485e:	4619      	mov	r1, r3
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f006 f867 	bl	800a934 <HAL_PCD_DataOutStageCallback>
 8004866:	e046      	b.n	80048f6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	4a26      	ldr	r2, [pc, #152]	; (8004904 <PCD_EP_OutXfrComplete_int+0x214>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d124      	bne.n	80048ba <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00a      	beq.n	8004890 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	015a      	lsls	r2, r3, #5
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	4413      	add	r3, r2
 8004882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004886:	461a      	mov	r2, r3
 8004888:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800488c:	6093      	str	r3, [r2, #8]
 800488e:	e032      	b.n	80048f6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	f003 0320 	and.w	r3, r3, #32
 8004896:	2b00      	cmp	r3, #0
 8004898:	d008      	beq.n	80048ac <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	015a      	lsls	r2, r3, #5
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	4413      	add	r3, r2
 80048a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a6:	461a      	mov	r2, r3
 80048a8:	2320      	movs	r3, #32
 80048aa:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	4619      	mov	r1, r3
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f006 f83e 	bl	800a934 <HAL_PCD_DataOutStageCallback>
 80048b8:	e01d      	b.n	80048f6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d114      	bne.n	80048ea <PCD_EP_OutXfrComplete_int+0x1fa>
 80048c0:	6879      	ldr	r1, [r7, #4]
 80048c2:	683a      	ldr	r2, [r7, #0]
 80048c4:	4613      	mov	r3, r2
 80048c6:	00db      	lsls	r3, r3, #3
 80048c8:	1a9b      	subs	r3, r3, r2
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	440b      	add	r3, r1
 80048ce:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d108      	bne.n	80048ea <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6818      	ldr	r0, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80048e2:	461a      	mov	r2, r3
 80048e4:	2100      	movs	r1, #0
 80048e6:	f002 f975 	bl	8006bd4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	4619      	mov	r1, r3
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f006 f81f 	bl	800a934 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3718      	adds	r7, #24
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	4f54300a 	.word	0x4f54300a
 8004904:	4f54310a 	.word	0x4f54310a

08004908 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b086      	sub	sp, #24
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	333c      	adds	r3, #60	; 0x3c
 8004920:	3304      	adds	r3, #4
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	015a      	lsls	r2, r3, #5
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	4413      	add	r3, r2
 800492e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	4a15      	ldr	r2, [pc, #84]	; (8004990 <PCD_EP_OutSetupPacket_int+0x88>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d90e      	bls.n	800495c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004944:	2b00      	cmp	r3, #0
 8004946:	d009      	beq.n	800495c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	015a      	lsls	r2, r3, #5
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	4413      	add	r3, r2
 8004950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004954:	461a      	mov	r2, r3
 8004956:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800495a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f005 ffd7 	bl	800a910 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	4a0a      	ldr	r2, [pc, #40]	; (8004990 <PCD_EP_OutSetupPacket_int+0x88>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d90c      	bls.n	8004984 <PCD_EP_OutSetupPacket_int+0x7c>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d108      	bne.n	8004984 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6818      	ldr	r0, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800497c:	461a      	mov	r2, r3
 800497e:	2101      	movs	r1, #1
 8004980:	f002 f928 	bl	8006bd4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3718      	adds	r7, #24
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	4f54300a 	.word	0x4f54300a

08004994 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	460b      	mov	r3, r1
 800499e:	70fb      	strb	r3, [r7, #3]
 80049a0:	4613      	mov	r3, r2
 80049a2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049aa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80049ac:	78fb      	ldrb	r3, [r7, #3]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d107      	bne.n	80049c2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80049b2:	883b      	ldrh	r3, [r7, #0]
 80049b4:	0419      	lsls	r1, r3, #16
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68ba      	ldr	r2, [r7, #8]
 80049bc:	430a      	orrs	r2, r1
 80049be:	629a      	str	r2, [r3, #40]	; 0x28
 80049c0:	e028      	b.n	8004a14 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c8:	0c1b      	lsrs	r3, r3, #16
 80049ca:	68ba      	ldr	r2, [r7, #8]
 80049cc:	4413      	add	r3, r2
 80049ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80049d0:	2300      	movs	r3, #0
 80049d2:	73fb      	strb	r3, [r7, #15]
 80049d4:	e00d      	b.n	80049f2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	7bfb      	ldrb	r3, [r7, #15]
 80049dc:	3340      	adds	r3, #64	; 0x40
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4413      	add	r3, r2
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	0c1b      	lsrs	r3, r3, #16
 80049e6:	68ba      	ldr	r2, [r7, #8]
 80049e8:	4413      	add	r3, r2
 80049ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80049ec:	7bfb      	ldrb	r3, [r7, #15]
 80049ee:	3301      	adds	r3, #1
 80049f0:	73fb      	strb	r3, [r7, #15]
 80049f2:	7bfa      	ldrb	r2, [r7, #15]
 80049f4:	78fb      	ldrb	r3, [r7, #3]
 80049f6:	3b01      	subs	r3, #1
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d3ec      	bcc.n	80049d6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80049fc:	883b      	ldrh	r3, [r7, #0]
 80049fe:	0418      	lsls	r0, r3, #16
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6819      	ldr	r1, [r3, #0]
 8004a04:	78fb      	ldrb	r3, [r7, #3]
 8004a06:	3b01      	subs	r3, #1
 8004a08:	68ba      	ldr	r2, [r7, #8]
 8004a0a:	4302      	orrs	r2, r0
 8004a0c:	3340      	adds	r3, #64	; 0x40
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	440b      	add	r3, r1
 8004a12:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3714      	adds	r7, #20
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr

08004a22 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004a22:	b480      	push	{r7}
 8004a24:	b083      	sub	sp, #12
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	887a      	ldrh	r2, [r7, #2]
 8004a34:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b086      	sub	sp, #24
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d101      	bne.n	8004a6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e264      	b.n	8004f38 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d075      	beq.n	8004b66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a7a:	4ba3      	ldr	r3, [pc, #652]	; (8004d08 <HAL_RCC_OscConfig+0x2ac>)
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f003 030c 	and.w	r3, r3, #12
 8004a82:	2b04      	cmp	r3, #4
 8004a84:	d00c      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a86:	4ba0      	ldr	r3, [pc, #640]	; (8004d08 <HAL_RCC_OscConfig+0x2ac>)
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a8e:	2b08      	cmp	r3, #8
 8004a90:	d112      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a92:	4b9d      	ldr	r3, [pc, #628]	; (8004d08 <HAL_RCC_OscConfig+0x2ac>)
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a9e:	d10b      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aa0:	4b99      	ldr	r3, [pc, #612]	; (8004d08 <HAL_RCC_OscConfig+0x2ac>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d05b      	beq.n	8004b64 <HAL_RCC_OscConfig+0x108>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d157      	bne.n	8004b64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e23f      	b.n	8004f38 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ac0:	d106      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x74>
 8004ac2:	4b91      	ldr	r3, [pc, #580]	; (8004d08 <HAL_RCC_OscConfig+0x2ac>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a90      	ldr	r2, [pc, #576]	; (8004d08 <HAL_RCC_OscConfig+0x2ac>)
 8004ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004acc:	6013      	str	r3, [r2, #0]
 8004ace:	e01d      	b.n	8004b0c <HAL_RCC_OscConfig+0xb0>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ad8:	d10c      	bne.n	8004af4 <HAL_RCC_OscConfig+0x98>
 8004ada:	4b8b      	ldr	r3, [pc, #556]	; (8004d08 <HAL_RCC_OscConfig+0x2ac>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a8a      	ldr	r2, [pc, #552]	; (8004d08 <HAL_RCC_OscConfig+0x2ac>)
 8004ae0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ae4:	6013      	str	r3, [r2, #0]
 8004ae6:	4b88      	ldr	r3, [pc, #544]	; (8004d08 <HAL_RCC_OscConfig+0x2ac>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a87      	ldr	r2, [pc, #540]	; (8004d08 <HAL_RCC_OscConfig+0x2ac>)
 8004aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004af0:	6013      	str	r3, [r2, #0]
 8004af2:	e00b      	b.n	8004b0c <HAL_RCC_OscConfig+0xb0>
 8004af4:	4b84      	ldr	r3, [pc, #528]	; (8004d08 <HAL_RCC_OscConfig+0x2ac>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a83      	ldr	r2, [pc, #524]	; (8004d08 <HAL_RCC_OscConfig+0x2ac>)
 8004afa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004afe:	6013      	str	r3, [r2, #0]
 8004b00:	4b81      	ldr	r3, [pc, #516]	; (8004d08 <HAL_RCC_OscConfig+0x2ac>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a80      	ldr	r2, [pc, #512]	; (8004d08 <HAL_RCC_OscConfig+0x2ac>)
 8004b06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d013      	beq.n	8004b3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b14:	f7fd fd42 	bl	800259c <HAL_GetTick>
 8004b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b1a:	e008      	b.n	8004b2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b1c:	f7fd fd3e 	bl	800259c <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	2b64      	cmp	r3, #100	; 0x64
 8004b28:	d901      	bls.n	8004b2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e204      	b.n	8004f38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b2e:	4b76      	ldr	r3, [pc, #472]	; (8004d08 <HAL_RCC_OscConfig+0x2ac>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d0f0      	beq.n	8004b1c <HAL_RCC_OscConfig+0xc0>
 8004b3a:	e014      	b.n	8004b66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b3c:	f7fd fd2e 	bl	800259c <HAL_GetTick>
 8004b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b42:	e008      	b.n	8004b56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b44:	f7fd fd2a 	bl	800259c <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	2b64      	cmp	r3, #100	; 0x64
 8004b50:	d901      	bls.n	8004b56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e1f0      	b.n	8004f38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b56:	4b6c      	ldr	r3, [pc, #432]	; (8004d08 <HAL_RCC_OscConfig+0x2ac>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1f0      	bne.n	8004b44 <HAL_RCC_OscConfig+0xe8>
 8004b62:	e000      	b.n	8004b66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0302 	and.w	r3, r3, #2
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d063      	beq.n	8004c3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b72:	4b65      	ldr	r3, [pc, #404]	; (8004d08 <HAL_RCC_OscConfig+0x2ac>)
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f003 030c 	and.w	r3, r3, #12
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00b      	beq.n	8004b96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b7e:	4b62      	ldr	r3, [pc, #392]	; (8004d08 <HAL_RCC_OscConfig+0x2ac>)
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b86:	2b08      	cmp	r3, #8
 8004b88:	d11c      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b8a:	4b5f      	ldr	r3, [pc, #380]	; (8004d08 <HAL_RCC_OscConfig+0x2ac>)
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d116      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b96:	4b5c      	ldr	r3, [pc, #368]	; (8004d08 <HAL_RCC_OscConfig+0x2ac>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0302 	and.w	r3, r3, #2
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d005      	beq.n	8004bae <HAL_RCC_OscConfig+0x152>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d001      	beq.n	8004bae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e1c4      	b.n	8004f38 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bae:	4b56      	ldr	r3, [pc, #344]	; (8004d08 <HAL_RCC_OscConfig+0x2ac>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	00db      	lsls	r3, r3, #3
 8004bbc:	4952      	ldr	r1, [pc, #328]	; (8004d08 <HAL_RCC_OscConfig+0x2ac>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bc2:	e03a      	b.n	8004c3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d020      	beq.n	8004c0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bcc:	4b4f      	ldr	r3, [pc, #316]	; (8004d0c <HAL_RCC_OscConfig+0x2b0>)
 8004bce:	2201      	movs	r2, #1
 8004bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd2:	f7fd fce3 	bl	800259c <HAL_GetTick>
 8004bd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bd8:	e008      	b.n	8004bec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bda:	f7fd fcdf 	bl	800259c <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d901      	bls.n	8004bec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e1a5      	b.n	8004f38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bec:	4b46      	ldr	r3, [pc, #280]	; (8004d08 <HAL_RCC_OscConfig+0x2ac>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0302 	and.w	r3, r3, #2
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d0f0      	beq.n	8004bda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bf8:	4b43      	ldr	r3, [pc, #268]	; (8004d08 <HAL_RCC_OscConfig+0x2ac>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	00db      	lsls	r3, r3, #3
 8004c06:	4940      	ldr	r1, [pc, #256]	; (8004d08 <HAL_RCC_OscConfig+0x2ac>)
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	600b      	str	r3, [r1, #0]
 8004c0c:	e015      	b.n	8004c3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c0e:	4b3f      	ldr	r3, [pc, #252]	; (8004d0c <HAL_RCC_OscConfig+0x2b0>)
 8004c10:	2200      	movs	r2, #0
 8004c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c14:	f7fd fcc2 	bl	800259c <HAL_GetTick>
 8004c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c1a:	e008      	b.n	8004c2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c1c:	f7fd fcbe 	bl	800259c <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	d901      	bls.n	8004c2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e184      	b.n	8004f38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c2e:	4b36      	ldr	r3, [pc, #216]	; (8004d08 <HAL_RCC_OscConfig+0x2ac>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0302 	and.w	r3, r3, #2
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1f0      	bne.n	8004c1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0308 	and.w	r3, r3, #8
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d030      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d016      	beq.n	8004c7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c4e:	4b30      	ldr	r3, [pc, #192]	; (8004d10 <HAL_RCC_OscConfig+0x2b4>)
 8004c50:	2201      	movs	r2, #1
 8004c52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c54:	f7fd fca2 	bl	800259c <HAL_GetTick>
 8004c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c5a:	e008      	b.n	8004c6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c5c:	f7fd fc9e 	bl	800259c <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d901      	bls.n	8004c6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e164      	b.n	8004f38 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c6e:	4b26      	ldr	r3, [pc, #152]	; (8004d08 <HAL_RCC_OscConfig+0x2ac>)
 8004c70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d0f0      	beq.n	8004c5c <HAL_RCC_OscConfig+0x200>
 8004c7a:	e015      	b.n	8004ca8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c7c:	4b24      	ldr	r3, [pc, #144]	; (8004d10 <HAL_RCC_OscConfig+0x2b4>)
 8004c7e:	2200      	movs	r2, #0
 8004c80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c82:	f7fd fc8b 	bl	800259c <HAL_GetTick>
 8004c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c88:	e008      	b.n	8004c9c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c8a:	f7fd fc87 	bl	800259c <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d901      	bls.n	8004c9c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e14d      	b.n	8004f38 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c9c:	4b1a      	ldr	r3, [pc, #104]	; (8004d08 <HAL_RCC_OscConfig+0x2ac>)
 8004c9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1f0      	bne.n	8004c8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0304 	and.w	r3, r3, #4
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f000 80a0 	beq.w	8004df6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cba:	4b13      	ldr	r3, [pc, #76]	; (8004d08 <HAL_RCC_OscConfig+0x2ac>)
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10f      	bne.n	8004ce6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	60bb      	str	r3, [r7, #8]
 8004cca:	4b0f      	ldr	r3, [pc, #60]	; (8004d08 <HAL_RCC_OscConfig+0x2ac>)
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cce:	4a0e      	ldr	r2, [pc, #56]	; (8004d08 <HAL_RCC_OscConfig+0x2ac>)
 8004cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8004cd6:	4b0c      	ldr	r3, [pc, #48]	; (8004d08 <HAL_RCC_OscConfig+0x2ac>)
 8004cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cde:	60bb      	str	r3, [r7, #8]
 8004ce0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ce6:	4b0b      	ldr	r3, [pc, #44]	; (8004d14 <HAL_RCC_OscConfig+0x2b8>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d121      	bne.n	8004d36 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cf2:	4b08      	ldr	r3, [pc, #32]	; (8004d14 <HAL_RCC_OscConfig+0x2b8>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a07      	ldr	r2, [pc, #28]	; (8004d14 <HAL_RCC_OscConfig+0x2b8>)
 8004cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cfe:	f7fd fc4d 	bl	800259c <HAL_GetTick>
 8004d02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d04:	e011      	b.n	8004d2a <HAL_RCC_OscConfig+0x2ce>
 8004d06:	bf00      	nop
 8004d08:	40023800 	.word	0x40023800
 8004d0c:	42470000 	.word	0x42470000
 8004d10:	42470e80 	.word	0x42470e80
 8004d14:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d18:	f7fd fc40 	bl	800259c <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e106      	b.n	8004f38 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d2a:	4b85      	ldr	r3, [pc, #532]	; (8004f40 <HAL_RCC_OscConfig+0x4e4>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d0f0      	beq.n	8004d18 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d106      	bne.n	8004d4c <HAL_RCC_OscConfig+0x2f0>
 8004d3e:	4b81      	ldr	r3, [pc, #516]	; (8004f44 <HAL_RCC_OscConfig+0x4e8>)
 8004d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d42:	4a80      	ldr	r2, [pc, #512]	; (8004f44 <HAL_RCC_OscConfig+0x4e8>)
 8004d44:	f043 0301 	orr.w	r3, r3, #1
 8004d48:	6713      	str	r3, [r2, #112]	; 0x70
 8004d4a:	e01c      	b.n	8004d86 <HAL_RCC_OscConfig+0x32a>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	2b05      	cmp	r3, #5
 8004d52:	d10c      	bne.n	8004d6e <HAL_RCC_OscConfig+0x312>
 8004d54:	4b7b      	ldr	r3, [pc, #492]	; (8004f44 <HAL_RCC_OscConfig+0x4e8>)
 8004d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d58:	4a7a      	ldr	r2, [pc, #488]	; (8004f44 <HAL_RCC_OscConfig+0x4e8>)
 8004d5a:	f043 0304 	orr.w	r3, r3, #4
 8004d5e:	6713      	str	r3, [r2, #112]	; 0x70
 8004d60:	4b78      	ldr	r3, [pc, #480]	; (8004f44 <HAL_RCC_OscConfig+0x4e8>)
 8004d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d64:	4a77      	ldr	r2, [pc, #476]	; (8004f44 <HAL_RCC_OscConfig+0x4e8>)
 8004d66:	f043 0301 	orr.w	r3, r3, #1
 8004d6a:	6713      	str	r3, [r2, #112]	; 0x70
 8004d6c:	e00b      	b.n	8004d86 <HAL_RCC_OscConfig+0x32a>
 8004d6e:	4b75      	ldr	r3, [pc, #468]	; (8004f44 <HAL_RCC_OscConfig+0x4e8>)
 8004d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d72:	4a74      	ldr	r2, [pc, #464]	; (8004f44 <HAL_RCC_OscConfig+0x4e8>)
 8004d74:	f023 0301 	bic.w	r3, r3, #1
 8004d78:	6713      	str	r3, [r2, #112]	; 0x70
 8004d7a:	4b72      	ldr	r3, [pc, #456]	; (8004f44 <HAL_RCC_OscConfig+0x4e8>)
 8004d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d7e:	4a71      	ldr	r2, [pc, #452]	; (8004f44 <HAL_RCC_OscConfig+0x4e8>)
 8004d80:	f023 0304 	bic.w	r3, r3, #4
 8004d84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d015      	beq.n	8004dba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d8e:	f7fd fc05 	bl	800259c <HAL_GetTick>
 8004d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d94:	e00a      	b.n	8004dac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d96:	f7fd fc01 	bl	800259c <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d901      	bls.n	8004dac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e0c5      	b.n	8004f38 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dac:	4b65      	ldr	r3, [pc, #404]	; (8004f44 <HAL_RCC_OscConfig+0x4e8>)
 8004dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d0ee      	beq.n	8004d96 <HAL_RCC_OscConfig+0x33a>
 8004db8:	e014      	b.n	8004de4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dba:	f7fd fbef 	bl	800259c <HAL_GetTick>
 8004dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dc0:	e00a      	b.n	8004dd8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dc2:	f7fd fbeb 	bl	800259c <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d901      	bls.n	8004dd8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e0af      	b.n	8004f38 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dd8:	4b5a      	ldr	r3, [pc, #360]	; (8004f44 <HAL_RCC_OscConfig+0x4e8>)
 8004dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ddc:	f003 0302 	and.w	r3, r3, #2
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1ee      	bne.n	8004dc2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004de4:	7dfb      	ldrb	r3, [r7, #23]
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d105      	bne.n	8004df6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dea:	4b56      	ldr	r3, [pc, #344]	; (8004f44 <HAL_RCC_OscConfig+0x4e8>)
 8004dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dee:	4a55      	ldr	r2, [pc, #340]	; (8004f44 <HAL_RCC_OscConfig+0x4e8>)
 8004df0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004df4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f000 809b 	beq.w	8004f36 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e00:	4b50      	ldr	r3, [pc, #320]	; (8004f44 <HAL_RCC_OscConfig+0x4e8>)
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f003 030c 	and.w	r3, r3, #12
 8004e08:	2b08      	cmp	r3, #8
 8004e0a:	d05c      	beq.n	8004ec6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	699b      	ldr	r3, [r3, #24]
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d141      	bne.n	8004e98 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e14:	4b4c      	ldr	r3, [pc, #304]	; (8004f48 <HAL_RCC_OscConfig+0x4ec>)
 8004e16:	2200      	movs	r2, #0
 8004e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e1a:	f7fd fbbf 	bl	800259c <HAL_GetTick>
 8004e1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e20:	e008      	b.n	8004e34 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e22:	f7fd fbbb 	bl	800259c <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d901      	bls.n	8004e34 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e081      	b.n	8004f38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e34:	4b43      	ldr	r3, [pc, #268]	; (8004f44 <HAL_RCC_OscConfig+0x4e8>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d1f0      	bne.n	8004e22 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	69da      	ldr	r2, [r3, #28]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a1b      	ldr	r3, [r3, #32]
 8004e48:	431a      	orrs	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4e:	019b      	lsls	r3, r3, #6
 8004e50:	431a      	orrs	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e56:	085b      	lsrs	r3, r3, #1
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	041b      	lsls	r3, r3, #16
 8004e5c:	431a      	orrs	r2, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e62:	061b      	lsls	r3, r3, #24
 8004e64:	4937      	ldr	r1, [pc, #220]	; (8004f44 <HAL_RCC_OscConfig+0x4e8>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e6a:	4b37      	ldr	r3, [pc, #220]	; (8004f48 <HAL_RCC_OscConfig+0x4ec>)
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e70:	f7fd fb94 	bl	800259c <HAL_GetTick>
 8004e74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e76:	e008      	b.n	8004e8a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e78:	f7fd fb90 	bl	800259c <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d901      	bls.n	8004e8a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e056      	b.n	8004f38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e8a:	4b2e      	ldr	r3, [pc, #184]	; (8004f44 <HAL_RCC_OscConfig+0x4e8>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d0f0      	beq.n	8004e78 <HAL_RCC_OscConfig+0x41c>
 8004e96:	e04e      	b.n	8004f36 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e98:	4b2b      	ldr	r3, [pc, #172]	; (8004f48 <HAL_RCC_OscConfig+0x4ec>)
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e9e:	f7fd fb7d 	bl	800259c <HAL_GetTick>
 8004ea2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ea4:	e008      	b.n	8004eb8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ea6:	f7fd fb79 	bl	800259c <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d901      	bls.n	8004eb8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e03f      	b.n	8004f38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eb8:	4b22      	ldr	r3, [pc, #136]	; (8004f44 <HAL_RCC_OscConfig+0x4e8>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d1f0      	bne.n	8004ea6 <HAL_RCC_OscConfig+0x44a>
 8004ec4:	e037      	b.n	8004f36 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d101      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e032      	b.n	8004f38 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ed2:	4b1c      	ldr	r3, [pc, #112]	; (8004f44 <HAL_RCC_OscConfig+0x4e8>)
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	699b      	ldr	r3, [r3, #24]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d028      	beq.n	8004f32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d121      	bne.n	8004f32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d11a      	bne.n	8004f32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f02:	4013      	ands	r3, r2
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f08:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d111      	bne.n	8004f32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f18:	085b      	lsrs	r3, r3, #1
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d107      	bne.n	8004f32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d001      	beq.n	8004f36 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e000      	b.n	8004f38 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3718      	adds	r7, #24
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	40007000 	.word	0x40007000
 8004f44:	40023800 	.word	0x40023800
 8004f48:	42470060 	.word	0x42470060

08004f4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d101      	bne.n	8004f60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e0cc      	b.n	80050fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f60:	4b68      	ldr	r3, [pc, #416]	; (8005104 <HAL_RCC_ClockConfig+0x1b8>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0307 	and.w	r3, r3, #7
 8004f68:	683a      	ldr	r2, [r7, #0]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d90c      	bls.n	8004f88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f6e:	4b65      	ldr	r3, [pc, #404]	; (8005104 <HAL_RCC_ClockConfig+0x1b8>)
 8004f70:	683a      	ldr	r2, [r7, #0]
 8004f72:	b2d2      	uxtb	r2, r2
 8004f74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f76:	4b63      	ldr	r3, [pc, #396]	; (8005104 <HAL_RCC_ClockConfig+0x1b8>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0307 	and.w	r3, r3, #7
 8004f7e:	683a      	ldr	r2, [r7, #0]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d001      	beq.n	8004f88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e0b8      	b.n	80050fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0302 	and.w	r3, r3, #2
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d020      	beq.n	8004fd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0304 	and.w	r3, r3, #4
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d005      	beq.n	8004fac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fa0:	4b59      	ldr	r3, [pc, #356]	; (8005108 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	4a58      	ldr	r2, [pc, #352]	; (8005108 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004faa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0308 	and.w	r3, r3, #8
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d005      	beq.n	8004fc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fb8:	4b53      	ldr	r3, [pc, #332]	; (8005108 <HAL_RCC_ClockConfig+0x1bc>)
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	4a52      	ldr	r2, [pc, #328]	; (8005108 <HAL_RCC_ClockConfig+0x1bc>)
 8004fbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004fc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fc4:	4b50      	ldr	r3, [pc, #320]	; (8005108 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	494d      	ldr	r1, [pc, #308]	; (8005108 <HAL_RCC_ClockConfig+0x1bc>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0301 	and.w	r3, r3, #1
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d044      	beq.n	800506c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d107      	bne.n	8004ffa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fea:	4b47      	ldr	r3, [pc, #284]	; (8005108 <HAL_RCC_ClockConfig+0x1bc>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d119      	bne.n	800502a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e07f      	b.n	80050fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d003      	beq.n	800500a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005006:	2b03      	cmp	r3, #3
 8005008:	d107      	bne.n	800501a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800500a:	4b3f      	ldr	r3, [pc, #252]	; (8005108 <HAL_RCC_ClockConfig+0x1bc>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d109      	bne.n	800502a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e06f      	b.n	80050fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800501a:	4b3b      	ldr	r3, [pc, #236]	; (8005108 <HAL_RCC_ClockConfig+0x1bc>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0302 	and.w	r3, r3, #2
 8005022:	2b00      	cmp	r3, #0
 8005024:	d101      	bne.n	800502a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e067      	b.n	80050fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800502a:	4b37      	ldr	r3, [pc, #220]	; (8005108 <HAL_RCC_ClockConfig+0x1bc>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f023 0203 	bic.w	r2, r3, #3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	4934      	ldr	r1, [pc, #208]	; (8005108 <HAL_RCC_ClockConfig+0x1bc>)
 8005038:	4313      	orrs	r3, r2
 800503a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800503c:	f7fd faae 	bl	800259c <HAL_GetTick>
 8005040:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005042:	e00a      	b.n	800505a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005044:	f7fd faaa 	bl	800259c <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005052:	4293      	cmp	r3, r2
 8005054:	d901      	bls.n	800505a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e04f      	b.n	80050fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800505a:	4b2b      	ldr	r3, [pc, #172]	; (8005108 <HAL_RCC_ClockConfig+0x1bc>)
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f003 020c 	and.w	r2, r3, #12
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	429a      	cmp	r2, r3
 800506a:	d1eb      	bne.n	8005044 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800506c:	4b25      	ldr	r3, [pc, #148]	; (8005104 <HAL_RCC_ClockConfig+0x1b8>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0307 	and.w	r3, r3, #7
 8005074:	683a      	ldr	r2, [r7, #0]
 8005076:	429a      	cmp	r2, r3
 8005078:	d20c      	bcs.n	8005094 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800507a:	4b22      	ldr	r3, [pc, #136]	; (8005104 <HAL_RCC_ClockConfig+0x1b8>)
 800507c:	683a      	ldr	r2, [r7, #0]
 800507e:	b2d2      	uxtb	r2, r2
 8005080:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005082:	4b20      	ldr	r3, [pc, #128]	; (8005104 <HAL_RCC_ClockConfig+0x1b8>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0307 	and.w	r3, r3, #7
 800508a:	683a      	ldr	r2, [r7, #0]
 800508c:	429a      	cmp	r2, r3
 800508e:	d001      	beq.n	8005094 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e032      	b.n	80050fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0304 	and.w	r3, r3, #4
 800509c:	2b00      	cmp	r3, #0
 800509e:	d008      	beq.n	80050b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050a0:	4b19      	ldr	r3, [pc, #100]	; (8005108 <HAL_RCC_ClockConfig+0x1bc>)
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	4916      	ldr	r1, [pc, #88]	; (8005108 <HAL_RCC_ClockConfig+0x1bc>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0308 	and.w	r3, r3, #8
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d009      	beq.n	80050d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050be:	4b12      	ldr	r3, [pc, #72]	; (8005108 <HAL_RCC_ClockConfig+0x1bc>)
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	00db      	lsls	r3, r3, #3
 80050cc:	490e      	ldr	r1, [pc, #56]	; (8005108 <HAL_RCC_ClockConfig+0x1bc>)
 80050ce:	4313      	orrs	r3, r2
 80050d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80050d2:	f000 f821 	bl	8005118 <HAL_RCC_GetSysClockFreq>
 80050d6:	4602      	mov	r2, r0
 80050d8:	4b0b      	ldr	r3, [pc, #44]	; (8005108 <HAL_RCC_ClockConfig+0x1bc>)
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	091b      	lsrs	r3, r3, #4
 80050de:	f003 030f 	and.w	r3, r3, #15
 80050e2:	490a      	ldr	r1, [pc, #40]	; (800510c <HAL_RCC_ClockConfig+0x1c0>)
 80050e4:	5ccb      	ldrb	r3, [r1, r3]
 80050e6:	fa22 f303 	lsr.w	r3, r2, r3
 80050ea:	4a09      	ldr	r2, [pc, #36]	; (8005110 <HAL_RCC_ClockConfig+0x1c4>)
 80050ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80050ee:	4b09      	ldr	r3, [pc, #36]	; (8005114 <HAL_RCC_ClockConfig+0x1c8>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7fd fa0e 	bl	8002514 <HAL_InitTick>

  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3710      	adds	r7, #16
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	40023c00 	.word	0x40023c00
 8005108:	40023800 	.word	0x40023800
 800510c:	0800e9f4 	.word	0x0800e9f4
 8005110:	20000950 	.word	0x20000950
 8005114:	20000954 	.word	0x20000954

08005118 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005118:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800511c:	b084      	sub	sp, #16
 800511e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005120:	2300      	movs	r3, #0
 8005122:	607b      	str	r3, [r7, #4]
 8005124:	2300      	movs	r3, #0
 8005126:	60fb      	str	r3, [r7, #12]
 8005128:	2300      	movs	r3, #0
 800512a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800512c:	2300      	movs	r3, #0
 800512e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005130:	4b67      	ldr	r3, [pc, #412]	; (80052d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f003 030c 	and.w	r3, r3, #12
 8005138:	2b08      	cmp	r3, #8
 800513a:	d00d      	beq.n	8005158 <HAL_RCC_GetSysClockFreq+0x40>
 800513c:	2b08      	cmp	r3, #8
 800513e:	f200 80bd 	bhi.w	80052bc <HAL_RCC_GetSysClockFreq+0x1a4>
 8005142:	2b00      	cmp	r3, #0
 8005144:	d002      	beq.n	800514c <HAL_RCC_GetSysClockFreq+0x34>
 8005146:	2b04      	cmp	r3, #4
 8005148:	d003      	beq.n	8005152 <HAL_RCC_GetSysClockFreq+0x3a>
 800514a:	e0b7      	b.n	80052bc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800514c:	4b61      	ldr	r3, [pc, #388]	; (80052d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800514e:	60bb      	str	r3, [r7, #8]
       break;
 8005150:	e0b7      	b.n	80052c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005152:	4b61      	ldr	r3, [pc, #388]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005154:	60bb      	str	r3, [r7, #8]
      break;
 8005156:	e0b4      	b.n	80052c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005158:	4b5d      	ldr	r3, [pc, #372]	; (80052d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005160:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005162:	4b5b      	ldr	r3, [pc, #364]	; (80052d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800516a:	2b00      	cmp	r3, #0
 800516c:	d04d      	beq.n	800520a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800516e:	4b58      	ldr	r3, [pc, #352]	; (80052d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	099b      	lsrs	r3, r3, #6
 8005174:	461a      	mov	r2, r3
 8005176:	f04f 0300 	mov.w	r3, #0
 800517a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800517e:	f04f 0100 	mov.w	r1, #0
 8005182:	ea02 0800 	and.w	r8, r2, r0
 8005186:	ea03 0901 	and.w	r9, r3, r1
 800518a:	4640      	mov	r0, r8
 800518c:	4649      	mov	r1, r9
 800518e:	f04f 0200 	mov.w	r2, #0
 8005192:	f04f 0300 	mov.w	r3, #0
 8005196:	014b      	lsls	r3, r1, #5
 8005198:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800519c:	0142      	lsls	r2, r0, #5
 800519e:	4610      	mov	r0, r2
 80051a0:	4619      	mov	r1, r3
 80051a2:	ebb0 0008 	subs.w	r0, r0, r8
 80051a6:	eb61 0109 	sbc.w	r1, r1, r9
 80051aa:	f04f 0200 	mov.w	r2, #0
 80051ae:	f04f 0300 	mov.w	r3, #0
 80051b2:	018b      	lsls	r3, r1, #6
 80051b4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80051b8:	0182      	lsls	r2, r0, #6
 80051ba:	1a12      	subs	r2, r2, r0
 80051bc:	eb63 0301 	sbc.w	r3, r3, r1
 80051c0:	f04f 0000 	mov.w	r0, #0
 80051c4:	f04f 0100 	mov.w	r1, #0
 80051c8:	00d9      	lsls	r1, r3, #3
 80051ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80051ce:	00d0      	lsls	r0, r2, #3
 80051d0:	4602      	mov	r2, r0
 80051d2:	460b      	mov	r3, r1
 80051d4:	eb12 0208 	adds.w	r2, r2, r8
 80051d8:	eb43 0309 	adc.w	r3, r3, r9
 80051dc:	f04f 0000 	mov.w	r0, #0
 80051e0:	f04f 0100 	mov.w	r1, #0
 80051e4:	0259      	lsls	r1, r3, #9
 80051e6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80051ea:	0250      	lsls	r0, r2, #9
 80051ec:	4602      	mov	r2, r0
 80051ee:	460b      	mov	r3, r1
 80051f0:	4610      	mov	r0, r2
 80051f2:	4619      	mov	r1, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	461a      	mov	r2, r3
 80051f8:	f04f 0300 	mov.w	r3, #0
 80051fc:	f7fb fd2e 	bl	8000c5c <__aeabi_uldivmod>
 8005200:	4602      	mov	r2, r0
 8005202:	460b      	mov	r3, r1
 8005204:	4613      	mov	r3, r2
 8005206:	60fb      	str	r3, [r7, #12]
 8005208:	e04a      	b.n	80052a0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800520a:	4b31      	ldr	r3, [pc, #196]	; (80052d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	099b      	lsrs	r3, r3, #6
 8005210:	461a      	mov	r2, r3
 8005212:	f04f 0300 	mov.w	r3, #0
 8005216:	f240 10ff 	movw	r0, #511	; 0x1ff
 800521a:	f04f 0100 	mov.w	r1, #0
 800521e:	ea02 0400 	and.w	r4, r2, r0
 8005222:	ea03 0501 	and.w	r5, r3, r1
 8005226:	4620      	mov	r0, r4
 8005228:	4629      	mov	r1, r5
 800522a:	f04f 0200 	mov.w	r2, #0
 800522e:	f04f 0300 	mov.w	r3, #0
 8005232:	014b      	lsls	r3, r1, #5
 8005234:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005238:	0142      	lsls	r2, r0, #5
 800523a:	4610      	mov	r0, r2
 800523c:	4619      	mov	r1, r3
 800523e:	1b00      	subs	r0, r0, r4
 8005240:	eb61 0105 	sbc.w	r1, r1, r5
 8005244:	f04f 0200 	mov.w	r2, #0
 8005248:	f04f 0300 	mov.w	r3, #0
 800524c:	018b      	lsls	r3, r1, #6
 800524e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005252:	0182      	lsls	r2, r0, #6
 8005254:	1a12      	subs	r2, r2, r0
 8005256:	eb63 0301 	sbc.w	r3, r3, r1
 800525a:	f04f 0000 	mov.w	r0, #0
 800525e:	f04f 0100 	mov.w	r1, #0
 8005262:	00d9      	lsls	r1, r3, #3
 8005264:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005268:	00d0      	lsls	r0, r2, #3
 800526a:	4602      	mov	r2, r0
 800526c:	460b      	mov	r3, r1
 800526e:	1912      	adds	r2, r2, r4
 8005270:	eb45 0303 	adc.w	r3, r5, r3
 8005274:	f04f 0000 	mov.w	r0, #0
 8005278:	f04f 0100 	mov.w	r1, #0
 800527c:	0299      	lsls	r1, r3, #10
 800527e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005282:	0290      	lsls	r0, r2, #10
 8005284:	4602      	mov	r2, r0
 8005286:	460b      	mov	r3, r1
 8005288:	4610      	mov	r0, r2
 800528a:	4619      	mov	r1, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	461a      	mov	r2, r3
 8005290:	f04f 0300 	mov.w	r3, #0
 8005294:	f7fb fce2 	bl	8000c5c <__aeabi_uldivmod>
 8005298:	4602      	mov	r2, r0
 800529a:	460b      	mov	r3, r1
 800529c:	4613      	mov	r3, r2
 800529e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80052a0:	4b0b      	ldr	r3, [pc, #44]	; (80052d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	0c1b      	lsrs	r3, r3, #16
 80052a6:	f003 0303 	and.w	r3, r3, #3
 80052aa:	3301      	adds	r3, #1
 80052ac:	005b      	lsls	r3, r3, #1
 80052ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052b8:	60bb      	str	r3, [r7, #8]
      break;
 80052ba:	e002      	b.n	80052c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052bc:	4b05      	ldr	r3, [pc, #20]	; (80052d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80052be:	60bb      	str	r3, [r7, #8]
      break;
 80052c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052c2:	68bb      	ldr	r3, [r7, #8]
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3710      	adds	r7, #16
 80052c8:	46bd      	mov	sp, r7
 80052ca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80052ce:	bf00      	nop
 80052d0:	40023800 	.word	0x40023800
 80052d4:	00f42400 	.word	0x00f42400
 80052d8:	007a1200 	.word	0x007a1200

080052dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052dc:	b480      	push	{r7}
 80052de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052e0:	4b03      	ldr	r3, [pc, #12]	; (80052f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80052e2:	681b      	ldr	r3, [r3, #0]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	20000950 	.word	0x20000950

080052f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80052f8:	f7ff fff0 	bl	80052dc <HAL_RCC_GetHCLKFreq>
 80052fc:	4602      	mov	r2, r0
 80052fe:	4b05      	ldr	r3, [pc, #20]	; (8005314 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	0a9b      	lsrs	r3, r3, #10
 8005304:	f003 0307 	and.w	r3, r3, #7
 8005308:	4903      	ldr	r1, [pc, #12]	; (8005318 <HAL_RCC_GetPCLK1Freq+0x24>)
 800530a:	5ccb      	ldrb	r3, [r1, r3]
 800530c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005310:	4618      	mov	r0, r3
 8005312:	bd80      	pop	{r7, pc}
 8005314:	40023800 	.word	0x40023800
 8005318:	0800ea04 	.word	0x0800ea04

0800531c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b086      	sub	sp, #24
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005324:	2300      	movs	r3, #0
 8005326:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005328:	2300      	movs	r3, #0
 800532a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0301 	and.w	r3, r3, #1
 8005334:	2b00      	cmp	r3, #0
 8005336:	d105      	bne.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005340:	2b00      	cmp	r3, #0
 8005342:	d035      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005344:	4b62      	ldr	r3, [pc, #392]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005346:	2200      	movs	r2, #0
 8005348:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800534a:	f7fd f927 	bl	800259c <HAL_GetTick>
 800534e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005350:	e008      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005352:	f7fd f923 	bl	800259c <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	2b02      	cmp	r3, #2
 800535e:	d901      	bls.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e0b0      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005364:	4b5b      	ldr	r3, [pc, #364]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1f0      	bne.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	019a      	lsls	r2, r3, #6
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	071b      	lsls	r3, r3, #28
 800537c:	4955      	ldr	r1, [pc, #340]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800537e:	4313      	orrs	r3, r2
 8005380:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005384:	4b52      	ldr	r3, [pc, #328]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005386:	2201      	movs	r2, #1
 8005388:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800538a:	f7fd f907 	bl	800259c <HAL_GetTick>
 800538e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005390:	e008      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005392:	f7fd f903 	bl	800259c <HAL_GetTick>
 8005396:	4602      	mov	r2, r0
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	2b02      	cmp	r3, #2
 800539e:	d901      	bls.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e090      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053a4:	4b4b      	ldr	r3, [pc, #300]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d0f0      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0302 	and.w	r3, r3, #2
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	f000 8083 	beq.w	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80053be:	2300      	movs	r3, #0
 80053c0:	60fb      	str	r3, [r7, #12]
 80053c2:	4b44      	ldr	r3, [pc, #272]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c6:	4a43      	ldr	r2, [pc, #268]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053cc:	6413      	str	r3, [r2, #64]	; 0x40
 80053ce:	4b41      	ldr	r3, [pc, #260]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053d6:	60fb      	str	r3, [r7, #12]
 80053d8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80053da:	4b3f      	ldr	r3, [pc, #252]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a3e      	ldr	r2, [pc, #248]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80053e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053e4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80053e6:	f7fd f8d9 	bl	800259c <HAL_GetTick>
 80053ea:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80053ec:	e008      	b.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80053ee:	f7fd f8d5 	bl	800259c <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d901      	bls.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e062      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005400:	4b35      	ldr	r3, [pc, #212]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005408:	2b00      	cmp	r3, #0
 800540a:	d0f0      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800540c:	4b31      	ldr	r3, [pc, #196]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800540e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005410:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005414:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d02f      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005424:	693a      	ldr	r2, [r7, #16]
 8005426:	429a      	cmp	r2, r3
 8005428:	d028      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800542a:	4b2a      	ldr	r3, [pc, #168]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800542c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800542e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005432:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005434:	4b29      	ldr	r3, [pc, #164]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005436:	2201      	movs	r2, #1
 8005438:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800543a:	4b28      	ldr	r3, [pc, #160]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800543c:	2200      	movs	r2, #0
 800543e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005440:	4a24      	ldr	r2, [pc, #144]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005446:	4b23      	ldr	r3, [pc, #140]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	2b01      	cmp	r3, #1
 8005450:	d114      	bne.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005452:	f7fd f8a3 	bl	800259c <HAL_GetTick>
 8005456:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005458:	e00a      	b.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800545a:	f7fd f89f 	bl	800259c <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	f241 3288 	movw	r2, #5000	; 0x1388
 8005468:	4293      	cmp	r3, r2
 800546a:	d901      	bls.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	e02a      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005470:	4b18      	ldr	r3, [pc, #96]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005474:	f003 0302 	and.w	r3, r3, #2
 8005478:	2b00      	cmp	r3, #0
 800547a:	d0ee      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005484:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005488:	d10d      	bne.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800548a:	4b12      	ldr	r3, [pc, #72]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800549a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800549e:	490d      	ldr	r1, [pc, #52]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054a0:	4313      	orrs	r3, r2
 80054a2:	608b      	str	r3, [r1, #8]
 80054a4:	e005      	b.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80054a6:	4b0b      	ldr	r3, [pc, #44]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	4a0a      	ldr	r2, [pc, #40]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054ac:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80054b0:	6093      	str	r3, [r2, #8]
 80054b2:	4b08      	ldr	r3, [pc, #32]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054be:	4905      	ldr	r1, [pc, #20]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3718      	adds	r7, #24
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	42470068 	.word	0x42470068
 80054d4:	40023800 	.word	0x40023800
 80054d8:	40007000 	.word	0x40007000
 80054dc:	42470e40 	.word	0x42470e40

080054e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b087      	sub	sp, #28
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80054e8:	2300      	movs	r3, #0
 80054ea:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80054ec:	2300      	movs	r3, #0
 80054ee:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80054f0:	2300      	movs	r3, #0
 80054f2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80054f4:	2300      	movs	r3, #0
 80054f6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d13e      	bne.n	800557c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80054fe:	4b23      	ldr	r3, [pc, #140]	; (800558c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005506:	60fb      	str	r3, [r7, #12]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d005      	beq.n	800551a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d12f      	bne.n	8005574 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005514:	4b1e      	ldr	r3, [pc, #120]	; (8005590 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005516:	617b      	str	r3, [r7, #20]
          break;
 8005518:	e02f      	b.n	800557a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800551a:	4b1c      	ldr	r3, [pc, #112]	; (800558c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005522:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005526:	d108      	bne.n	800553a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005528:	4b18      	ldr	r3, [pc, #96]	; (800558c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005530:	4a18      	ldr	r2, [pc, #96]	; (8005594 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005532:	fbb2 f3f3 	udiv	r3, r2, r3
 8005536:	613b      	str	r3, [r7, #16]
 8005538:	e007      	b.n	800554a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800553a:	4b14      	ldr	r3, [pc, #80]	; (800558c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005542:	4a15      	ldr	r2, [pc, #84]	; (8005598 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005544:	fbb2 f3f3 	udiv	r3, r2, r3
 8005548:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800554a:	4b10      	ldr	r3, [pc, #64]	; (800558c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800554c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005550:	099b      	lsrs	r3, r3, #6
 8005552:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	fb02 f303 	mul.w	r3, r2, r3
 800555c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800555e:	4b0b      	ldr	r3, [pc, #44]	; (800558c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005560:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005564:	0f1b      	lsrs	r3, r3, #28
 8005566:	f003 0307 	and.w	r3, r3, #7
 800556a:	68ba      	ldr	r2, [r7, #8]
 800556c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005570:	617b      	str	r3, [r7, #20]
          break;
 8005572:	e002      	b.n	800557a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005574:	2300      	movs	r3, #0
 8005576:	617b      	str	r3, [r7, #20]
          break;
 8005578:	bf00      	nop
        }
      }
      break;
 800557a:	bf00      	nop
    }
  }
  return frequency;
 800557c:	697b      	ldr	r3, [r7, #20]
}
 800557e:	4618      	mov	r0, r3
 8005580:	371c      	adds	r7, #28
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	40023800 	.word	0x40023800
 8005590:	00bb8000 	.word	0x00bb8000
 8005594:	007a1200 	.word	0x007a1200
 8005598:	00f42400 	.word	0x00f42400

0800559c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d101      	bne.n	80055ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e07b      	b.n	80056a6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d108      	bne.n	80055c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055be:	d009      	beq.n	80055d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	61da      	str	r2, [r3, #28]
 80055c6:	e005      	b.n	80055d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d106      	bne.n	80055f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f7fc fdf0 	bl	80021d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2202      	movs	r2, #2
 80055f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800560a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800561c:	431a      	orrs	r2, r3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005626:	431a      	orrs	r2, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	f003 0302 	and.w	r3, r3, #2
 8005630:	431a      	orrs	r2, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	f003 0301 	and.w	r3, r3, #1
 800563a:	431a      	orrs	r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005644:	431a      	orrs	r2, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	69db      	ldr	r3, [r3, #28]
 800564a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800564e:	431a      	orrs	r2, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a1b      	ldr	r3, [r3, #32]
 8005654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005658:	ea42 0103 	orr.w	r1, r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005660:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	430a      	orrs	r2, r1
 800566a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	0c1b      	lsrs	r3, r3, #16
 8005672:	f003 0104 	and.w	r1, r3, #4
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567a:	f003 0210 	and.w	r2, r3, #16
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	430a      	orrs	r2, r1
 8005684:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	69da      	ldr	r2, [r3, #28]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005694:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3708      	adds	r7, #8
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}

080056ae <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056ae:	b084      	sub	sp, #16
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	f107 001c 	add.w	r0, r7, #28
 80056bc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d122      	bne.n	800570c <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80056da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80056ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d105      	bne.n	8005700 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f001 fac5 	bl	8006c90 <USB_CoreReset>
 8005706:	4603      	mov	r3, r0
 8005708:	73fb      	strb	r3, [r7, #15]
 800570a:	e01a      	b.n	8005742 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f001 fab9 	bl	8006c90 <USB_CoreReset>
 800571e:	4603      	mov	r3, r0
 8005720:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005722:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005724:	2b00      	cmp	r3, #0
 8005726:	d106      	bne.n	8005736 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	639a      	str	r2, [r3, #56]	; 0x38
 8005734:	e005      	b.n	8005742 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005744:	2b01      	cmp	r3, #1
 8005746:	d10b      	bne.n	8005760 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	f043 0206 	orr.w	r2, r3, #6
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	f043 0220 	orr.w	r2, r3, #32
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005760:	7bfb      	ldrb	r3, [r7, #15]
}
 8005762:	4618      	mov	r0, r3
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800576c:	b004      	add	sp, #16
 800576e:	4770      	bx	lr

08005770 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005770:	b480      	push	{r7}
 8005772:	b087      	sub	sp, #28
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	4613      	mov	r3, r2
 800577c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800577e:	79fb      	ldrb	r3, [r7, #7]
 8005780:	2b02      	cmp	r3, #2
 8005782:	d165      	bne.n	8005850 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	4a41      	ldr	r2, [pc, #260]	; (800588c <USB_SetTurnaroundTime+0x11c>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d906      	bls.n	800579a <USB_SetTurnaroundTime+0x2a>
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	4a40      	ldr	r2, [pc, #256]	; (8005890 <USB_SetTurnaroundTime+0x120>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d202      	bcs.n	800579a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005794:	230f      	movs	r3, #15
 8005796:	617b      	str	r3, [r7, #20]
 8005798:	e062      	b.n	8005860 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	4a3c      	ldr	r2, [pc, #240]	; (8005890 <USB_SetTurnaroundTime+0x120>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d306      	bcc.n	80057b0 <USB_SetTurnaroundTime+0x40>
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	4a3b      	ldr	r2, [pc, #236]	; (8005894 <USB_SetTurnaroundTime+0x124>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d202      	bcs.n	80057b0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80057aa:	230e      	movs	r3, #14
 80057ac:	617b      	str	r3, [r7, #20]
 80057ae:	e057      	b.n	8005860 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	4a38      	ldr	r2, [pc, #224]	; (8005894 <USB_SetTurnaroundTime+0x124>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d306      	bcc.n	80057c6 <USB_SetTurnaroundTime+0x56>
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	4a37      	ldr	r2, [pc, #220]	; (8005898 <USB_SetTurnaroundTime+0x128>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d202      	bcs.n	80057c6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80057c0:	230d      	movs	r3, #13
 80057c2:	617b      	str	r3, [r7, #20]
 80057c4:	e04c      	b.n	8005860 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	4a33      	ldr	r2, [pc, #204]	; (8005898 <USB_SetTurnaroundTime+0x128>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d306      	bcc.n	80057dc <USB_SetTurnaroundTime+0x6c>
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	4a32      	ldr	r2, [pc, #200]	; (800589c <USB_SetTurnaroundTime+0x12c>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d802      	bhi.n	80057dc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80057d6:	230c      	movs	r3, #12
 80057d8:	617b      	str	r3, [r7, #20]
 80057da:	e041      	b.n	8005860 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	4a2f      	ldr	r2, [pc, #188]	; (800589c <USB_SetTurnaroundTime+0x12c>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d906      	bls.n	80057f2 <USB_SetTurnaroundTime+0x82>
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	4a2e      	ldr	r2, [pc, #184]	; (80058a0 <USB_SetTurnaroundTime+0x130>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d802      	bhi.n	80057f2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80057ec:	230b      	movs	r3, #11
 80057ee:	617b      	str	r3, [r7, #20]
 80057f0:	e036      	b.n	8005860 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	4a2a      	ldr	r2, [pc, #168]	; (80058a0 <USB_SetTurnaroundTime+0x130>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d906      	bls.n	8005808 <USB_SetTurnaroundTime+0x98>
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	4a29      	ldr	r2, [pc, #164]	; (80058a4 <USB_SetTurnaroundTime+0x134>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d802      	bhi.n	8005808 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005802:	230a      	movs	r3, #10
 8005804:	617b      	str	r3, [r7, #20]
 8005806:	e02b      	b.n	8005860 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	4a26      	ldr	r2, [pc, #152]	; (80058a4 <USB_SetTurnaroundTime+0x134>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d906      	bls.n	800581e <USB_SetTurnaroundTime+0xae>
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	4a25      	ldr	r2, [pc, #148]	; (80058a8 <USB_SetTurnaroundTime+0x138>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d202      	bcs.n	800581e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005818:	2309      	movs	r3, #9
 800581a:	617b      	str	r3, [r7, #20]
 800581c:	e020      	b.n	8005860 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	4a21      	ldr	r2, [pc, #132]	; (80058a8 <USB_SetTurnaroundTime+0x138>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d306      	bcc.n	8005834 <USB_SetTurnaroundTime+0xc4>
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	4a20      	ldr	r2, [pc, #128]	; (80058ac <USB_SetTurnaroundTime+0x13c>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d802      	bhi.n	8005834 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800582e:	2308      	movs	r3, #8
 8005830:	617b      	str	r3, [r7, #20]
 8005832:	e015      	b.n	8005860 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	4a1d      	ldr	r2, [pc, #116]	; (80058ac <USB_SetTurnaroundTime+0x13c>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d906      	bls.n	800584a <USB_SetTurnaroundTime+0xda>
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	4a1c      	ldr	r2, [pc, #112]	; (80058b0 <USB_SetTurnaroundTime+0x140>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d202      	bcs.n	800584a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005844:	2307      	movs	r3, #7
 8005846:	617b      	str	r3, [r7, #20]
 8005848:	e00a      	b.n	8005860 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800584a:	2306      	movs	r3, #6
 800584c:	617b      	str	r3, [r7, #20]
 800584e:	e007      	b.n	8005860 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005850:	79fb      	ldrb	r3, [r7, #7]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d102      	bne.n	800585c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005856:	2309      	movs	r3, #9
 8005858:	617b      	str	r3, [r7, #20]
 800585a:	e001      	b.n	8005860 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800585c:	2309      	movs	r3, #9
 800585e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	68da      	ldr	r2, [r3, #12]
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	029b      	lsls	r3, r3, #10
 8005874:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005878:	431a      	orrs	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	371c      	adds	r7, #28
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr
 800588c:	00d8acbf 	.word	0x00d8acbf
 8005890:	00e4e1c0 	.word	0x00e4e1c0
 8005894:	00f42400 	.word	0x00f42400
 8005898:	01067380 	.word	0x01067380
 800589c:	011a499f 	.word	0x011a499f
 80058a0:	01312cff 	.word	0x01312cff
 80058a4:	014ca43f 	.word	0x014ca43f
 80058a8:	016e3600 	.word	0x016e3600
 80058ac:	01a6ab1f 	.word	0x01a6ab1f
 80058b0:	01e84800 	.word	0x01e84800

080058b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f043 0201 	orr.w	r2, r3, #1
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	370c      	adds	r7, #12
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr

080058d6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058d6:	b480      	push	{r7}
 80058d8:	b083      	sub	sp, #12
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	f023 0201 	bic.w	r2, r3, #1
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	460b      	mov	r3, r1
 8005902:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005910:	78fb      	ldrb	r3, [r7, #3]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d106      	bne.n	8005924 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	60da      	str	r2, [r3, #12]
 8005922:	e00b      	b.n	800593c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005924:	78fb      	ldrb	r3, [r7, #3]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d106      	bne.n	8005938 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	60da      	str	r2, [r3, #12]
 8005936:	e001      	b.n	800593c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e003      	b.n	8005944 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800593c:	2032      	movs	r0, #50	; 0x32
 800593e:	f7fc fe39 	bl	80025b4 <HAL_Delay>

  return HAL_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3708      	adds	r7, #8
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800594c:	b084      	sub	sp, #16
 800594e:	b580      	push	{r7, lr}
 8005950:	b086      	sub	sp, #24
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
 8005956:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800595a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800595e:	2300      	movs	r3, #0
 8005960:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005966:	2300      	movs	r3, #0
 8005968:	613b      	str	r3, [r7, #16]
 800596a:	e009      	b.n	8005980 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	3340      	adds	r3, #64	; 0x40
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	4413      	add	r3, r2
 8005976:	2200      	movs	r2, #0
 8005978:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	3301      	adds	r3, #1
 800597e:	613b      	str	r3, [r7, #16]
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	2b0e      	cmp	r3, #14
 8005984:	d9f2      	bls.n	800596c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005988:	2b00      	cmp	r3, #0
 800598a:	d11c      	bne.n	80059c6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800599a:	f043 0302 	orr.w	r3, r3, #2
 800599e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059bc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	639a      	str	r2, [r3, #56]	; 0x38
 80059c4:	e00b      	b.n	80059de <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ca:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80059e4:	461a      	mov	r2, r3
 80059e6:	2300      	movs	r3, #0
 80059e8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059f0:	4619      	mov	r1, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059f8:	461a      	mov	r2, r3
 80059fa:	680b      	ldr	r3, [r1, #0]
 80059fc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80059fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d10c      	bne.n	8005a1e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d104      	bne.n	8005a14 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005a0a:	2100      	movs	r1, #0
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 f949 	bl	8005ca4 <USB_SetDevSpeed>
 8005a12:	e008      	b.n	8005a26 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005a14:	2101      	movs	r1, #1
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 f944 	bl	8005ca4 <USB_SetDevSpeed>
 8005a1c:	e003      	b.n	8005a26 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005a1e:	2103      	movs	r1, #3
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 f93f 	bl	8005ca4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005a26:	2110      	movs	r1, #16
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 f8f3 	bl	8005c14 <USB_FlushTxFifo>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d001      	beq.n	8005a38 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 f911 	bl	8005c60 <USB_FlushRxFifo>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d001      	beq.n	8005a48 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a4e:	461a      	mov	r2, r3
 8005a50:	2300      	movs	r3, #0
 8005a52:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a66:	461a      	mov	r2, r3
 8005a68:	2300      	movs	r3, #0
 8005a6a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	613b      	str	r3, [r7, #16]
 8005a70:	e043      	b.n	8005afa <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	015a      	lsls	r2, r3, #5
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	4413      	add	r3, r2
 8005a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a88:	d118      	bne.n	8005abc <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d10a      	bne.n	8005aa6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	015a      	lsls	r2, r3, #5
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	4413      	add	r3, r2
 8005a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005aa2:	6013      	str	r3, [r2, #0]
 8005aa4:	e013      	b.n	8005ace <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	015a      	lsls	r2, r3, #5
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	4413      	add	r3, r2
 8005aae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005ab8:	6013      	str	r3, [r2, #0]
 8005aba:	e008      	b.n	8005ace <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	015a      	lsls	r2, r3, #5
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ac8:	461a      	mov	r2, r3
 8005aca:	2300      	movs	r3, #0
 8005acc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	015a      	lsls	r2, r3, #5
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ada:	461a      	mov	r2, r3
 8005adc:	2300      	movs	r3, #0
 8005ade:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	015a      	lsls	r2, r3, #5
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aec:	461a      	mov	r2, r3
 8005aee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005af2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	3301      	adds	r3, #1
 8005af8:	613b      	str	r3, [r7, #16]
 8005afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afc:	693a      	ldr	r2, [r7, #16]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d3b7      	bcc.n	8005a72 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b02:	2300      	movs	r3, #0
 8005b04:	613b      	str	r3, [r7, #16]
 8005b06:	e043      	b.n	8005b90 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	015a      	lsls	r2, r3, #5
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	4413      	add	r3, r2
 8005b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b1e:	d118      	bne.n	8005b52 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d10a      	bne.n	8005b3c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	015a      	lsls	r2, r3, #5
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b32:	461a      	mov	r2, r3
 8005b34:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005b38:	6013      	str	r3, [r2, #0]
 8005b3a:	e013      	b.n	8005b64 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	015a      	lsls	r2, r3, #5
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	4413      	add	r3, r2
 8005b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b48:	461a      	mov	r2, r3
 8005b4a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005b4e:	6013      	str	r3, [r2, #0]
 8005b50:	e008      	b.n	8005b64 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	015a      	lsls	r2, r3, #5
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	4413      	add	r3, r2
 8005b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b5e:	461a      	mov	r2, r3
 8005b60:	2300      	movs	r3, #0
 8005b62:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	015a      	lsls	r2, r3, #5
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b70:	461a      	mov	r2, r3
 8005b72:	2300      	movs	r3, #0
 8005b74:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	015a      	lsls	r2, r3, #5
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b82:	461a      	mov	r2, r3
 8005b84:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005b88:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	613b      	str	r3, [r7, #16]
 8005b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b92:	693a      	ldr	r2, [r7, #16]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d3b7      	bcc.n	8005b08 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ba6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005baa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005bb8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d105      	bne.n	8005bcc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	699b      	ldr	r3, [r3, #24]
 8005bc4:	f043 0210 	orr.w	r2, r3, #16
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	699a      	ldr	r2, [r3, #24]
 8005bd0:	4b0f      	ldr	r3, [pc, #60]	; (8005c10 <USB_DevInit+0x2c4>)
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005bd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d005      	beq.n	8005bea <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	699b      	ldr	r3, [r3, #24]
 8005be2:	f043 0208 	orr.w	r2, r3, #8
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005bea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d107      	bne.n	8005c00 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	699b      	ldr	r3, [r3, #24]
 8005bf4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bf8:	f043 0304 	orr.w	r3, r3, #4
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005c00:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3718      	adds	r7, #24
 8005c06:	46bd      	mov	sp, r7
 8005c08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c0c:	b004      	add	sp, #16
 8005c0e:	4770      	bx	lr
 8005c10:	803c3800 	.word	0x803c3800

08005c14 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b085      	sub	sp, #20
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	019b      	lsls	r3, r3, #6
 8005c26:	f043 0220 	orr.w	r2, r3, #32
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	3301      	adds	r3, #1
 8005c32:	60fb      	str	r3, [r7, #12]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	4a09      	ldr	r2, [pc, #36]	; (8005c5c <USB_FlushTxFifo+0x48>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d901      	bls.n	8005c40 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e006      	b.n	8005c4e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	f003 0320 	and.w	r3, r3, #32
 8005c48:	2b20      	cmp	r3, #32
 8005c4a:	d0f0      	beq.n	8005c2e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3714      	adds	r7, #20
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	00030d40 	.word	0x00030d40

08005c60 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b085      	sub	sp, #20
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2210      	movs	r2, #16
 8005c70:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	3301      	adds	r3, #1
 8005c76:	60fb      	str	r3, [r7, #12]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	4a09      	ldr	r2, [pc, #36]	; (8005ca0 <USB_FlushRxFifo+0x40>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d901      	bls.n	8005c84 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005c80:	2303      	movs	r3, #3
 8005c82:	e006      	b.n	8005c92 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	f003 0310 	and.w	r3, r3, #16
 8005c8c:	2b10      	cmp	r3, #16
 8005c8e:	d0f0      	beq.n	8005c72 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3714      	adds	r7, #20
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop
 8005ca0:	00030d40 	.word	0x00030d40

08005ca4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	460b      	mov	r3, r1
 8005cae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	78fb      	ldrb	r3, [r7, #3]
 8005cbe:	68f9      	ldr	r1, [r7, #12]
 8005cc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3714      	adds	r7, #20
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr

08005cd6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005cd6:	b480      	push	{r7}
 8005cd8:	b087      	sub	sp, #28
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	f003 0306 	and.w	r3, r3, #6
 8005cee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d102      	bne.n	8005cfc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	75fb      	strb	r3, [r7, #23]
 8005cfa:	e00a      	b.n	8005d12 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d002      	beq.n	8005d08 <USB_GetDevSpeed+0x32>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2b06      	cmp	r3, #6
 8005d06:	d102      	bne.n	8005d0e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005d08:	2302      	movs	r3, #2
 8005d0a:	75fb      	strb	r3, [r7, #23]
 8005d0c:	e001      	b.n	8005d12 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005d0e:	230f      	movs	r3, #15
 8005d10:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	371c      	adds	r7, #28
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	785b      	ldrb	r3, [r3, #1]
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d13a      	bne.n	8005db2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d42:	69da      	ldr	r2, [r3, #28]
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	f003 030f 	and.w	r3, r3, #15
 8005d4c:	2101      	movs	r1, #1
 8005d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	68f9      	ldr	r1, [r7, #12]
 8005d56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	015a      	lsls	r2, r3, #5
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	4413      	add	r3, r2
 8005d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d155      	bne.n	8005e20 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	015a      	lsls	r2, r3, #5
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	78db      	ldrb	r3, [r3, #3]
 8005d8e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005d90:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	059b      	lsls	r3, r3, #22
 8005d96:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	68ba      	ldr	r2, [r7, #8]
 8005d9c:	0151      	lsls	r1, r2, #5
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	440a      	add	r2, r1
 8005da2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005da6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005daa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dae:	6013      	str	r3, [r2, #0]
 8005db0:	e036      	b.n	8005e20 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005db8:	69da      	ldr	r2, [r3, #28]
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	f003 030f 	and.w	r3, r3, #15
 8005dc2:	2101      	movs	r1, #1
 8005dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8005dc8:	041b      	lsls	r3, r3, #16
 8005dca:	68f9      	ldr	r1, [r7, #12]
 8005dcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	015a      	lsls	r2, r3, #5
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	4413      	add	r3, r2
 8005ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d11a      	bne.n	8005e20 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	78db      	ldrb	r3, [r3, #3]
 8005e04:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005e06:	430b      	orrs	r3, r1
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	68ba      	ldr	r2, [r7, #8]
 8005e0c:	0151      	lsls	r1, r2, #5
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	440a      	add	r2, r1
 8005e12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e1e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3714      	adds	r7, #20
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr
	...

08005e30 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b085      	sub	sp, #20
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	785b      	ldrb	r3, [r3, #1]
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d161      	bne.n	8005f10 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	015a      	lsls	r2, r3, #5
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	4413      	add	r3, r2
 8005e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e62:	d11f      	bne.n	8005ea4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	015a      	lsls	r2, r3, #5
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68ba      	ldr	r2, [r7, #8]
 8005e74:	0151      	lsls	r1, r2, #5
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	440a      	add	r2, r1
 8005e7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e82:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	015a      	lsls	r2, r3, #5
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68ba      	ldr	r2, [r7, #8]
 8005e94:	0151      	lsls	r1, r2, #5
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	440a      	add	r2, r1
 8005e9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ea2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	f003 030f 	and.w	r3, r3, #15
 8005eb4:	2101      	movs	r1, #1
 8005eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	43db      	mvns	r3, r3
 8005ebe:	68f9      	ldr	r1, [r7, #12]
 8005ec0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ece:	69da      	ldr	r2, [r3, #28]
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	f003 030f 	and.w	r3, r3, #15
 8005ed8:	2101      	movs	r1, #1
 8005eda:	fa01 f303 	lsl.w	r3, r1, r3
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	43db      	mvns	r3, r3
 8005ee2:	68f9      	ldr	r1, [r7, #12]
 8005ee4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ee8:	4013      	ands	r3, r2
 8005eea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	015a      	lsls	r2, r3, #5
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	0159      	lsls	r1, r3, #5
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	440b      	add	r3, r1
 8005f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f06:	4619      	mov	r1, r3
 8005f08:	4b35      	ldr	r3, [pc, #212]	; (8005fe0 <USB_DeactivateEndpoint+0x1b0>)
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	600b      	str	r3, [r1, #0]
 8005f0e:	e060      	b.n	8005fd2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	015a      	lsls	r2, r3, #5
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	4413      	add	r3, r2
 8005f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f26:	d11f      	bne.n	8005f68 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	015a      	lsls	r2, r3, #5
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	4413      	add	r3, r2
 8005f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	68ba      	ldr	r2, [r7, #8]
 8005f38:	0151      	lsls	r1, r2, #5
 8005f3a:	68fa      	ldr	r2, [r7, #12]
 8005f3c:	440a      	add	r2, r1
 8005f3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f42:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f46:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	015a      	lsls	r2, r3, #5
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	4413      	add	r3, r2
 8005f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68ba      	ldr	r2, [r7, #8]
 8005f58:	0151      	lsls	r1, r2, #5
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	440a      	add	r2, r1
 8005f5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f66:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	f003 030f 	and.w	r3, r3, #15
 8005f78:	2101      	movs	r1, #1
 8005f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f7e:	041b      	lsls	r3, r3, #16
 8005f80:	43db      	mvns	r3, r3
 8005f82:	68f9      	ldr	r1, [r7, #12]
 8005f84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f88:	4013      	ands	r3, r2
 8005f8a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f92:	69da      	ldr	r2, [r3, #28]
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	f003 030f 	and.w	r3, r3, #15
 8005f9c:	2101      	movs	r1, #1
 8005f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8005fa2:	041b      	lsls	r3, r3, #16
 8005fa4:	43db      	mvns	r3, r3
 8005fa6:	68f9      	ldr	r1, [r7, #12]
 8005fa8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fac:	4013      	ands	r3, r2
 8005fae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	015a      	lsls	r2, r3, #5
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	0159      	lsls	r1, r3, #5
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	440b      	add	r3, r1
 8005fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fca:	4619      	mov	r1, r3
 8005fcc:	4b05      	ldr	r3, [pc, #20]	; (8005fe4 <USB_DeactivateEndpoint+0x1b4>)
 8005fce:	4013      	ands	r3, r2
 8005fd0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005fd2:	2300      	movs	r3, #0
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3714      	adds	r7, #20
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr
 8005fe0:	ec337800 	.word	0xec337800
 8005fe4:	eff37800 	.word	0xeff37800

08005fe8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b08a      	sub	sp, #40	; 0x28
 8005fec:	af02      	add	r7, sp, #8
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	785b      	ldrb	r3, [r3, #1]
 8006004:	2b01      	cmp	r3, #1
 8006006:	f040 815c 	bne.w	80062c2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d132      	bne.n	8006078 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	015a      	lsls	r2, r3, #5
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	4413      	add	r3, r2
 800601a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	69ba      	ldr	r2, [r7, #24]
 8006022:	0151      	lsls	r1, r2, #5
 8006024:	69fa      	ldr	r2, [r7, #28]
 8006026:	440a      	add	r2, r1
 8006028:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800602c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006030:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006034:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	015a      	lsls	r2, r3, #5
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	4413      	add	r3, r2
 800603e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	69ba      	ldr	r2, [r7, #24]
 8006046:	0151      	lsls	r1, r2, #5
 8006048:	69fa      	ldr	r2, [r7, #28]
 800604a:	440a      	add	r2, r1
 800604c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006050:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006054:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	015a      	lsls	r2, r3, #5
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	4413      	add	r3, r2
 800605e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	69ba      	ldr	r2, [r7, #24]
 8006066:	0151      	lsls	r1, r2, #5
 8006068:	69fa      	ldr	r2, [r7, #28]
 800606a:	440a      	add	r2, r1
 800606c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006070:	0cdb      	lsrs	r3, r3, #19
 8006072:	04db      	lsls	r3, r3, #19
 8006074:	6113      	str	r3, [r2, #16]
 8006076:	e074      	b.n	8006162 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	015a      	lsls	r2, r3, #5
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	4413      	add	r3, r2
 8006080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	69ba      	ldr	r2, [r7, #24]
 8006088:	0151      	lsls	r1, r2, #5
 800608a:	69fa      	ldr	r2, [r7, #28]
 800608c:	440a      	add	r2, r1
 800608e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006092:	0cdb      	lsrs	r3, r3, #19
 8006094:	04db      	lsls	r3, r3, #19
 8006096:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	015a      	lsls	r2, r3, #5
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	4413      	add	r3, r2
 80060a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	69ba      	ldr	r2, [r7, #24]
 80060a8:	0151      	lsls	r1, r2, #5
 80060aa:	69fa      	ldr	r2, [r7, #28]
 80060ac:	440a      	add	r2, r1
 80060ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060b2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80060b6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80060ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	015a      	lsls	r2, r3, #5
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	4413      	add	r3, r2
 80060c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c8:	691a      	ldr	r2, [r3, #16]
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	6959      	ldr	r1, [r3, #20]
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	440b      	add	r3, r1
 80060d4:	1e59      	subs	r1, r3, #1
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	fbb1 f3f3 	udiv	r3, r1, r3
 80060de:	04d9      	lsls	r1, r3, #19
 80060e0:	4b9d      	ldr	r3, [pc, #628]	; (8006358 <USB_EPStartXfer+0x370>)
 80060e2:	400b      	ands	r3, r1
 80060e4:	69b9      	ldr	r1, [r7, #24]
 80060e6:	0148      	lsls	r0, r1, #5
 80060e8:	69f9      	ldr	r1, [r7, #28]
 80060ea:	4401      	add	r1, r0
 80060ec:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80060f0:	4313      	orrs	r3, r2
 80060f2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	015a      	lsls	r2, r3, #5
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	4413      	add	r3, r2
 80060fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006100:	691a      	ldr	r2, [r3, #16]
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	695b      	ldr	r3, [r3, #20]
 8006106:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800610a:	69b9      	ldr	r1, [r7, #24]
 800610c:	0148      	lsls	r0, r1, #5
 800610e:	69f9      	ldr	r1, [r7, #28]
 8006110:	4401      	add	r1, r0
 8006112:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006116:	4313      	orrs	r3, r2
 8006118:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	78db      	ldrb	r3, [r3, #3]
 800611e:	2b01      	cmp	r3, #1
 8006120:	d11f      	bne.n	8006162 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	015a      	lsls	r2, r3, #5
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	4413      	add	r3, r2
 800612a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	69ba      	ldr	r2, [r7, #24]
 8006132:	0151      	lsls	r1, r2, #5
 8006134:	69fa      	ldr	r2, [r7, #28]
 8006136:	440a      	add	r2, r1
 8006138:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800613c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006140:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	015a      	lsls	r2, r3, #5
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	4413      	add	r3, r2
 800614a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	69ba      	ldr	r2, [r7, #24]
 8006152:	0151      	lsls	r1, r2, #5
 8006154:	69fa      	ldr	r2, [r7, #28]
 8006156:	440a      	add	r2, r1
 8006158:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800615c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006160:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006162:	79fb      	ldrb	r3, [r7, #7]
 8006164:	2b01      	cmp	r3, #1
 8006166:	d14b      	bne.n	8006200 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d009      	beq.n	8006184 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	015a      	lsls	r2, r3, #5
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	4413      	add	r3, r2
 8006178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800617c:	461a      	mov	r2, r3
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	78db      	ldrb	r3, [r3, #3]
 8006188:	2b01      	cmp	r3, #1
 800618a:	d128      	bne.n	80061de <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006198:	2b00      	cmp	r3, #0
 800619a:	d110      	bne.n	80061be <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	015a      	lsls	r2, r3, #5
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	4413      	add	r3, r2
 80061a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	69ba      	ldr	r2, [r7, #24]
 80061ac:	0151      	lsls	r1, r2, #5
 80061ae:	69fa      	ldr	r2, [r7, #28]
 80061b0:	440a      	add	r2, r1
 80061b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80061ba:	6013      	str	r3, [r2, #0]
 80061bc:	e00f      	b.n	80061de <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	015a      	lsls	r2, r3, #5
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	4413      	add	r3, r2
 80061c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	69ba      	ldr	r2, [r7, #24]
 80061ce:	0151      	lsls	r1, r2, #5
 80061d0:	69fa      	ldr	r2, [r7, #28]
 80061d2:	440a      	add	r2, r1
 80061d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061dc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	015a      	lsls	r2, r3, #5
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	4413      	add	r3, r2
 80061e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	69ba      	ldr	r2, [r7, #24]
 80061ee:	0151      	lsls	r1, r2, #5
 80061f0:	69fa      	ldr	r2, [r7, #28]
 80061f2:	440a      	add	r2, r1
 80061f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80061fc:	6013      	str	r3, [r2, #0]
 80061fe:	e12f      	b.n	8006460 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	015a      	lsls	r2, r3, #5
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	4413      	add	r3, r2
 8006208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	69ba      	ldr	r2, [r7, #24]
 8006210:	0151      	lsls	r1, r2, #5
 8006212:	69fa      	ldr	r2, [r7, #28]
 8006214:	440a      	add	r2, r1
 8006216:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800621a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800621e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	78db      	ldrb	r3, [r3, #3]
 8006224:	2b01      	cmp	r3, #1
 8006226:	d015      	beq.n	8006254 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	695b      	ldr	r3, [r3, #20]
 800622c:	2b00      	cmp	r3, #0
 800622e:	f000 8117 	beq.w	8006460 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006238:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	f003 030f 	and.w	r3, r3, #15
 8006242:	2101      	movs	r1, #1
 8006244:	fa01 f303 	lsl.w	r3, r1, r3
 8006248:	69f9      	ldr	r1, [r7, #28]
 800624a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800624e:	4313      	orrs	r3, r2
 8006250:	634b      	str	r3, [r1, #52]	; 0x34
 8006252:	e105      	b.n	8006460 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006260:	2b00      	cmp	r3, #0
 8006262:	d110      	bne.n	8006286 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	015a      	lsls	r2, r3, #5
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	4413      	add	r3, r2
 800626c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	69ba      	ldr	r2, [r7, #24]
 8006274:	0151      	lsls	r1, r2, #5
 8006276:	69fa      	ldr	r2, [r7, #28]
 8006278:	440a      	add	r2, r1
 800627a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800627e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006282:	6013      	str	r3, [r2, #0]
 8006284:	e00f      	b.n	80062a6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	015a      	lsls	r2, r3, #5
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	4413      	add	r3, r2
 800628e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	69ba      	ldr	r2, [r7, #24]
 8006296:	0151      	lsls	r1, r2, #5
 8006298:	69fa      	ldr	r2, [r7, #28]
 800629a:	440a      	add	r2, r1
 800629c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062a4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	68d9      	ldr	r1, [r3, #12]
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	781a      	ldrb	r2, [r3, #0]
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	b298      	uxth	r0, r3
 80062b4:	79fb      	ldrb	r3, [r7, #7]
 80062b6:	9300      	str	r3, [sp, #0]
 80062b8:	4603      	mov	r3, r0
 80062ba:	68f8      	ldr	r0, [r7, #12]
 80062bc:	f000 fa2b 	bl	8006716 <USB_WritePacket>
 80062c0:	e0ce      	b.n	8006460 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	015a      	lsls	r2, r3, #5
 80062c6:	69fb      	ldr	r3, [r7, #28]
 80062c8:	4413      	add	r3, r2
 80062ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ce:	691b      	ldr	r3, [r3, #16]
 80062d0:	69ba      	ldr	r2, [r7, #24]
 80062d2:	0151      	lsls	r1, r2, #5
 80062d4:	69fa      	ldr	r2, [r7, #28]
 80062d6:	440a      	add	r2, r1
 80062d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062dc:	0cdb      	lsrs	r3, r3, #19
 80062de:	04db      	lsls	r3, r3, #19
 80062e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	015a      	lsls	r2, r3, #5
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	4413      	add	r3, r2
 80062ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	69ba      	ldr	r2, [r7, #24]
 80062f2:	0151      	lsls	r1, r2, #5
 80062f4:	69fa      	ldr	r2, [r7, #28]
 80062f6:	440a      	add	r2, r1
 80062f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006300:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006304:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	695b      	ldr	r3, [r3, #20]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d126      	bne.n	800635c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	015a      	lsls	r2, r3, #5
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	4413      	add	r3, r2
 8006316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800631a:	691a      	ldr	r2, [r3, #16]
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006324:	69b9      	ldr	r1, [r7, #24]
 8006326:	0148      	lsls	r0, r1, #5
 8006328:	69f9      	ldr	r1, [r7, #28]
 800632a:	4401      	add	r1, r0
 800632c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006330:	4313      	orrs	r3, r2
 8006332:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	015a      	lsls	r2, r3, #5
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	4413      	add	r3, r2
 800633c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	69ba      	ldr	r2, [r7, #24]
 8006344:	0151      	lsls	r1, r2, #5
 8006346:	69fa      	ldr	r2, [r7, #28]
 8006348:	440a      	add	r2, r1
 800634a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800634e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006352:	6113      	str	r3, [r2, #16]
 8006354:	e036      	b.n	80063c4 <USB_EPStartXfer+0x3dc>
 8006356:	bf00      	nop
 8006358:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	695a      	ldr	r2, [r3, #20]
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	4413      	add	r3, r2
 8006366:	1e5a      	subs	r2, r3, #1
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006370:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006372:	69bb      	ldr	r3, [r7, #24]
 8006374:	015a      	lsls	r2, r3, #5
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	4413      	add	r3, r2
 800637a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800637e:	691a      	ldr	r2, [r3, #16]
 8006380:	8afb      	ldrh	r3, [r7, #22]
 8006382:	04d9      	lsls	r1, r3, #19
 8006384:	4b39      	ldr	r3, [pc, #228]	; (800646c <USB_EPStartXfer+0x484>)
 8006386:	400b      	ands	r3, r1
 8006388:	69b9      	ldr	r1, [r7, #24]
 800638a:	0148      	lsls	r0, r1, #5
 800638c:	69f9      	ldr	r1, [r7, #28]
 800638e:	4401      	add	r1, r0
 8006390:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006394:	4313      	orrs	r3, r2
 8006396:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	015a      	lsls	r2, r3, #5
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	4413      	add	r3, r2
 80063a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a4:	691a      	ldr	r2, [r3, #16]
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	8af9      	ldrh	r1, [r7, #22]
 80063ac:	fb01 f303 	mul.w	r3, r1, r3
 80063b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063b4:	69b9      	ldr	r1, [r7, #24]
 80063b6:	0148      	lsls	r0, r1, #5
 80063b8:	69f9      	ldr	r1, [r7, #28]
 80063ba:	4401      	add	r1, r0
 80063bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80063c0:	4313      	orrs	r3, r2
 80063c2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80063c4:	79fb      	ldrb	r3, [r7, #7]
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d10d      	bne.n	80063e6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d009      	beq.n	80063e6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	68d9      	ldr	r1, [r3, #12]
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	015a      	lsls	r2, r3, #5
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	4413      	add	r3, r2
 80063de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063e2:	460a      	mov	r2, r1
 80063e4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	78db      	ldrb	r3, [r3, #3]
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d128      	bne.n	8006440 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d110      	bne.n	8006420 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	015a      	lsls	r2, r3, #5
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	4413      	add	r3, r2
 8006406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	69ba      	ldr	r2, [r7, #24]
 800640e:	0151      	lsls	r1, r2, #5
 8006410:	69fa      	ldr	r2, [r7, #28]
 8006412:	440a      	add	r2, r1
 8006414:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006418:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800641c:	6013      	str	r3, [r2, #0]
 800641e:	e00f      	b.n	8006440 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	015a      	lsls	r2, r3, #5
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	4413      	add	r3, r2
 8006428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	69ba      	ldr	r2, [r7, #24]
 8006430:	0151      	lsls	r1, r2, #5
 8006432:	69fa      	ldr	r2, [r7, #28]
 8006434:	440a      	add	r2, r1
 8006436:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800643a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800643e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006440:	69bb      	ldr	r3, [r7, #24]
 8006442:	015a      	lsls	r2, r3, #5
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	4413      	add	r3, r2
 8006448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	69ba      	ldr	r2, [r7, #24]
 8006450:	0151      	lsls	r1, r2, #5
 8006452:	69fa      	ldr	r2, [r7, #28]
 8006454:	440a      	add	r2, r1
 8006456:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800645a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800645e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	3720      	adds	r7, #32
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	1ff80000 	.word	0x1ff80000

08006470 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006470:	b480      	push	{r7}
 8006472:	b087      	sub	sp, #28
 8006474:	af00      	add	r7, sp, #0
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	4613      	mov	r3, r2
 800647c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	785b      	ldrb	r3, [r3, #1]
 800648c:	2b01      	cmp	r3, #1
 800648e:	f040 80cd 	bne.w	800662c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	695b      	ldr	r3, [r3, #20]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d132      	bne.n	8006500 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	015a      	lsls	r2, r3, #5
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	4413      	add	r3, r2
 80064a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	693a      	ldr	r2, [r7, #16]
 80064aa:	0151      	lsls	r1, r2, #5
 80064ac:	697a      	ldr	r2, [r7, #20]
 80064ae:	440a      	add	r2, r1
 80064b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80064b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80064bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	015a      	lsls	r2, r3, #5
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	4413      	add	r3, r2
 80064c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	693a      	ldr	r2, [r7, #16]
 80064ce:	0151      	lsls	r1, r2, #5
 80064d0:	697a      	ldr	r2, [r7, #20]
 80064d2:	440a      	add	r2, r1
 80064d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80064dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	015a      	lsls	r2, r3, #5
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	4413      	add	r3, r2
 80064e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	693a      	ldr	r2, [r7, #16]
 80064ee:	0151      	lsls	r1, r2, #5
 80064f0:	697a      	ldr	r2, [r7, #20]
 80064f2:	440a      	add	r2, r1
 80064f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064f8:	0cdb      	lsrs	r3, r3, #19
 80064fa:	04db      	lsls	r3, r3, #19
 80064fc:	6113      	str	r3, [r2, #16]
 80064fe:	e04e      	b.n	800659e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	015a      	lsls	r2, r3, #5
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	4413      	add	r3, r2
 8006508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	0151      	lsls	r1, r2, #5
 8006512:	697a      	ldr	r2, [r7, #20]
 8006514:	440a      	add	r2, r1
 8006516:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800651a:	0cdb      	lsrs	r3, r3, #19
 800651c:	04db      	lsls	r3, r3, #19
 800651e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	015a      	lsls	r2, r3, #5
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	4413      	add	r3, r2
 8006528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	693a      	ldr	r2, [r7, #16]
 8006530:	0151      	lsls	r1, r2, #5
 8006532:	697a      	ldr	r2, [r7, #20]
 8006534:	440a      	add	r2, r1
 8006536:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800653a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800653e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006542:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	695a      	ldr	r2, [r3, #20]
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	429a      	cmp	r2, r3
 800654e:	d903      	bls.n	8006558 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	689a      	ldr	r2, [r3, #8]
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	015a      	lsls	r2, r3, #5
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	4413      	add	r3, r2
 8006560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	693a      	ldr	r2, [r7, #16]
 8006568:	0151      	lsls	r1, r2, #5
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	440a      	add	r2, r1
 800656e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006572:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006576:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	015a      	lsls	r2, r3, #5
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	4413      	add	r3, r2
 8006580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006584:	691a      	ldr	r2, [r3, #16]
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	695b      	ldr	r3, [r3, #20]
 800658a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800658e:	6939      	ldr	r1, [r7, #16]
 8006590:	0148      	lsls	r0, r1, #5
 8006592:	6979      	ldr	r1, [r7, #20]
 8006594:	4401      	add	r1, r0
 8006596:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800659a:	4313      	orrs	r3, r2
 800659c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800659e:	79fb      	ldrb	r3, [r7, #7]
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d11e      	bne.n	80065e2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d009      	beq.n	80065c0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	015a      	lsls	r2, r3, #5
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	4413      	add	r3, r2
 80065b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065b8:	461a      	mov	r2, r3
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	015a      	lsls	r2, r3, #5
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	4413      	add	r3, r2
 80065c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	693a      	ldr	r2, [r7, #16]
 80065d0:	0151      	lsls	r1, r2, #5
 80065d2:	697a      	ldr	r2, [r7, #20]
 80065d4:	440a      	add	r2, r1
 80065d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80065de:	6013      	str	r3, [r2, #0]
 80065e0:	e092      	b.n	8006708 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	015a      	lsls	r2, r3, #5
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	4413      	add	r3, r2
 80065ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	693a      	ldr	r2, [r7, #16]
 80065f2:	0151      	lsls	r1, r2, #5
 80065f4:	697a      	ldr	r2, [r7, #20]
 80065f6:	440a      	add	r2, r1
 80065f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065fc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006600:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	695b      	ldr	r3, [r3, #20]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d07e      	beq.n	8006708 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006610:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	f003 030f 	and.w	r3, r3, #15
 800661a:	2101      	movs	r1, #1
 800661c:	fa01 f303 	lsl.w	r3, r1, r3
 8006620:	6979      	ldr	r1, [r7, #20]
 8006622:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006626:	4313      	orrs	r3, r2
 8006628:	634b      	str	r3, [r1, #52]	; 0x34
 800662a:	e06d      	b.n	8006708 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	015a      	lsls	r2, r3, #5
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	4413      	add	r3, r2
 8006634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	693a      	ldr	r2, [r7, #16]
 800663c:	0151      	lsls	r1, r2, #5
 800663e:	697a      	ldr	r2, [r7, #20]
 8006640:	440a      	add	r2, r1
 8006642:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006646:	0cdb      	lsrs	r3, r3, #19
 8006648:	04db      	lsls	r3, r3, #19
 800664a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	015a      	lsls	r2, r3, #5
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	4413      	add	r3, r2
 8006654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	693a      	ldr	r2, [r7, #16]
 800665c:	0151      	lsls	r1, r2, #5
 800665e:	697a      	ldr	r2, [r7, #20]
 8006660:	440a      	add	r2, r1
 8006662:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006666:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800666a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800666e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	695b      	ldr	r3, [r3, #20]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d003      	beq.n	8006680 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	689a      	ldr	r2, [r3, #8]
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	015a      	lsls	r2, r3, #5
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	4413      	add	r3, r2
 8006688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	693a      	ldr	r2, [r7, #16]
 8006690:	0151      	lsls	r1, r2, #5
 8006692:	697a      	ldr	r2, [r7, #20]
 8006694:	440a      	add	r2, r1
 8006696:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800669a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800669e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	015a      	lsls	r2, r3, #5
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	4413      	add	r3, r2
 80066a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ac:	691a      	ldr	r2, [r3, #16]
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066b6:	6939      	ldr	r1, [r7, #16]
 80066b8:	0148      	lsls	r0, r1, #5
 80066ba:	6979      	ldr	r1, [r7, #20]
 80066bc:	4401      	add	r1, r0
 80066be:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80066c2:	4313      	orrs	r3, r2
 80066c4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80066c6:	79fb      	ldrb	r3, [r7, #7]
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d10d      	bne.n	80066e8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d009      	beq.n	80066e8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	68d9      	ldr	r1, [r3, #12]
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	015a      	lsls	r2, r3, #5
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	4413      	add	r3, r2
 80066e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066e4:	460a      	mov	r2, r1
 80066e6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	015a      	lsls	r2, r3, #5
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	4413      	add	r3, r2
 80066f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	693a      	ldr	r2, [r7, #16]
 80066f8:	0151      	lsls	r1, r2, #5
 80066fa:	697a      	ldr	r2, [r7, #20]
 80066fc:	440a      	add	r2, r1
 80066fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006702:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006706:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	371c      	adds	r7, #28
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr

08006716 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006716:	b480      	push	{r7}
 8006718:	b089      	sub	sp, #36	; 0x24
 800671a:	af00      	add	r7, sp, #0
 800671c:	60f8      	str	r0, [r7, #12]
 800671e:	60b9      	str	r1, [r7, #8]
 8006720:	4611      	mov	r1, r2
 8006722:	461a      	mov	r2, r3
 8006724:	460b      	mov	r3, r1
 8006726:	71fb      	strb	r3, [r7, #7]
 8006728:	4613      	mov	r3, r2
 800672a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006734:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006738:	2b00      	cmp	r3, #0
 800673a:	d11a      	bne.n	8006772 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800673c:	88bb      	ldrh	r3, [r7, #4]
 800673e:	3303      	adds	r3, #3
 8006740:	089b      	lsrs	r3, r3, #2
 8006742:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006744:	2300      	movs	r3, #0
 8006746:	61bb      	str	r3, [r7, #24]
 8006748:	e00f      	b.n	800676a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800674a:	79fb      	ldrb	r3, [r7, #7]
 800674c:	031a      	lsls	r2, r3, #12
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	4413      	add	r3, r2
 8006752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006756:	461a      	mov	r2, r3
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	3304      	adds	r3, #4
 8006762:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	3301      	adds	r3, #1
 8006768:	61bb      	str	r3, [r7, #24]
 800676a:	69ba      	ldr	r2, [r7, #24]
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	429a      	cmp	r2, r3
 8006770:	d3eb      	bcc.n	800674a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006772:	2300      	movs	r3, #0
}
 8006774:	4618      	mov	r0, r3
 8006776:	3724      	adds	r7, #36	; 0x24
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006780:	b480      	push	{r7}
 8006782:	b089      	sub	sp, #36	; 0x24
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	4613      	mov	r3, r2
 800678c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006796:	88fb      	ldrh	r3, [r7, #6]
 8006798:	3303      	adds	r3, #3
 800679a:	089b      	lsrs	r3, r3, #2
 800679c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800679e:	2300      	movs	r3, #0
 80067a0:	61bb      	str	r3, [r7, #24]
 80067a2:	e00b      	b.n	80067bc <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	601a      	str	r2, [r3, #0]
    pDest++;
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	3304      	adds	r3, #4
 80067b4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	3301      	adds	r3, #1
 80067ba:	61bb      	str	r3, [r7, #24]
 80067bc:	69ba      	ldr	r2, [r7, #24]
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d3ef      	bcc.n	80067a4 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80067c4:	69fb      	ldr	r3, [r7, #28]
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3724      	adds	r7, #36	; 0x24
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr

080067d2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80067d2:	b480      	push	{r7}
 80067d4:	b085      	sub	sp, #20
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
 80067da:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	785b      	ldrb	r3, [r3, #1]
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d12c      	bne.n	8006848 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	015a      	lsls	r2, r3, #5
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	4413      	add	r3, r2
 80067f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	db12      	blt.n	8006826 <USB_EPSetStall+0x54>
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00f      	beq.n	8006826 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	015a      	lsls	r2, r3, #5
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	4413      	add	r3, r2
 800680e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	68ba      	ldr	r2, [r7, #8]
 8006816:	0151      	lsls	r1, r2, #5
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	440a      	add	r2, r1
 800681c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006820:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006824:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	015a      	lsls	r2, r3, #5
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	4413      	add	r3, r2
 800682e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68ba      	ldr	r2, [r7, #8]
 8006836:	0151      	lsls	r1, r2, #5
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	440a      	add	r2, r1
 800683c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006840:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006844:	6013      	str	r3, [r2, #0]
 8006846:	e02b      	b.n	80068a0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	015a      	lsls	r2, r3, #5
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	4413      	add	r3, r2
 8006850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2b00      	cmp	r3, #0
 8006858:	db12      	blt.n	8006880 <USB_EPSetStall+0xae>
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d00f      	beq.n	8006880 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	015a      	lsls	r2, r3, #5
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	4413      	add	r3, r2
 8006868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	68ba      	ldr	r2, [r7, #8]
 8006870:	0151      	lsls	r1, r2, #5
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	440a      	add	r2, r1
 8006876:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800687a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800687e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	015a      	lsls	r2, r3, #5
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	4413      	add	r3, r2
 8006888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68ba      	ldr	r2, [r7, #8]
 8006890:	0151      	lsls	r1, r2, #5
 8006892:	68fa      	ldr	r2, [r7, #12]
 8006894:	440a      	add	r2, r1
 8006896:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800689a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800689e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3714      	adds	r7, #20
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr

080068ae <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80068ae:	b480      	push	{r7}
 80068b0:	b085      	sub	sp, #20
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
 80068b6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	785b      	ldrb	r3, [r3, #1]
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d128      	bne.n	800691c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	015a      	lsls	r2, r3, #5
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	4413      	add	r3, r2
 80068d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	68ba      	ldr	r2, [r7, #8]
 80068da:	0151      	lsls	r1, r2, #5
 80068dc:	68fa      	ldr	r2, [r7, #12]
 80068de:	440a      	add	r2, r1
 80068e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80068e8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	78db      	ldrb	r3, [r3, #3]
 80068ee:	2b03      	cmp	r3, #3
 80068f0:	d003      	beq.n	80068fa <USB_EPClearStall+0x4c>
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	78db      	ldrb	r3, [r3, #3]
 80068f6:	2b02      	cmp	r3, #2
 80068f8:	d138      	bne.n	800696c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	015a      	lsls	r2, r3, #5
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	4413      	add	r3, r2
 8006902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	68ba      	ldr	r2, [r7, #8]
 800690a:	0151      	lsls	r1, r2, #5
 800690c:	68fa      	ldr	r2, [r7, #12]
 800690e:	440a      	add	r2, r1
 8006910:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006918:	6013      	str	r3, [r2, #0]
 800691a:	e027      	b.n	800696c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	015a      	lsls	r2, r3, #5
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	4413      	add	r3, r2
 8006924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	68ba      	ldr	r2, [r7, #8]
 800692c:	0151      	lsls	r1, r2, #5
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	440a      	add	r2, r1
 8006932:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006936:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800693a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	78db      	ldrb	r3, [r3, #3]
 8006940:	2b03      	cmp	r3, #3
 8006942:	d003      	beq.n	800694c <USB_EPClearStall+0x9e>
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	78db      	ldrb	r3, [r3, #3]
 8006948:	2b02      	cmp	r3, #2
 800694a:	d10f      	bne.n	800696c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	015a      	lsls	r2, r3, #5
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	4413      	add	r3, r2
 8006954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	68ba      	ldr	r2, [r7, #8]
 800695c:	0151      	lsls	r1, r2, #5
 800695e:	68fa      	ldr	r2, [r7, #12]
 8006960:	440a      	add	r2, r1
 8006962:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800696a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3714      	adds	r7, #20
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr

0800697a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800697a:	b480      	push	{r7}
 800697c:	b085      	sub	sp, #20
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
 8006982:	460b      	mov	r3, r1
 8006984:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006998:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800699c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	78fb      	ldrb	r3, [r7, #3]
 80069a8:	011b      	lsls	r3, r3, #4
 80069aa:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80069ae:	68f9      	ldr	r1, [r7, #12]
 80069b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069b4:	4313      	orrs	r3, r2
 80069b6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3714      	adds	r7, #20
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr

080069c6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80069c6:	b480      	push	{r7}
 80069c8:	b085      	sub	sp, #20
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80069e0:	f023 0303 	bic.w	r3, r3, #3
 80069e4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	68fa      	ldr	r2, [r7, #12]
 80069f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069f4:	f023 0302 	bic.w	r3, r3, #2
 80069f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80069fa:	2300      	movs	r3, #0
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3714      	adds	r7, #20
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b085      	sub	sp, #20
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006a22:	f023 0303 	bic.w	r3, r3, #3
 8006a26:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a36:	f043 0302 	orr.w	r3, r3, #2
 8006a3a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3714      	adds	r7, #20
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr

08006a4a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006a4a:	b480      	push	{r7}
 8006a4c:	b085      	sub	sp, #20
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	695b      	ldr	r3, [r3, #20]
 8006a56:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	699b      	ldr	r3, [r3, #24]
 8006a5c:	68fa      	ldr	r2, [r7, #12]
 8006a5e:	4013      	ands	r3, r2
 8006a60:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006a62:	68fb      	ldr	r3, [r7, #12]
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3714      	adds	r7, #20
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b085      	sub	sp, #20
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a82:	699b      	ldr	r3, [r3, #24]
 8006a84:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a8c:	69db      	ldr	r3, [r3, #28]
 8006a8e:	68ba      	ldr	r2, [r7, #8]
 8006a90:	4013      	ands	r3, r2
 8006a92:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	0c1b      	lsrs	r3, r3, #16
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3714      	adds	r7, #20
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b085      	sub	sp, #20
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ab6:	699b      	ldr	r3, [r3, #24]
 8006ab8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ac0:	69db      	ldr	r3, [r3, #28]
 8006ac2:	68ba      	ldr	r2, [r7, #8]
 8006ac4:	4013      	ands	r3, r2
 8006ac6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	b29b      	uxth	r3, r3
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3714      	adds	r7, #20
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b085      	sub	sp, #20
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006ae8:	78fb      	ldrb	r3, [r7, #3]
 8006aea:	015a      	lsls	r2, r3, #5
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	4413      	add	r3, r2
 8006af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006afe:	695b      	ldr	r3, [r3, #20]
 8006b00:	68ba      	ldr	r2, [r7, #8]
 8006b02:	4013      	ands	r3, r2
 8006b04:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006b06:	68bb      	ldr	r3, [r7, #8]
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3714      	adds	r7, #20
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b087      	sub	sp, #28
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b2a:	691b      	ldr	r3, [r3, #16]
 8006b2c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b36:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006b38:	78fb      	ldrb	r3, [r7, #3]
 8006b3a:	f003 030f 	and.w	r3, r3, #15
 8006b3e:	68fa      	ldr	r2, [r7, #12]
 8006b40:	fa22 f303 	lsr.w	r3, r2, r3
 8006b44:	01db      	lsls	r3, r3, #7
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	693a      	ldr	r2, [r7, #16]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006b4e:	78fb      	ldrb	r3, [r7, #3]
 8006b50:	015a      	lsls	r2, r3, #5
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	4413      	add	r3, r2
 8006b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	693a      	ldr	r2, [r7, #16]
 8006b5e:	4013      	ands	r3, r2
 8006b60:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006b62:	68bb      	ldr	r3, [r7, #8]
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	371c      	adds	r7, #28
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	695b      	ldr	r3, [r3, #20]
 8006b7c:	f003 0301 	and.w	r3, r3, #1
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b085      	sub	sp, #20
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	68fa      	ldr	r2, [r7, #12]
 8006ba2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ba6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006baa:	f023 0307 	bic.w	r3, r3, #7
 8006bae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bc2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3714      	adds	r7, #20
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr
	...

08006bd4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b087      	sub	sp, #28
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	460b      	mov	r3, r1
 8006bde:	607a      	str	r2, [r7, #4]
 8006be0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	333c      	adds	r3, #60	; 0x3c
 8006bea:	3304      	adds	r3, #4
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	4a26      	ldr	r2, [pc, #152]	; (8006c8c <USB_EP0_OutStart+0xb8>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d90a      	bls.n	8006c0e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c08:	d101      	bne.n	8006c0e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	e037      	b.n	8006c7e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c14:	461a      	mov	r2, r3
 8006c16:	2300      	movs	r3, #0
 8006c18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c20:	691b      	ldr	r3, [r3, #16]
 8006c22:	697a      	ldr	r2, [r7, #20]
 8006c24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c2c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c34:	691b      	ldr	r3, [r3, #16]
 8006c36:	697a      	ldr	r2, [r7, #20]
 8006c38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c3c:	f043 0318 	orr.w	r3, r3, #24
 8006c40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	697a      	ldr	r2, [r7, #20]
 8006c4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c50:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006c54:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006c56:	7afb      	ldrb	r3, [r7, #11]
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d10f      	bne.n	8006c7c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c62:	461a      	mov	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	697a      	ldr	r2, [r7, #20]
 8006c72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c76:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006c7a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	371c      	adds	r7, #28
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr
 8006c8a:	bf00      	nop
 8006c8c:	4f54300a 	.word	0x4f54300a

08006c90 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b085      	sub	sp, #20
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	60fb      	str	r3, [r7, #12]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	4a13      	ldr	r2, [pc, #76]	; (8006cf4 <USB_CoreReset+0x64>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d901      	bls.n	8006cae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006caa:	2303      	movs	r3, #3
 8006cac:	e01b      	b.n	8006ce6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	daf2      	bge.n	8006c9c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	691b      	ldr	r3, [r3, #16]
 8006cbe:	f043 0201 	orr.w	r2, r3, #1
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	3301      	adds	r3, #1
 8006cca:	60fb      	str	r3, [r7, #12]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	4a09      	ldr	r2, [pc, #36]	; (8006cf4 <USB_CoreReset+0x64>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d901      	bls.n	8006cd8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006cd4:	2303      	movs	r3, #3
 8006cd6:	e006      	b.n	8006ce6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	691b      	ldr	r3, [r3, #16]
 8006cdc:	f003 0301 	and.w	r3, r3, #1
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d0f0      	beq.n	8006cc6 <USB_CoreReset+0x36>

  return HAL_OK;
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3714      	adds	r7, #20
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr
 8006cf2:	bf00      	nop
 8006cf4:	00030d40 	.word	0x00030d40

08006cf8 <tmc_glue_send_data>:
	.reserved_subclass = {0},
	.interface_capabilities = USB_TMC_INTERFACE_CAPABILITY_INDICATOR_PULSE,
	.device_capabilities = 0
};

void tmc_glue_send_data(uint8_t *buf, size_t len) {
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
	memcpy(&output_buffer[output_buffer_idx], buf, len);
 8006d02:	4b10      	ldr	r3, [pc, #64]	; (8006d44 <tmc_glue_send_data+0x4c>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a10      	ldr	r2, [pc, #64]	; (8006d48 <tmc_glue_send_data+0x50>)
 8006d08:	4413      	add	r3, r2
 8006d0a:	683a      	ldr	r2, [r7, #0]
 8006d0c:	6879      	ldr	r1, [r7, #4]
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f004 f8eb 	bl	800aeea <memcpy>
	if (output_buffer_idx + len > sizeof(output_buffer)) {
 8006d14:	4b0b      	ldr	r3, [pc, #44]	; (8006d44 <tmc_glue_send_data+0x4c>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	461a      	mov	r2, r3
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	4413      	add	r3, r2
 8006d1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d22:	d902      	bls.n	8006d2a <tmc_glue_send_data+0x32>
		printf("OOPS output buffer overflow!\n");
 8006d24:	4809      	ldr	r0, [pc, #36]	; (8006d4c <tmc_glue_send_data+0x54>)
 8006d26:	f004 f9ad 	bl	800b084 <puts>
	}
	output_buffer_idx += len;
 8006d2a:	4b06      	ldr	r3, [pc, #24]	; (8006d44 <tmc_glue_send_data+0x4c>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	461a      	mov	r2, r3
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	4413      	add	r3, r2
 8006d34:	461a      	mov	r2, r3
 8006d36:	4b03      	ldr	r3, [pc, #12]	; (8006d44 <tmc_glue_send_data+0x4c>)
 8006d38:	601a      	str	r2, [r3, #0]
}
 8006d3a:	bf00      	nop
 8006d3c:	3708      	adds	r7, #8
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
 8006d42:	bf00      	nop
 8006d44:	20000dd4 	.word	0x20000dd4
 8006d48:	20001120 	.word	0x20001120
 8006d4c:	0800e6b8 	.word	0x0800e6b8

08006d50 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	460b      	mov	r3, r1
 8006d5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006d5c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006d60:	f004 f852 	bl	800ae08 <USBD_static_malloc>
 8006d64:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d105      	bne.n	8006d78 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006d74:	2302      	movs	r3, #2
 8006d76:	e065      	b.n	8006e44 <USBD_CDC_Init+0xf4>
  }

  pdev->pClassData = (void *)hcdc;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	68fa      	ldr	r2, [r7, #12]
 8006d7c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	7c1b      	ldrb	r3, [r3, #16]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d119      	bne.n	8006dbc <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006d88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d8c:	2202      	movs	r2, #2
 8006d8e:	2182      	movs	r1, #130	; 0x82
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f003 ff16 	bl	800abc2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006d9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006da2:	2202      	movs	r2, #2
 8006da4:	2101      	movs	r1, #1
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f003 ff0b 	bl	800abc2 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2201      	movs	r2, #1
 8006db0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2210      	movs	r2, #16
 8006db8:	875a      	strh	r2, [r3, #58]	; 0x3a
 8006dba:	e016      	b.n	8006dea <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006dbc:	2340      	movs	r3, #64	; 0x40
 8006dbe:	2202      	movs	r2, #2
 8006dc0:	2182      	movs	r1, #130	; 0x82
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f003 fefd 	bl	800abc2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006dd0:	2340      	movs	r3, #64	; 0x40
 8006dd2:	2202      	movs	r2, #2
 8006dd4:	2101      	movs	r1, #1
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f003 fef3 	bl	800abc2 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2210      	movs	r2, #16
 8006de8:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006dea:	2308      	movs	r3, #8
 8006dec:	2203      	movs	r2, #3
 8006dee:	2181      	movs	r1, #129	; 0x81
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f003 fee6 	bl	800abc2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2201      	movs	r2, #1
 8006dfa:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	7c1b      	ldrb	r3, [r3, #16]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d109      	bne.n	8006e32 <USBD_CDC_Init+0xe2>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e28:	2101      	movs	r1, #1
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f003 ffb8 	bl	800ada0 <USBD_LL_PrepareReceive>
 8006e30:	e007      	b.n	8006e42 <USBD_CDC_Init+0xf2>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e38:	2340      	movs	r3, #64	; 0x40
 8006e3a:	2101      	movs	r1, #1
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f003 ffaf 	bl	800ada0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006e42:	2300      	movs	r3, #0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3710      	adds	r7, #16
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	460b      	mov	r3, r1
 8006e56:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006e5c:	2182      	movs	r1, #130	; 0x82
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f003 fed5 	bl	800ac0e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006e6c:	2101      	movs	r1, #1
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f003 fecd 	bl	800ac0e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006e7c:	2181      	movs	r1, #129	; 0x81
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f003 fec5 	bl	800ac0e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00e      	beq.n	8006eb8 <USBD_CDC_DeInit+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f003 ffba 	bl	800ae24 <USBD_static_free>
    pdev->pClassData = NULL;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8006eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3710      	adds	r7, #16
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
	...

08006ec4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b086      	sub	sp, #24
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ed4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006eda:	2300      	movs	r3, #0
 8006edc:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d03a      	beq.n	8006f64 <USBD_CDC_Setup+0xa0>
 8006eee:	2b20      	cmp	r3, #32
 8006ef0:	f040 809a 	bne.w	8007028 <USBD_CDC_Setup+0x164>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	88db      	ldrh	r3, [r3, #6]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d029      	beq.n	8006f50 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	b25b      	sxtb	r3, r3
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	da11      	bge.n	8006f2a <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	683a      	ldr	r2, [r7, #0]
 8006f10:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8006f12:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006f14:	683a      	ldr	r2, [r7, #0]
 8006f16:	88d2      	ldrh	r2, [r2, #6]
 8006f18:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006f1a:	6939      	ldr	r1, [r7, #16]
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	88db      	ldrh	r3, [r3, #6]
 8006f20:	461a      	mov	r2, r3
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f003 f9bb 	bl	800a29e <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8006f28:	e085      	b.n	8007036 <USBD_CDC_Setup+0x172>
        hcdc->CmdOpCode = req->bRequest;
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	785a      	ldrb	r2, [r3, #1]
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	88db      	ldrh	r3, [r3, #6]
 8006f38:	b2da      	uxtb	r2, r3
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006f40:	6939      	ldr	r1, [r7, #16]
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	88db      	ldrh	r3, [r3, #6]
 8006f46:	461a      	mov	r2, r3
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f003 f9d4 	bl	800a2f6 <USBD_CtlPrepareRx>
    break;
 8006f4e:	e072      	b.n	8007036 <USBD_CDC_Setup+0x172>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	683a      	ldr	r2, [r7, #0]
 8006f5a:	7850      	ldrb	r0, [r2, #1]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	6839      	ldr	r1, [r7, #0]
 8006f60:	4798      	blx	r3
    break;
 8006f62:	e068      	b.n	8007036 <USBD_CDC_Setup+0x172>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	785b      	ldrb	r3, [r3, #1]
 8006f68:	2b0b      	cmp	r3, #11
 8006f6a:	d852      	bhi.n	8007012 <USBD_CDC_Setup+0x14e>
 8006f6c:	a201      	add	r2, pc, #4	; (adr r2, 8006f74 <USBD_CDC_Setup+0xb0>)
 8006f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f72:	bf00      	nop
 8006f74:	08006fa5 	.word	0x08006fa5
 8006f78:	08007021 	.word	0x08007021
 8006f7c:	08007013 	.word	0x08007013
 8006f80:	08007013 	.word	0x08007013
 8006f84:	08007013 	.word	0x08007013
 8006f88:	08007013 	.word	0x08007013
 8006f8c:	08007013 	.word	0x08007013
 8006f90:	08007013 	.word	0x08007013
 8006f94:	08007013 	.word	0x08007013
 8006f98:	08007013 	.word	0x08007013
 8006f9c:	08006fcf 	.word	0x08006fcf
 8006fa0:	08006ff9 	.word	0x08006ff9
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	2b03      	cmp	r3, #3
 8006fae:	d107      	bne.n	8006fc0 <USBD_CDC_Setup+0xfc>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006fb0:	f107 030c 	add.w	r3, r7, #12
 8006fb4:	2202      	movs	r2, #2
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f003 f970 	bl	800a29e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006fbe:	e032      	b.n	8007026 <USBD_CDC_Setup+0x162>
        USBD_CtlError(pdev, req);
 8006fc0:	6839      	ldr	r1, [r7, #0]
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f003 f8fa 	bl	800a1bc <USBD_CtlError>
        ret = USBD_FAIL;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	75fb      	strb	r3, [r7, #23]
      break;
 8006fcc:	e02b      	b.n	8007026 <USBD_CDC_Setup+0x162>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	2b03      	cmp	r3, #3
 8006fd8:	d107      	bne.n	8006fea <USBD_CDC_Setup+0x126>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006fda:	f107 030f 	add.w	r3, r7, #15
 8006fde:	2201      	movs	r2, #1
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f003 f95b 	bl	800a29e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006fe8:	e01d      	b.n	8007026 <USBD_CDC_Setup+0x162>
        USBD_CtlError(pdev, req);
 8006fea:	6839      	ldr	r1, [r7, #0]
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f003 f8e5 	bl	800a1bc <USBD_CtlError>
        ret = USBD_FAIL;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	75fb      	strb	r3, [r7, #23]
      break;
 8006ff6:	e016      	b.n	8007026 <USBD_CDC_Setup+0x162>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	2b03      	cmp	r3, #3
 8007002:	d00f      	beq.n	8007024 <USBD_CDC_Setup+0x160>
      {
        USBD_CtlError(pdev, req);
 8007004:	6839      	ldr	r1, [r7, #0]
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f003 f8d8 	bl	800a1bc <USBD_CtlError>
        ret = USBD_FAIL;
 800700c:	2303      	movs	r3, #3
 800700e:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007010:	e008      	b.n	8007024 <USBD_CDC_Setup+0x160>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8007012:	6839      	ldr	r1, [r7, #0]
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f003 f8d1 	bl	800a1bc <USBD_CtlError>
      ret = USBD_FAIL;
 800701a:	2303      	movs	r3, #3
 800701c:	75fb      	strb	r3, [r7, #23]
      break;
 800701e:	e002      	b.n	8007026 <USBD_CDC_Setup+0x162>
      break;
 8007020:	bf00      	nop
 8007022:	e008      	b.n	8007036 <USBD_CDC_Setup+0x172>
      break;
 8007024:	bf00      	nop
    }
    break;
 8007026:	e006      	b.n	8007036 <USBD_CDC_Setup+0x172>

  default:
    USBD_CtlError(pdev, req);
 8007028:	6839      	ldr	r1, [r7, #0]
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f003 f8c6 	bl	800a1bc <USBD_CtlError>
    ret = USBD_FAIL;
 8007030:	2303      	movs	r3, #3
 8007032:	75fb      	strb	r3, [r7, #23]
    break;
 8007034:	bf00      	nop
  }

  return (uint8_t)ret;
 8007036:	7dfb      	ldrb	r3, [r7, #23]
}
 8007038:	4618      	mov	r0, r3
 800703a:	3718      	adds	r7, #24
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	460b      	mov	r3, r1
 800704a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007052:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800705a:	2b00      	cmp	r3, #0
 800705c:	d101      	bne.n	8007062 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800705e:	2303      	movs	r3, #3
 8007060:	e049      	b.n	80070f6 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007068:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800706a:	78fa      	ldrb	r2, [r7, #3]
 800706c:	6879      	ldr	r1, [r7, #4]
 800706e:	4613      	mov	r3, r2
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	4413      	add	r3, r2
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	440b      	add	r3, r1
 8007078:	3318      	adds	r3, #24
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d029      	beq.n	80070d4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007080:	78fa      	ldrb	r2, [r7, #3]
 8007082:	6879      	ldr	r1, [r7, #4]
 8007084:	4613      	mov	r3, r2
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	4413      	add	r3, r2
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	440b      	add	r3, r1
 800708e:	3318      	adds	r3, #24
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	78f9      	ldrb	r1, [r7, #3]
 8007094:	68f8      	ldr	r0, [r7, #12]
 8007096:	460b      	mov	r3, r1
 8007098:	00db      	lsls	r3, r3, #3
 800709a:	1a5b      	subs	r3, r3, r1
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	4403      	add	r3, r0
 80070a0:	3344      	adds	r3, #68	; 0x44
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	fbb2 f1f3 	udiv	r1, r2, r3
 80070a8:	fb03 f301 	mul.w	r3, r3, r1
 80070ac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d110      	bne.n	80070d4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80070b2:	78fa      	ldrb	r2, [r7, #3]
 80070b4:	6879      	ldr	r1, [r7, #4]
 80070b6:	4613      	mov	r3, r2
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	4413      	add	r3, r2
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	440b      	add	r3, r1
 80070c0:	3318      	adds	r3, #24
 80070c2:	2200      	movs	r2, #0
 80070c4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80070c6:	78f9      	ldrb	r1, [r7, #3]
 80070c8:	2300      	movs	r3, #0
 80070ca:	2200      	movs	r2, #0
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f003 fe46 	bl	800ad5e <USBD_LL_Transmit>
 80070d2:	e00f      	b.n	80070f4 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	68ba      	ldr	r2, [r7, #8]
 80070e6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80070ea:	68ba      	ldr	r2, [r7, #8]
 80070ec:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80070f0:	78fa      	ldrb	r2, [r7, #3]
 80070f2:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3710      	adds	r7, #16
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}

080070fe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80070fe:	b580      	push	{r7, lr}
 8007100:	b084      	sub	sp, #16
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
 8007106:	460b      	mov	r3, r1
 8007108:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007110:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007118:	2b00      	cmp	r3, #0
 800711a:	d101      	bne.n	8007120 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800711c:	2303      	movs	r3, #3
 800711e:	e015      	b.n	800714c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007120:	78fb      	ldrb	r3, [r7, #3]
 8007122:	4619      	mov	r1, r3
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f003 fe5c 	bl	800ade2 <USBD_LL_GetRxDataSize>
 800712a:	4602      	mov	r2, r0
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007138:	68db      	ldr	r3, [r3, #12]
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007140:	68fa      	ldr	r2, [r7, #12]
 8007142:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007146:	4611      	mov	r1, r2
 8007148:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800714a:	2300      	movs	r3, #0
}
 800714c:	4618      	mov	r0, r3
 800714e:	3710      	adds	r7, #16
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007162:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d015      	beq.n	800719a <USBD_CDC_EP0_RxReady+0x46>
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007174:	2bff      	cmp	r3, #255	; 0xff
 8007176:	d010      	beq.n	800719a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	68fa      	ldr	r2, [r7, #12]
 8007182:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007186:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800718e:	b292      	uxth	r2, r2
 8007190:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	22ff      	movs	r2, #255	; 0xff
 8007196:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800719a:	2300      	movs	r3, #0
}
 800719c:	4618      	mov	r0, r3
 800719e:	3710      	adds	r7, #16
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b083      	sub	sp, #12
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2227      	movs	r2, #39	; 0x27
 80071b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80071b2:	4b03      	ldr	r3, [pc, #12]	; (80071c0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr
 80071c0:	200009c8 	.word	0x200009c8

080071c4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2227      	movs	r2, #39	; 0x27
 80071d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80071d2:	4b03      	ldr	r3, [pc, #12]	; (80071e0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr
 80071e0:	200009a0 	.word	0x200009a0

080071e4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2227      	movs	r2, #39	; 0x27
 80071f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80071f2:	4b03      	ldr	r3, [pc, #12]	; (8007200 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	370c      	adds	r7, #12
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr
 8007200:	200009f0 	.word	0x200009f0

08007204 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	220a      	movs	r2, #10
 8007210:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007212:	4b03      	ldr	r3, [pc, #12]	; (8007220 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007214:	4618      	mov	r0, r3
 8007216:	370c      	adds	r7, #12
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr
 8007220:	2000095c 	.word	0x2000095c

08007224 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d101      	bne.n	8007238 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007234:	2303      	movs	r3, #3
 8007236:	e004      	b.n	8007242 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	683a      	ldr	r2, [r7, #0]
 800723c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	370c      	adds	r7, #12
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr

0800724e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800724e:	b480      	push	{r7}
 8007250:	b087      	sub	sp, #28
 8007252:	af00      	add	r7, sp, #0
 8007254:	60f8      	str	r0, [r7, #12]
 8007256:	60b9      	str	r1, [r7, #8]
 8007258:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007260:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	68ba      	ldr	r2, [r7, #8]
 8007266:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007272:	2300      	movs	r3, #0
}
 8007274:	4618      	mov	r0, r3
 8007276:	371c      	adds	r7, #28
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007280:	b480      	push	{r7}
 8007282:	b085      	sub	sp, #20
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007290:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	683a      	ldr	r2, [r7, #0]
 8007296:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800729a:	2300      	movs	r3, #0
}
 800729c:	4618      	mov	r0, r3
 800729e:	3714      	adds	r7, #20
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072b6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80072b8:	2301      	movs	r3, #1
 80072ba:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d101      	bne.n	80072ca <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80072c6:	2303      	movs	r3, #3
 80072c8:	e01a      	b.n	8007300 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d114      	bne.n	80072fe <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	2201      	movs	r2, #1
 80072d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80072f2:	2182      	movs	r1, #130	; 0x82
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f003 fd32 	bl	800ad5e <USBD_LL_Transmit>

    ret = USBD_OK;
 80072fa:	2300      	movs	r3, #0
 80072fc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80072fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007300:	4618      	mov	r0, r3
 8007302:	3710      	adds	r7, #16
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007316:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800731e:	2b00      	cmp	r3, #0
 8007320:	d101      	bne.n	8007326 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007322:	2303      	movs	r3, #3
 8007324:	e016      	b.n	8007354 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	7c1b      	ldrb	r3, [r3, #16]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d109      	bne.n	8007342 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007334:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007338:	2101      	movs	r1, #1
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f003 fd30 	bl	800ada0 <USBD_LL_PrepareReceive>
 8007340:	e007      	b.n	8007352 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007348:	2340      	movs	r3, #64	; 0x40
 800734a:	2101      	movs	r1, #1
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f003 fd27 	bl	800ada0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007352:	2300      	movs	r3, #0
}
 8007354:	4618      	mov	r0, r3
 8007356:	3710      	adds	r7, #16
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <SCPI_ErrorInit>:
/* basic FIFO */
static fifo_t local_error_queue;



void SCPI_ErrorInit(scpi_t * context) {
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
     * // FreeRTOS
     * context->error_queue = (scpi_error_queue_t)xQueueCreate(100, sizeof(int16_t));
     */

    /* basic FIFO */
    context->error_queue = (scpi_error_queue_t)&local_error_queue;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	4a05      	ldr	r2, [pc, #20]	; (800737c <SCPI_ErrorInit+0x20>)
 8007368:	62da      	str	r2, [r3, #44]	; 0x2c
    fifo_init((fifo_t *)context->error_queue);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800736e:	4618      	mov	r0, r3
 8007370:	f000 f936 	bl	80075e0 <fifo_init>
}
 8007374:	bf00      	nop
 8007376:	3708      	adds	r7, #8
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}
 800737c:	20000dd8 	.word	0x20000dd8

08007380 <SCPI_ErrorPop>:
/**
 * Pop error from queue
 * @param context - scpi context
 * @return error number
 */
int16_t SCPI_ErrorPop(scpi_t * context) {
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
    int16_t result = 0;
 8007388:	2300      	movs	r3, #0
 800738a:	81fb      	strh	r3, [r7, #14]
     *   result = 0;
     * }
     */

    /* basic FIFO */
    fifo_remove((fifo_t *)context->error_queue, &result);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007390:	f107 020e 	add.w	r2, r7, #14
 8007394:	4611      	mov	r1, r2
 8007396:	4618      	mov	r0, r3
 8007398:	f000 f973 	bl	8007682 <fifo_remove>

    return result;
 800739c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3710      	adds	r7, #16
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <SCPI_ErrorCount>:
/**
 * Return number of errors/events in the queue
 * @param context
 * @return 
 */
int32_t SCPI_ErrorCount(scpi_t * context) {
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
    int16_t result = 0;
 80073b0:	2300      	movs	r3, #0
 80073b2:	81fb      	strh	r3, [r7, #14]
     * // FreeRTOS
     * result = uxQueueMessagesWaiting((xQueueHandle)context->error_queue);
     */

    /* basic FIFO */
    fifo_count((fifo_t *)context->error_queue, &result);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b8:	f107 020e 	add.w	r2, r7, #14
 80073bc:	4611      	mov	r1, r2
 80073be:	4618      	mov	r0, r3
 80073c0:	f000 f992 	bl	80076e8 <fifo_count>

    return result;
 80073c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3710      	adds	r7, #16
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <SCPI_ErrorAddInternal>:

static void SCPI_ErrorAddInternal(scpi_t * context, int16_t err) {
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	460b      	mov	r3, r1
 80073da:	807b      	strh	r3, [r7, #2]
     * // FreeRTOS
     * xQueueSend((xQueueHandle)context->error_queue, &err, 0);
     */

    /* basic FIFO */
    fifo_add((fifo_t *)context->error_queue, err);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80073e4:	4611      	mov	r1, r2
 80073e6:	4618      	mov	r0, r3
 80073e8:	f000 f90d 	bl	8007606 <fifo_add>
}
 80073ec:	bf00      	nop
 80073ee:	3708      	adds	r7, #8
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <SCPI_ErrorPush>:
/**
 * Push error to queue
 * @param context - scpi context
 * @param err - error number
 */
void SCPI_ErrorPush(scpi_t * context, int16_t err) {
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	460b      	mov	r3, r1
 80073fe:	807b      	strh	r3, [r7, #2]

    int i;

    SCPI_ErrorAddInternal(context, err);
 8007400:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007404:	4619      	mov	r1, r3
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f7ff ffe2 	bl	80073d0 <SCPI_ErrorAddInternal>

    for(i = 0; i < ERROR_DEFS_N; i++) {
 800740c:	2300      	movs	r3, #0
 800740e:	60fb      	str	r3, [r7, #12]
 8007410:	e02b      	b.n	800746a <SCPI_ErrorPush+0x76>
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
 8007412:	4925      	ldr	r1, [pc, #148]	; (80074a8 <SCPI_ErrorPush+0xb4>)
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	4613      	mov	r3, r2
 8007418:	005b      	lsls	r3, r3, #1
 800741a:	4413      	add	r3, r2
 800741c:	005b      	lsls	r3, r3, #1
 800741e:	440b      	add	r3, r1
 8007420:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007424:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8007428:	429a      	cmp	r2, r3
 800742a:	dc1b      	bgt.n	8007464 <SCPI_ErrorPush+0x70>
 800742c:	491e      	ldr	r1, [pc, #120]	; (80074a8 <SCPI_ErrorPush+0xb4>)
 800742e:	68fa      	ldr	r2, [r7, #12]
 8007430:	4613      	mov	r3, r2
 8007432:	005b      	lsls	r3, r3, #1
 8007434:	4413      	add	r3, r2
 8007436:	005b      	lsls	r3, r3, #1
 8007438:	440b      	add	r3, r1
 800743a:	3302      	adds	r3, #2
 800743c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007440:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8007444:	429a      	cmp	r2, r3
 8007446:	db0d      	blt.n	8007464 <SCPI_ErrorPush+0x70>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].bit);
 8007448:	4917      	ldr	r1, [pc, #92]	; (80074a8 <SCPI_ErrorPush+0xb4>)
 800744a:	68fa      	ldr	r2, [r7, #12]
 800744c:	4613      	mov	r3, r2
 800744e:	005b      	lsls	r3, r3, #1
 8007450:	4413      	add	r3, r2
 8007452:	005b      	lsls	r3, r3, #1
 8007454:	440b      	add	r3, r1
 8007456:	3304      	adds	r3, #4
 8007458:	881b      	ldrh	r3, [r3, #0]
 800745a:	461a      	mov	r2, r3
 800745c:	2102      	movs	r1, #2
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 fa8a 	bl	8007978 <SCPI_RegSetBits>
    for(i = 0; i < ERROR_DEFS_N; i++) {
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	3301      	adds	r3, #1
 8007468:	60fb      	str	r3, [r7, #12]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2b07      	cmp	r3, #7
 800746e:	ddd0      	ble.n	8007412 <SCPI_ErrorPush+0x1e>
        }
    }

    if (context) {
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d014      	beq.n	80074a0 <SCPI_ErrorPush+0xac>
        if (context->interface && context->interface->error) {
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	69db      	ldr	r3, [r3, #28]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d00c      	beq.n	8007498 <SCPI_ErrorPush+0xa4>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	69db      	ldr	r3, [r3, #28]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d007      	beq.n	8007498 <SCPI_ErrorPush+0xa4>
            context->interface->error(context, err);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	69db      	ldr	r3, [r3, #28]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8007492:	4611      	mov	r1, r2
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	4798      	blx	r3
        }

        context->cmd_error = TRUE;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }
}
 80074a0:	bf00      	nop
 80074a2:	3710      	adds	r7, #16
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}
 80074a8:	0800ea0c 	.word	0x0800ea0c

080074ac <SCPI_ErrorTranslate>:
/**
 * Translate error number to string
 * @param err - error number
 * @return Error string representation
 */
const char * SCPI_ErrorTranslate(int16_t err) {
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	4603      	mov	r3, r0
 80074b4:	80fb      	strh	r3, [r7, #6]
    switch (err) {
 80074b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d05e      	beq.n	800757c <SCPI_ErrorTranslate+0xd0>
 80074be:	2b00      	cmp	r3, #0
 80074c0:	dc70      	bgt.n	80075a4 <SCPI_ErrorTranslate+0xf8>
 80074c2:	f113 0f66 	cmn.w	r3, #102	; 0x66
 80074c6:	dc6d      	bgt.n	80075a4 <SCPI_ErrorTranslate+0xf8>
 80074c8:	f113 0f8a 	cmn.w	r3, #138	; 0x8a
 80074cc:	da06      	bge.n	80074dc <SCPI_ErrorTranslate+0x30>
 80074ce:	f113 0fe0 	cmn.w	r3, #224	; 0xe0
 80074d2:	d065      	beq.n	80075a0 <SCPI_ErrorTranslate+0xf4>
 80074d4:	f113 0fc8 	cmn.w	r3, #200	; 0xc8
 80074d8:	d060      	beq.n	800759c <SCPI_ErrorTranslate+0xf0>
 80074da:	e063      	b.n	80075a4 <SCPI_ErrorTranslate+0xf8>
 80074dc:	338a      	adds	r3, #138	; 0x8a
 80074de:	2b24      	cmp	r3, #36	; 0x24
 80074e0:	d860      	bhi.n	80075a4 <SCPI_ErrorTranslate+0xf8>
 80074e2:	a201      	add	r2, pc, #4	; (adr r2, 80074e8 <SCPI_ErrorTranslate+0x3c>)
 80074e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074e8:	08007599 	.word	0x08007599
 80074ec:	080075a5 	.word	0x080075a5
 80074f0:	080075a5 	.word	0x080075a5
 80074f4:	080075a5 	.word	0x080075a5
 80074f8:	080075a5 	.word	0x080075a5
 80074fc:	080075a5 	.word	0x080075a5
 8007500:	080075a5 	.word	0x080075a5
 8007504:	08007595 	.word	0x08007595
 8007508:	080075a5 	.word	0x080075a5
 800750c:	080075a5 	.word	0x080075a5
 8007510:	080075a5 	.word	0x080075a5
 8007514:	080075a5 	.word	0x080075a5
 8007518:	080075a5 	.word	0x080075a5
 800751c:	080075a5 	.word	0x080075a5
 8007520:	080075a5 	.word	0x080075a5
 8007524:	080075a5 	.word	0x080075a5
 8007528:	080075a5 	.word	0x080075a5
 800752c:	080075a5 	.word	0x080075a5
 8007530:	080075a5 	.word	0x080075a5
 8007534:	080075a5 	.word	0x080075a5
 8007538:	080075a5 	.word	0x080075a5
 800753c:	080075a5 	.word	0x080075a5
 8007540:	080075a5 	.word	0x080075a5
 8007544:	080075a5 	.word	0x080075a5
 8007548:	080075a5 	.word	0x080075a5
 800754c:	08007589 	.word	0x08007589
 8007550:	080075a5 	.word	0x080075a5
 8007554:	080075a5 	.word	0x080075a5
 8007558:	080075a5 	.word	0x080075a5
 800755c:	08007591 	.word	0x08007591
 8007560:	0800758d 	.word	0x0800758d
 8007564:	080075a5 	.word	0x080075a5
 8007568:	080075a5 	.word	0x080075a5
 800756c:	080075a5 	.word	0x080075a5
 8007570:	080075a5 	.word	0x080075a5
 8007574:	08007585 	.word	0x08007585
 8007578:	08007581 	.word	0x08007581
        case 0: return "No error";
 800757c:	4b0d      	ldr	r3, [pc, #52]	; (80075b4 <SCPI_ErrorTranslate+0x108>)
 800757e:	e012      	b.n	80075a6 <SCPI_ErrorTranslate+0xfa>
        #define X(def, val, str) case def: return str;
        LIST_OF_ERRORS
 8007580:	4b0d      	ldr	r3, [pc, #52]	; (80075b8 <SCPI_ErrorTranslate+0x10c>)
 8007582:	e010      	b.n	80075a6 <SCPI_ErrorTranslate+0xfa>
 8007584:	4b0d      	ldr	r3, [pc, #52]	; (80075bc <SCPI_ErrorTranslate+0x110>)
 8007586:	e00e      	b.n	80075a6 <SCPI_ErrorTranslate+0xfa>
 8007588:	4b0d      	ldr	r3, [pc, #52]	; (80075c0 <SCPI_ErrorTranslate+0x114>)
 800758a:	e00c      	b.n	80075a6 <SCPI_ErrorTranslate+0xfa>
 800758c:	4b0d      	ldr	r3, [pc, #52]	; (80075c4 <SCPI_ErrorTranslate+0x118>)
 800758e:	e00a      	b.n	80075a6 <SCPI_ErrorTranslate+0xfa>
 8007590:	4b0d      	ldr	r3, [pc, #52]	; (80075c8 <SCPI_ErrorTranslate+0x11c>)
 8007592:	e008      	b.n	80075a6 <SCPI_ErrorTranslate+0xfa>
 8007594:	4b0d      	ldr	r3, [pc, #52]	; (80075cc <SCPI_ErrorTranslate+0x120>)
 8007596:	e006      	b.n	80075a6 <SCPI_ErrorTranslate+0xfa>
 8007598:	4b0d      	ldr	r3, [pc, #52]	; (80075d0 <SCPI_ErrorTranslate+0x124>)
 800759a:	e004      	b.n	80075a6 <SCPI_ErrorTranslate+0xfa>
 800759c:	4b0d      	ldr	r3, [pc, #52]	; (80075d4 <SCPI_ErrorTranslate+0x128>)
 800759e:	e002      	b.n	80075a6 <SCPI_ErrorTranslate+0xfa>
 80075a0:	4b0d      	ldr	r3, [pc, #52]	; (80075d8 <SCPI_ErrorTranslate+0x12c>)
 80075a2:	e000      	b.n	80075a6 <SCPI_ErrorTranslate+0xfa>
        #undef X        
        default: return "Unknown error";
 80075a4:	4b0d      	ldr	r3, [pc, #52]	; (80075dc <SCPI_ErrorTranslate+0x130>)
    }
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	370c      	adds	r7, #12
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr
 80075b2:	bf00      	nop
 80075b4:	0800e6d8 	.word	0x0800e6d8
 80075b8:	0800e6e4 	.word	0x0800e6e4
 80075bc:	0800e6f4 	.word	0x0800e6f4
 80075c0:	0800e708 	.word	0x0800e708
 80075c4:	0800e71c 	.word	0x0800e71c
 80075c8:	0800e734 	.word	0x0800e734
 80075cc:	0800e748 	.word	0x0800e748
 80075d0:	0800e758 	.word	0x0800e758
 80075d4:	0800e76c 	.word	0x0800e76c
 80075d8:	0800e77c 	.word	0x0800e77c
 80075dc:	0800e794 	.word	0x0800e794

080075e0 <fifo_init>:

#include "fifo.h"

void fifo_init(fifo_t * fifo) {
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
    fifo->wr = 0;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	801a      	strh	r2, [r3, #0]
    fifo->rd = 0;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	805a      	strh	r2, [r3, #2]
    fifo->size = FIFO_SIZE;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2210      	movs	r2, #16
 80075f8:	809a      	strh	r2, [r3, #4]
}
 80075fa:	bf00      	nop
 80075fc:	370c      	adds	r7, #12
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr

08007606 <fifo_add>:
void fifo_clear(fifo_t * fifo) {
    fifo->wr = 0;
    fifo->rd = 0;
}

scpi_bool_t fifo_add(fifo_t * fifo, int16_t value) {
 8007606:	b580      	push	{r7, lr}
 8007608:	b082      	sub	sp, #8
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]
 800760e:	460b      	mov	r3, r1
 8007610:	807b      	strh	r3, [r7, #2]
    /* FIFO full? */
    if (fifo->wr == ((fifo->rd + fifo->size) % (fifo->size + 1))) {
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007618:	4618      	mov	r0, r3
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007620:	461a      	mov	r2, r3
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007628:	4413      	add	r3, r2
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8007630:	3201      	adds	r2, #1
 8007632:	fb93 f1f2 	sdiv	r1, r3, r2
 8007636:	fb02 f201 	mul.w	r2, r2, r1
 800763a:	1a9b      	subs	r3, r3, r2
 800763c:	4298      	cmp	r0, r3
 800763e:	d103      	bne.n	8007648 <fifo_add+0x42>
        fifo_remove(fifo, NULL);
 8007640:	2100      	movs	r1, #0
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 f81d 	bl	8007682 <fifo_remove>
    }

    fifo->data[fifo->wr] = value;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	005b      	lsls	r3, r3, #1
 8007652:	4413      	add	r3, r2
 8007654:	887a      	ldrh	r2, [r7, #2]
 8007656:	80da      	strh	r2, [r3, #6]
    fifo->wr = (fifo->wr + 1) % (fifo->size + 1);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800765e:	3301      	adds	r3, #1
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8007666:	3201      	adds	r2, #1
 8007668:	fb93 f1f2 	sdiv	r1, r3, r2
 800766c:	fb02 f201 	mul.w	r2, r2, r1
 8007670:	1a9b      	subs	r3, r3, r2
 8007672:	b21a      	sxth	r2, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	801a      	strh	r2, [r3, #0]

    return TRUE;
 8007678:	2301      	movs	r3, #1
}
 800767a:	4618      	mov	r0, r3
 800767c:	3708      	adds	r7, #8
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}

08007682 <fifo_remove>:

scpi_bool_t fifo_remove(fifo_t * fifo, int16_t * value) {
 8007682:	b480      	push	{r7}
 8007684:	b083      	sub	sp, #12
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
 800768a:	6039      	str	r1, [r7, #0]
    /* FIFO empty? */
    if (fifo->wr == fifo->rd) {
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007698:	429a      	cmp	r2, r3
 800769a:	d101      	bne.n	80076a0 <fifo_remove+0x1e>
        return FALSE;
 800769c:	2300      	movs	r3, #0
 800769e:	e01d      	b.n	80076dc <fifo_remove+0x5a>
    }

    if(value) {
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d009      	beq.n	80076ba <fifo_remove+0x38>
        *value = fifo->data[fifo->rd];
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	005b      	lsls	r3, r3, #1
 80076b0:	4413      	add	r3, r2
 80076b2:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	801a      	strh	r2, [r3, #0]
    }

    fifo->rd = (fifo->rd + 1) % (fifo->size + 1);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80076c0:	3301      	adds	r3, #1
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80076c8:	3201      	adds	r2, #1
 80076ca:	fb93 f1f2 	sdiv	r1, r3, r2
 80076ce:	fb02 f201 	mul.w	r2, r2, r1
 80076d2:	1a9b      	subs	r3, r3, r2
 80076d4:	b21a      	sxth	r2, r3
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	805a      	strh	r2, [r3, #2]

    return TRUE;
 80076da:	2301      	movs	r3, #1
}
 80076dc:	4618      	mov	r0, r3
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <fifo_count>:

scpi_bool_t fifo_count(fifo_t * fifo, int16_t * value) {
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	6039      	str	r1, [r7, #0]
    *value = fifo->wr - fifo->rd;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80076f8:	b29a      	uxth	r2, r3
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007700:	b29b      	uxth	r3, r3
 8007702:	1ad3      	subs	r3, r2, r3
 8007704:	b29b      	uxth	r3, r3
 8007706:	b21a      	sxth	r2, r3
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	801a      	strh	r2, [r3, #0]
    if (*value < 0) {
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007712:	2b00      	cmp	r3, #0
 8007714:	da0e      	bge.n	8007734 <fifo_count+0x4c>
        *value += (fifo->size + 1);
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	f9b3 3000 	ldrsh.w	r3, [r3]
 800771c:	b29a      	uxth	r2, r3
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007724:	b29b      	uxth	r3, r3
 8007726:	4413      	add	r3, r2
 8007728:	b29b      	uxth	r3, r3
 800772a:	3301      	adds	r3, #1
 800772c:	b29b      	uxth	r3, r3
 800772e:	b21a      	sxth	r2, r3
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	801a      	strh	r2, [r3, #0]
    }
    return TRUE;
 8007734:	2301      	movs	r3, #1
}
 8007736:	4618      	mov	r0, r3
 8007738:	370c      	adds	r7, #12
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr

08007742 <regUpdate>:
/**
 * Update register value
 * @param context
 * @param name - register name
 */
static void regUpdate(scpi_t * context, scpi_reg_name_t name) {
 8007742:	b580      	push	{r7, lr}
 8007744:	b082      	sub	sp, #8
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
 800774a:	460b      	mov	r3, r1
 800774c:	70fb      	strb	r3, [r7, #3]
    SCPI_RegSet(context, name, SCPI_RegGet(context, name));
 800774e:	78fb      	ldrb	r3, [r7, #3]
 8007750:	4619      	mov	r1, r3
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 f835 	bl	80077c2 <SCPI_RegGet>
 8007758:	4603      	mov	r3, r0
 800775a:	461a      	mov	r2, r3
 800775c:	78fb      	ldrb	r3, [r7, #3]
 800775e:	4619      	mov	r1, r3
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 f86b 	bl	800783c <SCPI_RegSet>
}
 8007766:	bf00      	nop
 8007768:	3708      	adds	r7, #8
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <regUpdateSTB>:
 * @param context
 * @param val value of register
 * @param mask name of mask register (enable register)
 * @param stbBits bits to clear or set in STB
 */
static void regUpdateSTB(scpi_t * context, scpi_reg_val_t val, scpi_reg_name_t mask, scpi_reg_val_t stbBits) {
 800776e:	b580      	push	{r7, lr}
 8007770:	b084      	sub	sp, #16
 8007772:	af00      	add	r7, sp, #0
 8007774:	60f8      	str	r0, [r7, #12]
 8007776:	4608      	mov	r0, r1
 8007778:	4611      	mov	r1, r2
 800777a:	461a      	mov	r2, r3
 800777c:	4603      	mov	r3, r0
 800777e:	817b      	strh	r3, [r7, #10]
 8007780:	460b      	mov	r3, r1
 8007782:	727b      	strb	r3, [r7, #9]
 8007784:	4613      	mov	r3, r2
 8007786:	80fb      	strh	r3, [r7, #6]
    if (val & SCPI_RegGet(context, mask)) {
 8007788:	7a7b      	ldrb	r3, [r7, #9]
 800778a:	4619      	mov	r1, r3
 800778c:	68f8      	ldr	r0, [r7, #12]
 800778e:	f000 f818 	bl	80077c2 <SCPI_RegGet>
 8007792:	4603      	mov	r3, r0
 8007794:	461a      	mov	r2, r3
 8007796:	897b      	ldrh	r3, [r7, #10]
 8007798:	4013      	ands	r3, r2
 800779a:	b29b      	uxth	r3, r3
 800779c:	2b00      	cmp	r3, #0
 800779e:	d006      	beq.n	80077ae <regUpdateSTB+0x40>
        SCPI_RegSetBits(context, SCPI_REG_STB, stbBits);
 80077a0:	88fb      	ldrh	r3, [r7, #6]
 80077a2:	461a      	mov	r2, r3
 80077a4:	2100      	movs	r1, #0
 80077a6:	68f8      	ldr	r0, [r7, #12]
 80077a8:	f000 f8e6 	bl	8007978 <SCPI_RegSetBits>
    } else {
        SCPI_RegClearBits(context, SCPI_REG_STB, stbBits);
    }
}
 80077ac:	e005      	b.n	80077ba <regUpdateSTB+0x4c>
        SCPI_RegClearBits(context, SCPI_REG_STB, stbBits);
 80077ae:	88fb      	ldrh	r3, [r7, #6]
 80077b0:	461a      	mov	r2, r3
 80077b2:	2100      	movs	r1, #0
 80077b4:	68f8      	ldr	r0, [r7, #12]
 80077b6:	f000 f8fa 	bl	80079ae <SCPI_RegClearBits>
}
 80077ba:	bf00      	nop
 80077bc:	3710      	adds	r7, #16
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <SCPI_RegGet>:
/**
 * Get register value
 * @param name - register name
 * @return register value
 */
scpi_reg_val_t SCPI_RegGet(scpi_t * context, scpi_reg_name_t name) {
 80077c2:	b480      	push	{r7}
 80077c4:	b083      	sub	sp, #12
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
 80077ca:	460b      	mov	r3, r1
 80077cc:	70fb      	strb	r3, [r7, #3]
    if ((name < SCPI_REG_COUNT) && (context->registers != NULL)) {
 80077ce:	78fb      	ldrb	r3, [r7, #3]
 80077d0:	2b07      	cmp	r3, #7
 80077d2:	d80a      	bhi.n	80077ea <SCPI_RegGet+0x28>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d006      	beq.n	80077ea <SCPI_RegGet+0x28>
        return context->registers[name];
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077e0:	78fb      	ldrb	r3, [r7, #3]
 80077e2:	005b      	lsls	r3, r3, #1
 80077e4:	4413      	add	r3, r2
 80077e6:	881b      	ldrh	r3, [r3, #0]
 80077e8:	e000      	b.n	80077ec <SCPI_RegGet+0x2a>
    } else {
        return 0;
 80077ea:	2300      	movs	r3, #0
    }
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	370c      	adds	r7, #12
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr

080077f8 <writeControl>:
 * Wrapper function to control interface from context
 * @param context
 * @param ctrl number of controll message
 * @param value value of related register
 */
static size_t writeControl(scpi_t * context, scpi_ctrl_name_t ctrl, scpi_reg_val_t val) {
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	460b      	mov	r3, r1
 8007802:	70fb      	strb	r3, [r7, #3]
 8007804:	4613      	mov	r3, r2
 8007806:	803b      	strh	r3, [r7, #0]
    if (context && context->interface && context->interface->control) {
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d011      	beq.n	8007832 <writeControl+0x3a>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	69db      	ldr	r3, [r3, #28]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d00d      	beq.n	8007832 <writeControl+0x3a>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	69db      	ldr	r3, [r3, #28]
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d008      	beq.n	8007832 <writeControl+0x3a>
        return context->interface->control(context, ctrl, val);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	69db      	ldr	r3, [r3, #28]
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	883a      	ldrh	r2, [r7, #0]
 8007828:	78f9      	ldrb	r1, [r7, #3]
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	4798      	blx	r3
 800782e:	4603      	mov	r3, r0
 8007830:	e000      	b.n	8007834 <writeControl+0x3c>
    } else {
        return 0;
 8007832:	2300      	movs	r3, #0
    }
}
 8007834:	4618      	mov	r0, r3
 8007836:	3708      	adds	r7, #8
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <SCPI_RegSet>:
/**
 * Set register value
 * @param name - register name
 * @param val - new value
 */
void SCPI_RegSet(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t val) {
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	460b      	mov	r3, r1
 8007846:	70fb      	strb	r3, [r7, #3]
 8007848:	4613      	mov	r3, r2
 800784a:	803b      	strh	r3, [r7, #0]
    scpi_bool_t srq = FALSE;
 800784c:	2300      	movs	r3, #0
 800784e:	73fb      	strb	r3, [r7, #15]
    scpi_reg_val_t mask;
    scpi_reg_val_t old_val;

    if ((name >= SCPI_REG_COUNT) || (context->registers == NULL)) {
 8007850:	78fb      	ldrb	r3, [r7, #3]
 8007852:	2b07      	cmp	r3, #7
 8007854:	f200 808b 	bhi.w	800796e <SCPI_RegSet+0x132>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800785c:	2b00      	cmp	r3, #0
 800785e:	f000 8086 	beq.w	800796e <SCPI_RegSet+0x132>
        return;
    }
    
    /* store old register value */
    old_val = context->registers[name];
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007866:	78fb      	ldrb	r3, [r7, #3]
 8007868:	005b      	lsls	r3, r3, #1
 800786a:	4413      	add	r3, r2
 800786c:	881b      	ldrh	r3, [r3, #0]
 800786e:	81bb      	strh	r3, [r7, #12]

    /* set register value */
    context->registers[name] = val;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007874:	78fb      	ldrb	r3, [r7, #3]
 8007876:	005b      	lsls	r3, r3, #1
 8007878:	4413      	add	r3, r2
 800787a:	883a      	ldrh	r2, [r7, #0]
 800787c:	801a      	strh	r2, [r3, #0]

    /** @TODO: remove recutsion */
    switch (name) {
 800787e:	78fb      	ldrb	r3, [r7, #3]
 8007880:	2b08      	cmp	r3, #8
 8007882:	d85f      	bhi.n	8007944 <SCPI_RegSet+0x108>
 8007884:	a201      	add	r2, pc, #4	; (adr r2, 800788c <SCPI_RegSet+0x50>)
 8007886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800788a:	bf00      	nop
 800788c:	080078b1 	.word	0x080078b1
 8007890:	080078f1 	.word	0x080078f1
 8007894:	080078fb 	.word	0x080078fb
 8007898:	08007909 	.word	0x08007909
 800789c:	0800792b 	.word	0x0800792b
 80078a0:	08007939 	.word	0x08007939
 80078a4:	08007913 	.word	0x08007913
 80078a8:	08007921 	.word	0x08007921
 80078ac:	08007945 	.word	0x08007945
        case SCPI_REG_STB:
            mask = SCPI_RegGet(context, SCPI_REG_SRE);
 80078b0:	2101      	movs	r1, #1
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f7ff ff85 	bl	80077c2 <SCPI_RegGet>
 80078b8:	4603      	mov	r3, r0
 80078ba:	817b      	strh	r3, [r7, #10]
            mask &= ~STB_SRQ;
 80078bc:	897b      	ldrh	r3, [r7, #10]
 80078be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078c2:	817b      	strh	r3, [r7, #10]
            if (val & mask) {
 80078c4:	883a      	ldrh	r2, [r7, #0]
 80078c6:	897b      	ldrh	r3, [r7, #10]
 80078c8:	4013      	ands	r3, r2
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d00a      	beq.n	80078e6 <SCPI_RegSet+0xaa>
                val |= STB_SRQ;
 80078d0:	883b      	ldrh	r3, [r7, #0]
 80078d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078d6:	803b      	strh	r3, [r7, #0]
                /* avoid sending SRQ if nothing has changed */
                if (old_val != val) {
 80078d8:	89ba      	ldrh	r2, [r7, #12]
 80078da:	883b      	ldrh	r3, [r7, #0]
 80078dc:	429a      	cmp	r2, r3
 80078de:	d030      	beq.n	8007942 <SCPI_RegSet+0x106>
                    srq = TRUE;
 80078e0:	2301      	movs	r3, #1
 80078e2:	73fb      	strb	r3, [r7, #15]
                }
            } else {
                val &= ~STB_SRQ;
            }
            break;
 80078e4:	e02d      	b.n	8007942 <SCPI_RegSet+0x106>
                val &= ~STB_SRQ;
 80078e6:	883b      	ldrh	r3, [r7, #0]
 80078e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078ec:	803b      	strh	r3, [r7, #0]
            break;
 80078ee:	e028      	b.n	8007942 <SCPI_RegSet+0x106>
        case SCPI_REG_SRE:
            regUpdate(context, SCPI_REG_STB);
 80078f0:	2100      	movs	r1, #0
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f7ff ff25 	bl	8007742 <regUpdate>
            break;
 80078f8:	e024      	b.n	8007944 <SCPI_RegSet+0x108>
        case SCPI_REG_ESR:
            regUpdateSTB(context, val, SCPI_REG_ESE, STB_ESR);
 80078fa:	8839      	ldrh	r1, [r7, #0]
 80078fc:	2320      	movs	r3, #32
 80078fe:	2203      	movs	r2, #3
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f7ff ff34 	bl	800776e <regUpdateSTB>
            break;
 8007906:	e01d      	b.n	8007944 <SCPI_RegSet+0x108>
        case SCPI_REG_ESE:
            regUpdate(context, SCPI_REG_ESR);
 8007908:	2102      	movs	r1, #2
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f7ff ff19 	bl	8007742 <regUpdate>
            break;
 8007910:	e018      	b.n	8007944 <SCPI_RegSet+0x108>
        case SCPI_REG_QUES:
            regUpdateSTB(context, val, SCPI_REG_QUESE, STB_QES);
 8007912:	8839      	ldrh	r1, [r7, #0]
 8007914:	2308      	movs	r3, #8
 8007916:	2207      	movs	r2, #7
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f7ff ff28 	bl	800776e <regUpdateSTB>
            break;
 800791e:	e011      	b.n	8007944 <SCPI_RegSet+0x108>
        case SCPI_REG_QUESE:
            regUpdate(context, SCPI_REG_QUES);
 8007920:	2106      	movs	r1, #6
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f7ff ff0d 	bl	8007742 <regUpdate>
            break;
 8007928:	e00c      	b.n	8007944 <SCPI_RegSet+0x108>
        case SCPI_REG_OPER:
            regUpdateSTB(context, val, SCPI_REG_OPERE, STB_OPS);
 800792a:	8839      	ldrh	r1, [r7, #0]
 800792c:	2380      	movs	r3, #128	; 0x80
 800792e:	2205      	movs	r2, #5
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f7ff ff1c 	bl	800776e <regUpdateSTB>
            break;
 8007936:	e005      	b.n	8007944 <SCPI_RegSet+0x108>
        case SCPI_REG_OPERE:
            regUpdate(context, SCPI_REG_OPER);
 8007938:	2104      	movs	r1, #4
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f7ff ff01 	bl	8007742 <regUpdate>
            break;
 8007940:	e000      	b.n	8007944 <SCPI_RegSet+0x108>
            break;
 8007942:	bf00      	nop
            /* nothing to do */
            break;
    }

    /* set updated register value */
    context->registers[name] = val;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007948:	78fb      	ldrb	r3, [r7, #3]
 800794a:	005b      	lsls	r3, r3, #1
 800794c:	4413      	add	r3, r2
 800794e:	883a      	ldrh	r2, [r7, #0]
 8007950:	801a      	strh	r2, [r3, #0]

    if (srq) {
 8007952:	7bfb      	ldrb	r3, [r7, #15]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d00b      	beq.n	8007970 <SCPI_RegSet+0x134>
        writeControl(context, SCPI_CTRL_SRQ, SCPI_RegGet(context, SCPI_REG_STB));
 8007958:	2100      	movs	r1, #0
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f7ff ff31 	bl	80077c2 <SCPI_RegGet>
 8007960:	4603      	mov	r3, r0
 8007962:	461a      	mov	r2, r3
 8007964:	2101      	movs	r1, #1
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f7ff ff46 	bl	80077f8 <writeControl>
 800796c:	e000      	b.n	8007970 <SCPI_RegSet+0x134>
        return;
 800796e:	bf00      	nop
    }
}
 8007970:	3710      	adds	r7, #16
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
 8007976:	bf00      	nop

08007978 <SCPI_RegSetBits>:
/**
 * Set register bits
 * @param name - register name
 * @param bits bit mask
 */
void SCPI_RegSetBits(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t bits) {
 8007978:	b580      	push	{r7, lr}
 800797a:	b082      	sub	sp, #8
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	460b      	mov	r3, r1
 8007982:	70fb      	strb	r3, [r7, #3]
 8007984:	4613      	mov	r3, r2
 8007986:	803b      	strh	r3, [r7, #0]
    SCPI_RegSet(context, name, SCPI_RegGet(context, name) | bits);
 8007988:	78fb      	ldrb	r3, [r7, #3]
 800798a:	4619      	mov	r1, r3
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f7ff ff18 	bl	80077c2 <SCPI_RegGet>
 8007992:	4603      	mov	r3, r0
 8007994:	461a      	mov	r2, r3
 8007996:	883b      	ldrh	r3, [r7, #0]
 8007998:	4313      	orrs	r3, r2
 800799a:	b29a      	uxth	r2, r3
 800799c:	78fb      	ldrb	r3, [r7, #3]
 800799e:	4619      	mov	r1, r3
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f7ff ff4b 	bl	800783c <SCPI_RegSet>
}
 80079a6:	bf00      	nop
 80079a8:	3708      	adds	r7, #8
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}

080079ae <SCPI_RegClearBits>:
/**
 * Clear register bits
 * @param name - register name
 * @param bits bit mask
 */
void SCPI_RegClearBits(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t bits) {
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b082      	sub	sp, #8
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
 80079b6:	460b      	mov	r3, r1
 80079b8:	70fb      	strb	r3, [r7, #3]
 80079ba:	4613      	mov	r3, r2
 80079bc:	803b      	strh	r3, [r7, #0]
    SCPI_RegSet(context, name, SCPI_RegGet(context, name) & ~bits);
 80079be:	78fb      	ldrb	r3, [r7, #3]
 80079c0:	4619      	mov	r1, r3
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f7ff fefd 	bl	80077c2 <SCPI_RegGet>
 80079c8:	4603      	mov	r3, r0
 80079ca:	b21a      	sxth	r2, r3
 80079cc:	f9b7 3000 	ldrsh.w	r3, [r7]
 80079d0:	43db      	mvns	r3, r3
 80079d2:	b21b      	sxth	r3, r3
 80079d4:	4013      	ands	r3, r2
 80079d6:	b21b      	sxth	r3, r3
 80079d8:	b29a      	uxth	r2, r3
 80079da:	78fb      	ldrb	r3, [r7, #3]
 80079dc:	4619      	mov	r1, r3
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f7ff ff2c 	bl	800783c <SCPI_RegSet>
}
 80079e4:	bf00      	nop
 80079e6:	3708      	adds	r7, #8
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <SCPI_CoreIdnQ>:
 * 
 * example: MANUFACTURE,MODEL,0,01-02-01
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreIdnQ(scpi_t * context) {
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
    SCPI_ResultString(context, context->idn[0]);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f8:	4619      	mov	r1, r3
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 faf4 	bl	8007fe8 <SCPI_ResultString>
    SCPI_ResultString(context, context->idn[1]);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a04:	4619      	mov	r1, r3
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 faee 	bl	8007fe8 <SCPI_ResultString>
    SCPI_ResultString(context, context->idn[2]);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a10:	4619      	mov	r1, r3
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 fae8 	bl	8007fe8 <SCPI_ResultString>
    SCPI_ResultString(context, context->idn[3]);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 fae2 	bl	8007fe8 <SCPI_ResultString>
    return SCPI_RES_OK;
 8007a24:	2301      	movs	r3, #1
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3708      	adds	r7, #8
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}

08007a2e <SCPI_CoreRst>:
/**
 * *RST
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreRst(scpi_t * context) {
 8007a2e:	b580      	push	{r7, lr}
 8007a30:	b082      	sub	sp, #8
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6078      	str	r0, [r7, #4]
    if (context && context->interface && context->interface->reset) {
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d00f      	beq.n	8007a5c <SCPI_CoreRst+0x2e>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	69db      	ldr	r3, [r3, #28]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d00b      	beq.n	8007a5c <SCPI_CoreRst+0x2e>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	69db      	ldr	r3, [r3, #28]
 8007a48:	691b      	ldr	r3, [r3, #16]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d006      	beq.n	8007a5c <SCPI_CoreRst+0x2e>
        return context->interface->reset(context);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	69db      	ldr	r3, [r3, #28]
 8007a52:	691b      	ldr	r3, [r3, #16]
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	4798      	blx	r3
 8007a58:	4603      	mov	r3, r0
 8007a5a:	e000      	b.n	8007a5e <SCPI_CoreRst+0x30>
    }
    return SCPI_RES_OK;
 8007a5c:	2301      	movs	r3, #1
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3708      	adds	r7, #8
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
	...

08007a68 <SCPI_SystemVersionQ>:
/**
 * SYSTem:VERSion?
 * @param context
 * @return 
 */
scpi_result_t SCPI_SystemVersionQ(scpi_t * context) {
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
    SCPI_ResultString(context, SCPI_STD_VERSION_REVISION);
 8007a70:	4904      	ldr	r1, [pc, #16]	; (8007a84 <SCPI_SystemVersionQ+0x1c>)
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 fab8 	bl	8007fe8 <SCPI_ResultString>
    return SCPI_RES_OK;
 8007a78:	2301      	movs	r3, #1
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3708      	adds	r7, #8
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	0800e7a8 	.word	0x0800e7a8

08007a88 <SCPI_SystemErrorNextQ>:
/**
 * SYSTem:ERRor[:NEXT]?
 * @param context
 * @return 
 */
scpi_result_t SCPI_SystemErrorNextQ(scpi_t * context) {
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
    int16_t err = SCPI_ErrorPop(context);
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f7ff fc75 	bl	8007380 <SCPI_ErrorPop>
 8007a96:	4603      	mov	r3, r0
 8007a98:	81fb      	strh	r3, [r7, #14]

    SCPI_ResultInt(context, err);
 8007a9a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 fac6 	bl	8008032 <SCPI_ResultInt>
    SCPI_ResultText(context, SCPI_ErrorTranslate(err));
 8007aa6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f7ff fcfe 	bl	80074ac <SCPI_ErrorTranslate>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 faf7 	bl	80080a8 <SCPI_ResultText>

    return SCPI_RES_OK;
 8007aba:	2301      	movs	r3, #1
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3710      	adds	r7, #16
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <SCPI_SystemErrorCountQ>:
/**
 * SYSTem:ERRor:COUNt?
 * @param context
 * @return 
 */
scpi_result_t SCPI_SystemErrorCountQ(scpi_t * context) {
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
    SCPI_ResultInt(context, SCPI_ErrorCount(context));
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f7ff fc6b 	bl	80073a8 <SCPI_ErrorCount>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 faab 	bl	8008032 <SCPI_ResultInt>

    return SCPI_RES_OK;
 8007adc:	2301      	movs	r3, #1
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3708      	adds	r7, #8
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
	...

08007ae8 <cmdTerminatorPos>:
 * Find command termination character
 * @param cmd - input command
 * @param len - max search length
 * @return position of terminator or len
 */
size_t cmdTerminatorPos(const char * cmd, size_t len) {
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
    const char * terminator = strnpbrk(cmd, len, "; \r\n\t");
 8007af2:	4a09      	ldr	r2, [pc, #36]	; (8007b18 <cmdTerminatorPos+0x30>)
 8007af4:	6839      	ldr	r1, [r7, #0]
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 fe94 	bl	8008824 <strnpbrk>
 8007afc:	60f8      	str	r0, [r7, #12]
    if (terminator == NULL) {
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d101      	bne.n	8007b08 <cmdTerminatorPos+0x20>
        return len;
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	e002      	b.n	8007b0e <cmdTerminatorPos+0x26>
    } else {
        return terminator - cmd;
 8007b08:	68fa      	ldr	r2, [r7, #12]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	1ad3      	subs	r3, r2, r3
    }
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3710      	adds	r7, #16
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	0800e7b0 	.word	0x0800e7b0

08007b1c <cmdlineSeparator>:
 * Find command line separator
 * @param cmd - input command
 * @param len - max search length
 * @return pointer to line separator or NULL
 */
const char * cmdlineSeparator(const char * cmd, size_t len) {
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b082      	sub	sp, #8
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6039      	str	r1, [r7, #0]
    return strnpbrk(cmd, len, ";\r\n");
 8007b26:	4a05      	ldr	r2, [pc, #20]	; (8007b3c <cmdlineSeparator+0x20>)
 8007b28:	6839      	ldr	r1, [r7, #0]
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 fe7a 	bl	8008824 <strnpbrk>
 8007b30:	4603      	mov	r3, r0
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3708      	adds	r7, #8
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	0800e7b8 	.word	0x0800e7b8

08007b40 <cmdlineTerminator>:
 * Find command line terminator
 * @param cmd - input command
 * @param len - max search length
 * @return pointer to command line terminator or NULL
 */
const char * cmdlineTerminator(const char * cmd, size_t len) {
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b082      	sub	sp, #8
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]
    return strnpbrk(cmd, len, "\r\n");
 8007b4a:	4a05      	ldr	r2, [pc, #20]	; (8007b60 <cmdlineTerminator+0x20>)
 8007b4c:	6839      	ldr	r1, [r7, #0]
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 fe68 	bl	8008824 <strnpbrk>
 8007b54:	4603      	mov	r3, r0
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3708      	adds	r7, #8
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	0800e7bc 	.word	0x0800e7bc

08007b64 <cmdlineSeparatorPos>:
 * Find command line separator position
 * @param cmd - input command
 * @param len - max search length
 * @return position of line separator or len
 */
size_t cmdlineSeparatorPos(const char * cmd, size_t len) {
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	6039      	str	r1, [r7, #0]
    const char * separator = cmdlineSeparator(cmd, len);
 8007b6e:	6839      	ldr	r1, [r7, #0]
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f7ff ffd3 	bl	8007b1c <cmdlineSeparator>
 8007b76:	60f8      	str	r0, [r7, #12]
    if (separator == NULL) {
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d101      	bne.n	8007b82 <cmdlineSeparatorPos+0x1e>
        return len;
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	e002      	b.n	8007b88 <cmdlineSeparatorPos+0x24>
    } else {
        return separator - cmd;
 8007b82:	68fa      	ldr	r2, [r7, #12]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	1ad3      	subs	r3, r2, r3
    }
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3710      	adds	r7, #16
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <skipCmdLine>:
 * Find next part of command
 * @param cmd - input command
 * @param len - max search length
 * @return number of characters to be skipped
 */
size_t skipCmdLine(const char * cmd, size_t len) {
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b084      	sub	sp, #16
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6039      	str	r1, [r7, #0]
    const char * separator = cmdlineSeparator(cmd, len);
 8007b9a:	6839      	ldr	r1, [r7, #0]
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f7ff ffbd 	bl	8007b1c <cmdlineSeparator>
 8007ba2:	60f8      	str	r0, [r7, #12]
    if (separator == NULL) {
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d101      	bne.n	8007bae <skipCmdLine+0x1e>
        return len;
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	e003      	b.n	8007bb6 <skipCmdLine+0x26>
    } else {
        return separator + 1 - cmd;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	1c5a      	adds	r2, r3, #1
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	1ad3      	subs	r3, r2, r3
    }
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3710      	adds	r7, #16
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}

08007bbe <writeData>:
 * @param context
 * @param data
 * @param len - lenght of data to be written
 * @return number of bytes written
 */
static size_t writeData(scpi_t * context, const char * data, size_t len) {
 8007bbe:	b580      	push	{r7, lr}
 8007bc0:	b084      	sub	sp, #16
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	60f8      	str	r0, [r7, #12]
 8007bc6:	60b9      	str	r1, [r7, #8]
 8007bc8:	607a      	str	r2, [r7, #4]
    return context->interface->write(context, data, len);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	69db      	ldr	r3, [r3, #28]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	68b9      	ldr	r1, [r7, #8]
 8007bd4:	68f8      	ldr	r0, [r7, #12]
 8007bd6:	4798      	blx	r3
 8007bd8:	4603      	mov	r3, r0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3710      	adds	r7, #16
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <flushData>:
/**
 * Flush data to SCPI output
 * @param context
 * @return
 */
static int flushData(scpi_t * context) {
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b082      	sub	sp, #8
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
    if (context && context->interface && context->interface->flush) {
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d00f      	beq.n	8007c10 <flushData+0x2e>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	69db      	ldr	r3, [r3, #28]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d00b      	beq.n	8007c10 <flushData+0x2e>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	69db      	ldr	r3, [r3, #28]
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d006      	beq.n	8007c10 <flushData+0x2e>
        return context->interface->flush(context);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	69db      	ldr	r3, [r3, #28]
 8007c06:	68db      	ldr	r3, [r3, #12]
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	4798      	blx	r3
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	e000      	b.n	8007c12 <flushData+0x30>
    } else {
        return SCPI_RES_OK;
 8007c10:	2301      	movs	r3, #1
    }
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3708      	adds	r7, #8
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
	...

08007c1c <writeDelimiter>:
/**
 * Write result delimiter to output
 * @param context
 * @return number of bytes written
 */
static size_t writeDelimiter(scpi_t * context) {
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
    if (context->output_count > 0) {
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6a1b      	ldr	r3, [r3, #32]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	dd06      	ble.n	8007c3a <writeDelimiter+0x1e>
        return writeData(context, ", ", 2);
 8007c2c:	2202      	movs	r2, #2
 8007c2e:	4905      	ldr	r1, [pc, #20]	; (8007c44 <writeDelimiter+0x28>)
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f7ff ffc4 	bl	8007bbe <writeData>
 8007c36:	4603      	mov	r3, r0
 8007c38:	e000      	b.n	8007c3c <writeDelimiter+0x20>
    } else {
        return 0;
 8007c3a:	2300      	movs	r3, #0
    }
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3708      	adds	r7, #8
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}
 8007c44:	0800e7c0 	.word	0x0800e7c0

08007c48 <writeNewLine>:
/**
 * Conditionaly write "New Line"
 * @param context
 * @return number of characters written
 */
static size_t writeNewLine(scpi_t * context) {
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b084      	sub	sp, #16
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
    if (context->output_count > 0) {
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6a1b      	ldr	r3, [r3, #32]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	dd0a      	ble.n	8007c6e <writeNewLine+0x26>
        size_t len;
        len = writeData(context, "\r\n", 2);
 8007c58:	2202      	movs	r2, #2
 8007c5a:	4907      	ldr	r1, [pc, #28]	; (8007c78 <writeNewLine+0x30>)
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f7ff ffae 	bl	8007bbe <writeData>
 8007c62:	60f8      	str	r0, [r7, #12]
        flushData(context);
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f7ff ffbc 	bl	8007be2 <flushData>
        return len;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	e000      	b.n	8007c70 <writeNewLine+0x28>
    } else {
        return 0;
 8007c6e:	2300      	movs	r3, #0
    }
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3710      	adds	r7, #16
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}
 8007c78:	0800e7bc 	.word	0x0800e7bc

08007c7c <processCommand>:

/**
 * Process command
 * @param context
 */
static void processCommand(scpi_t * context) {
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
    const scpi_command_t * cmd = context->paramlist.cmd;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	691b      	ldr	r3, [r3, #16]
 8007c88:	60fb      	str	r3, [r7, #12]

    context->cmd_error = FALSE;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    context->output_count = 0;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	621a      	str	r2, [r3, #32]
    context->input_count = 0;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	625a      	str	r2, [r3, #36]	; 0x24

    SCPI_DEBUG_COMMAND(context);
    /* if callback exists - call command callback */
    if (cmd->callback != NULL) {
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d013      	beq.n	8007cce <processCommand+0x52>
        if ((cmd->callback(context) != SCPI_RES_OK) && !context->cmd_error) {
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	4798      	blx	r3
 8007cae:	4603      	mov	r3, r0
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d00c      	beq.n	8007cce <processCommand+0x52>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cba:	f083 0301 	eor.w	r3, r3, #1
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d004      	beq.n	8007cce <processCommand+0x52>
            SCPI_ErrorPush(context, SCPI_ERROR_EXECUTION_ERROR);
 8007cc4:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f7ff fb93 	bl	80073f4 <SCPI_ErrorPush>
        }
    }

    /* conditionaly write new line */
    writeNewLine(context);
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f7ff ffba 	bl	8007c48 <writeNewLine>

    /* skip all whitespaces */
    paramSkipWhitespace(context);
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 fa82 	bl	80081de <paramSkipWhitespace>

    /* set error if command callback did not read all parameters */
    if (context->paramlist.length != 0 && !context->cmd_error) {
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	699b      	ldr	r3, [r3, #24]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d00c      	beq.n	8007cfc <processCommand+0x80>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ce8:	f083 0301 	eor.w	r3, r3, #1
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d004      	beq.n	8007cfc <processCommand+0x80>
        SCPI_ErrorPush(context, SCPI_ERROR_PARAMETER_NOT_ALLOWED);
 8007cf2:	f06f 016b 	mvn.w	r1, #107	; 0x6b
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f7ff fb7c 	bl	80073f4 <SCPI_ErrorPush>
    }
}
 8007cfc:	bf00      	nop
 8007cfe:	3710      	adds	r7, #16
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <findCommand>:
/**
 * Cycle all patterns and search matching pattern. Execute command callback.
 * @param context
 * @result TRUE if context->paramlist is filled with correct values
 */
static scpi_bool_t findCommand(scpi_t * context, const char * cmdline_ptr, size_t cmdline_len, size_t cmd_len) {
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b086      	sub	sp, #24
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	60f8      	str	r0, [r7, #12]
 8007d0c:	60b9      	str	r1, [r7, #8]
 8007d0e:	607a      	str	r2, [r7, #4]
 8007d10:	603b      	str	r3, [r7, #0]
    int32_t i;
    const scpi_command_t * cmd;

    for (i = 0; context->cmdlist[i].pattern != NULL; i++) {
 8007d12:	2300      	movs	r3, #0
 8007d14:	617b      	str	r3, [r7, #20]
 8007d16:	e021      	b.n	8007d5c <findCommand+0x58>
        cmd = &context->cmdlist[i];
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681a      	ldr	r2, [r3, #0]
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	00db      	lsls	r3, r3, #3
 8007d20:	4413      	add	r3, r2
 8007d22:	613b      	str	r3, [r7, #16]
        if (matchCommand(cmd->pattern, cmdline_ptr, cmd_len)) {
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	683a      	ldr	r2, [r7, #0]
 8007d2a:	68b9      	ldr	r1, [r7, #8]
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f000 fff8 	bl	8008d22 <matchCommand>
 8007d32:	4603      	mov	r3, r0
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d00e      	beq.n	8007d56 <findCommand+0x52>
            context->paramlist.cmd = cmd;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	693a      	ldr	r2, [r7, #16]
 8007d3c:	611a      	str	r2, [r3, #16]
            context->paramlist.parameters = cmdline_ptr + cmd_len;
 8007d3e:	68ba      	ldr	r2, [r7, #8]
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	441a      	add	r2, r3
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	615a      	str	r2, [r3, #20]
            context->paramlist.length = cmdline_len - cmd_len;
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	1ad2      	subs	r2, r2, r3
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	619a      	str	r2, [r3, #24]
            return TRUE;
 8007d52:	2301      	movs	r3, #1
 8007d54:	e00b      	b.n	8007d6e <findCommand+0x6a>
    for (i = 0; context->cmdlist[i].pattern != NULL; i++) {
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	3301      	adds	r3, #1
 8007d5a:	617b      	str	r3, [r7, #20]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	00db      	lsls	r3, r3, #3
 8007d64:	4413      	add	r3, r2
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d1d5      	bne.n	8007d18 <findCommand+0x14>
        }
    }
    return FALSE;
 8007d6c:	2300      	movs	r3, #0
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3718      	adds	r7, #24
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}

08007d76 <SCPI_Parse>:
 * @param context
 * @param data - complete command line
 * @param len - command line length
 * @return 1 if the last evaluated command was found
 */
int SCPI_Parse(scpi_t * context, char * data, size_t len) {
 8007d76:	b580      	push	{r7, lr}
 8007d78:	b08c      	sub	sp, #48	; 0x30
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	60f8      	str	r0, [r7, #12]
 8007d7e:	60b9      	str	r1, [r7, #8]
 8007d80:	607a      	str	r2, [r7, #4]
    int result = 0;
 8007d82:	2300      	movs	r3, #0
 8007d84:	62fb      	str	r3, [r7, #44]	; 0x2c
    const char * cmdline_end = data + len;
 8007d86:	68ba      	ldr	r2, [r7, #8]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	4413      	add	r3, r2
 8007d8c:	623b      	str	r3, [r7, #32]
    char * cmdline_ptr = data;
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	61bb      	str	r3, [r7, #24]
    size_t cmd_len;
    size_t cmdline_len;
    char * cmdline_ptr_prev = NULL;
 8007d92:	2300      	movs	r3, #0
 8007d94:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t cmd_len_prev = 0;
 8007d96:	2300      	movs	r3, #0
 8007d98:	627b      	str	r3, [r7, #36]	; 0x24

    if (context == NULL) {
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d14e      	bne.n	8007e3e <SCPI_Parse+0xc8>
        return -1;
 8007da0:	f04f 33ff 	mov.w	r3, #4294967295
 8007da4:	e050      	b.n	8007e48 <SCPI_Parse+0xd2>
    }

    while (cmdline_ptr < cmdline_end) {
        result = 0;
 8007da6:	2300      	movs	r3, #0
 8007da8:	62fb      	str	r3, [r7, #44]	; 0x2c
        cmd_len = cmdTerminatorPos(cmdline_ptr, cmdline_end - cmdline_ptr);
 8007daa:	69b8      	ldr	r0, [r7, #24]
 8007dac:	69bb      	ldr	r3, [r7, #24]
 8007dae:	6a3a      	ldr	r2, [r7, #32]
 8007db0:	1ad3      	subs	r3, r2, r3
 8007db2:	4619      	mov	r1, r3
 8007db4:	f7ff fe98 	bl	8007ae8 <cmdTerminatorPos>
 8007db8:	4603      	mov	r3, r0
 8007dba:	617b      	str	r3, [r7, #20]
        if (cmd_len > 0) {
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d027      	beq.n	8007e12 <SCPI_Parse+0x9c>
            composeCompoundCommand(cmdline_ptr_prev, cmd_len_prev,
 8007dc2:	f107 0314 	add.w	r3, r7, #20
 8007dc6:	f107 0218 	add.w	r2, r7, #24
 8007dca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007dcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dce:	f001 f918 	bl	8009002 <composeCompoundCommand>
                                    &cmdline_ptr, &cmd_len);
            cmdline_len = cmdlineSeparatorPos(cmdline_ptr, cmdline_end - cmdline_ptr);
 8007dd2:	69b8      	ldr	r0, [r7, #24]
 8007dd4:	69bb      	ldr	r3, [r7, #24]
 8007dd6:	6a3a      	ldr	r2, [r7, #32]
 8007dd8:	1ad3      	subs	r3, r2, r3
 8007dda:	4619      	mov	r1, r3
 8007ddc:	f7ff fec2 	bl	8007b64 <cmdlineSeparatorPos>
 8007de0:	61f8      	str	r0, [r7, #28]
            if(findCommand(context, cmdline_ptr, cmdline_len, cmd_len)) {
 8007de2:	69b9      	ldr	r1, [r7, #24]
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	69fa      	ldr	r2, [r7, #28]
 8007de8:	68f8      	ldr	r0, [r7, #12]
 8007dea:	f7ff ff8b 	bl	8007d04 <findCommand>
 8007dee:	4603      	mov	r3, r0
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d009      	beq.n	8007e08 <SCPI_Parse+0x92>
                processCommand(context);
 8007df4:	68f8      	ldr	r0, [r7, #12]
 8007df6:	f7ff ff41 	bl	8007c7c <processCommand>
                result = 1;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
                cmdline_ptr_prev = cmdline_ptr;
 8007dfe:	69bb      	ldr	r3, [r7, #24]
 8007e00:	62bb      	str	r3, [r7, #40]	; 0x28
                cmd_len_prev = cmd_len;
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	627b      	str	r3, [r7, #36]	; 0x24
 8007e06:	e004      	b.n	8007e12 <SCPI_Parse+0x9c>
            } else {
                SCPI_ErrorPush(context, SCPI_ERROR_UNDEFINED_HEADER);
 8007e08:	f06f 0170 	mvn.w	r1, #112	; 0x70
 8007e0c:	68f8      	ldr	r0, [r7, #12]
 8007e0e:	f7ff faf1 	bl	80073f4 <SCPI_ErrorPush>
            }
        }
        cmdline_ptr += skipCmdLine(cmdline_ptr, cmdline_end - cmdline_ptr);
 8007e12:	69b8      	ldr	r0, [r7, #24]
 8007e14:	69bb      	ldr	r3, [r7, #24]
 8007e16:	6a3a      	ldr	r2, [r7, #32]
 8007e18:	1ad3      	subs	r3, r2, r3
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	f7ff feb8 	bl	8007b90 <skipCmdLine>
 8007e20:	4602      	mov	r2, r0
 8007e22:	69bb      	ldr	r3, [r7, #24]
 8007e24:	4413      	add	r3, r2
 8007e26:	61bb      	str	r3, [r7, #24]
        cmdline_ptr += skipWhitespace(cmdline_ptr, cmdline_end - cmdline_ptr);
 8007e28:	69b8      	ldr	r0, [r7, #24]
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	6a3a      	ldr	r2, [r7, #32]
 8007e2e:	1ad3      	subs	r3, r2, r3
 8007e30:	4619      	mov	r1, r3
 8007e32:	f000 fec5 	bl	8008bc0 <skipWhitespace>
 8007e36:	4602      	mov	r2, r0
 8007e38:	69bb      	ldr	r3, [r7, #24]
 8007e3a:	4413      	add	r3, r2
 8007e3c:	61bb      	str	r3, [r7, #24]
    while (cmdline_ptr < cmdline_end) {
 8007e3e:	69bb      	ldr	r3, [r7, #24]
 8007e40:	6a3a      	ldr	r2, [r7, #32]
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d8af      	bhi.n	8007da6 <SCPI_Parse+0x30>
    }
    return result;
 8007e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3730      	adds	r7, #48	; 0x30
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <SCPI_Init>:
 * @param context
 * @param command_list
 * @param buffer
 * @param interface
 */
void SCPI_Init(scpi_t * context) {
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
    if (context->idn[0] == NULL) {
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d102      	bne.n	8007e66 <SCPI_Init+0x16>
        context->idn[0] = SCPI_DEFAULT_1_MANUFACTURE;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	4a10      	ldr	r2, [pc, #64]	; (8007ea4 <SCPI_Init+0x54>)
 8007e64:	641a      	str	r2, [r3, #64]	; 0x40
    }
    if (context->idn[1] == NULL) {
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d102      	bne.n	8007e74 <SCPI_Init+0x24>
        context->idn[1] = SCPI_DEFAULT_2_MODEL;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	4a0d      	ldr	r2, [pc, #52]	; (8007ea8 <SCPI_Init+0x58>)
 8007e72:	645a      	str	r2, [r3, #68]	; 0x44
    }
    if (context->idn[2] == NULL) {
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d102      	bne.n	8007e82 <SCPI_Init+0x32>
        context->idn[2] = SCPI_DEFAULT_3;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	4a0b      	ldr	r2, [pc, #44]	; (8007eac <SCPI_Init+0x5c>)
 8007e80:	649a      	str	r2, [r3, #72]	; 0x48
    }
    if (context->idn[3] == NULL) {
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d102      	bne.n	8007e90 <SCPI_Init+0x40>
        context->idn[3] = SCPI_DEFAULT_4_REVISION;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4a08      	ldr	r2, [pc, #32]	; (8007eb0 <SCPI_Init+0x60>)
 8007e8e:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    context->buffer.position = 0;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	609a      	str	r2, [r3, #8]
    SCPI_ErrorInit(context);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f7ff fa60 	bl	800735c <SCPI_ErrorInit>
}
 8007e9c:	bf00      	nop
 8007e9e:	3708      	adds	r7, #8
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}
 8007ea4:	0800e7c4 	.word	0x0800e7c4
 8007ea8:	0800e7cc 	.word	0x0800e7cc
 8007eac:	0800e7d4 	.word	0x0800e7d4
 8007eb0:	0800e7d8 	.word	0x0800e7d8

08007eb4 <SCPI_Input>:
 * @param context
 * @param data - data to process
 * @param len - length of data
 * @return 
 */
int SCPI_Input(scpi_t * context, const char * data, size_t len) {
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b08a      	sub	sp, #40	; 0x28
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	60f8      	str	r0, [r7, #12]
 8007ebc:	60b9      	str	r1, [r7, #8]
 8007ebe:	607a      	str	r2, [r7, #4]
    int result = 0;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	627b      	str	r3, [r7, #36]	; 0x24
    const char * cmd_term;
    if (len == 0) {
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d113      	bne.n	8007ef2 <SCPI_Input+0x3e>
        context->buffer.data[context->buffer.position] = 0;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	68da      	ldr	r2, [r3, #12]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	4413      	add	r3, r2
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	701a      	strb	r2, [r3, #0]
        result = SCPI_Parse(context, context->buffer.data, context->buffer.position);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	68d9      	ldr	r1, [r3, #12]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	68f8      	ldr	r0, [r7, #12]
 8007ee4:	f7ff ff47 	bl	8007d76 <SCPI_Parse>
 8007ee8:	6278      	str	r0, [r7, #36]	; 0x24
        context->buffer.position = 0;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2200      	movs	r2, #0
 8007eee:	609a      	str	r2, [r3, #8]
 8007ef0:	e075      	b.n	8007fde <SCPI_Input+0x12a>
    } else {
        size_t buffer_free;
        int ws;
        buffer_free = context->buffer.length - context->buffer.position;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	685a      	ldr	r2, [r3, #4]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	1ad3      	subs	r3, r2, r3
 8007efc:	61bb      	str	r3, [r7, #24]
        if (len > (buffer_free - 1)) {
 8007efe:	69bb      	ldr	r3, [r7, #24]
 8007f00:	3b01      	subs	r3, #1
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d902      	bls.n	8007f0e <SCPI_Input+0x5a>
            return -1;
 8007f08:	f04f 33ff 	mov.w	r3, #4294967295
 8007f0c:	e068      	b.n	8007fe0 <SCPI_Input+0x12c>
        }
        memcpy(&context->buffer.data[context->buffer.position], data, len);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	68da      	ldr	r2, [r3, #12]
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	4413      	add	r3, r2
 8007f18:	687a      	ldr	r2, [r7, #4]
 8007f1a:	68b9      	ldr	r1, [r7, #8]
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f002 ffe4 	bl	800aeea <memcpy>
        context->buffer.position += len;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	689a      	ldr	r2, [r3, #8]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	441a      	add	r2, r3
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	609a      	str	r2, [r3, #8]
        context->buffer.data[context->buffer.position] = 0;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	68da      	ldr	r2, [r3, #12]
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	689b      	ldr	r3, [r3, #8]
 8007f36:	4413      	add	r3, r2
 8007f38:	2200      	movs	r2, #0
 8007f3a:	701a      	strb	r2, [r3, #0]

        ws = skipWhitespace(context->buffer.data, context->buffer.position);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	68da      	ldr	r2, [r3, #12]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	689b      	ldr	r3, [r3, #8]
 8007f44:	4619      	mov	r1, r3
 8007f46:	4610      	mov	r0, r2
 8007f48:	f000 fe3a 	bl	8008bc0 <skipWhitespace>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	61fb      	str	r3, [r7, #28]
        cmd_term = cmdlineTerminator(context->buffer.data + ws, context->buffer.position - ws);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	68da      	ldr	r2, [r3, #12]
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	18d0      	adds	r0, r2, r3
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	689a      	ldr	r2, [r3, #8]
 8007f5c:	69fb      	ldr	r3, [r7, #28]
 8007f5e:	1ad3      	subs	r3, r2, r3
 8007f60:	4619      	mov	r1, r3
 8007f62:	f7ff fded 	bl	8007b40 <cmdlineTerminator>
 8007f66:	6238      	str	r0, [r7, #32]
        while (cmd_term != NULL) {
 8007f68:	e036      	b.n	8007fd8 <SCPI_Input+0x124>
            int curr_len = cmd_term - context->buffer.data;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	68db      	ldr	r3, [r3, #12]
 8007f6e:	6a3a      	ldr	r2, [r7, #32]
 8007f70:	1ad3      	subs	r3, r2, r3
 8007f72:	617b      	str	r3, [r7, #20]
            result = SCPI_Parse(context, context->buffer.data + ws, curr_len - ws);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	68da      	ldr	r2, [r3, #12]
 8007f78:	69fb      	ldr	r3, [r7, #28]
 8007f7a:	18d1      	adds	r1, r2, r3
 8007f7c:	697a      	ldr	r2, [r7, #20]
 8007f7e:	69fb      	ldr	r3, [r7, #28]
 8007f80:	1ad3      	subs	r3, r2, r3
 8007f82:	461a      	mov	r2, r3
 8007f84:	68f8      	ldr	r0, [r7, #12]
 8007f86:	f7ff fef6 	bl	8007d76 <SCPI_Parse>
 8007f8a:	6278      	str	r0, [r7, #36]	; 0x24
            memmove(context->buffer.data, cmd_term, context->buffer.position - curr_len);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	68d8      	ldr	r0, [r3, #12]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	689a      	ldr	r2, [r3, #8]
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	1ad3      	subs	r3, r2, r3
 8007f98:	461a      	mov	r2, r3
 8007f9a:	6a39      	ldr	r1, [r7, #32]
 8007f9c:	f002 ffb3 	bl	800af06 <memmove>
            context->buffer.position -= curr_len;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	689a      	ldr	r2, [r3, #8]
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	1ad2      	subs	r2, r2, r3
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	609a      	str	r2, [r3, #8]
    
            ws = skipWhitespace(context->buffer.data, context->buffer.position);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	68da      	ldr	r2, [r3, #12]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	4610      	mov	r0, r2
 8007fb8:	f000 fe02 	bl	8008bc0 <skipWhitespace>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	61fb      	str	r3, [r7, #28]
            cmd_term = cmdlineTerminator(context->buffer.data + ws, context->buffer.position - ws);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	68da      	ldr	r2, [r3, #12]
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	18d0      	adds	r0, r2, r3
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	689a      	ldr	r2, [r3, #8]
 8007fcc:	69fb      	ldr	r3, [r7, #28]
 8007fce:	1ad3      	subs	r3, r2, r3
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	f7ff fdb5 	bl	8007b40 <cmdlineTerminator>
 8007fd6:	6238      	str	r0, [r7, #32]
        while (cmd_term != NULL) {
 8007fd8:	6a3b      	ldr	r3, [r7, #32]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d1c5      	bne.n	8007f6a <SCPI_Input+0xb6>
        }
    }

    return result;
 8007fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3728      	adds	r7, #40	; 0x28
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}

08007fe8 <SCPI_ResultString>:
 * Write raw string result to the output
 * @param context
 * @param data
 * @return 
 */
size_t SCPI_ResultString(scpi_t * context, const char * data) {
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b084      	sub	sp, #16
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
    size_t len = strlen(data);
 8007ff2:	6838      	ldr	r0, [r7, #0]
 8007ff4:	f7f8 f8ec 	bl	80001d0 <strlen>
 8007ff8:	60f8      	str	r0, [r7, #12]
    size_t result = 0;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	60bb      	str	r3, [r7, #8]
    result += writeDelimiter(context);
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f7ff fe0c 	bl	8007c1c <writeDelimiter>
 8008004:	4602      	mov	r2, r0
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	4413      	add	r3, r2
 800800a:	60bb      	str	r3, [r7, #8]
    result += writeData(context, data, len);
 800800c:	68fa      	ldr	r2, [r7, #12]
 800800e:	6839      	ldr	r1, [r7, #0]
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f7ff fdd4 	bl	8007bbe <writeData>
 8008016:	4602      	mov	r2, r0
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	4413      	add	r3, r2
 800801c:	60bb      	str	r3, [r7, #8]
    context->output_count++;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6a1b      	ldr	r3, [r3, #32]
 8008022:	1c5a      	adds	r2, r3, #1
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	621a      	str	r2, [r3, #32]
    return result;
 8008028:	68bb      	ldr	r3, [r7, #8]
}
 800802a:	4618      	mov	r0, r3
 800802c:	3710      	adds	r7, #16
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}

08008032 <SCPI_ResultInt>:
 * Write integer value to the result
 * @param context
 * @param val
 * @return 
 */
size_t SCPI_ResultInt(scpi_t * context, int32_t val) {
 8008032:	b580      	push	{r7, lr}
 8008034:	b088      	sub	sp, #32
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
 800803a:	6039      	str	r1, [r7, #0]
    char buffer[12];
    size_t result = 0;
 800803c:	2300      	movs	r3, #0
 800803e:	61fb      	str	r3, [r7, #28]
    size_t len = longToStr(val, buffer, sizeof (buffer));
 8008040:	f107 030c 	add.w	r3, r7, #12
 8008044:	220c      	movs	r2, #12
 8008046:	4619      	mov	r1, r3
 8008048:	6838      	ldr	r0, [r7, #0]
 800804a:	f000 fc1b 	bl	8008884 <longToStr>
 800804e:	61b8      	str	r0, [r7, #24]
    result += writeDelimiter(context);
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f7ff fde3 	bl	8007c1c <writeDelimiter>
 8008056:	4602      	mov	r2, r0
 8008058:	69fb      	ldr	r3, [r7, #28]
 800805a:	4413      	add	r3, r2
 800805c:	61fb      	str	r3, [r7, #28]
    result += writeData(context, buffer, len);
 800805e:	f107 030c 	add.w	r3, r7, #12
 8008062:	69ba      	ldr	r2, [r7, #24]
 8008064:	4619      	mov	r1, r3
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f7ff fda9 	bl	8007bbe <writeData>
 800806c:	4602      	mov	r2, r0
 800806e:	69fb      	ldr	r3, [r7, #28]
 8008070:	4413      	add	r3, r2
 8008072:	61fb      	str	r3, [r7, #28]
    context->output_count++;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6a1b      	ldr	r3, [r3, #32]
 8008078:	1c5a      	adds	r2, r3, #1
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	621a      	str	r2, [r3, #32]
    return result;
 800807e:	69fb      	ldr	r3, [r7, #28]
}
 8008080:	4618      	mov	r0, r3
 8008082:	3720      	adds	r7, #32
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <SCPI_ResultBool>:
 * Write boolean value to the result
 * @param context
 * @param val
 * @return 
 */
size_t SCPI_ResultBool(scpi_t * context, scpi_bool_t val) {
 8008088:	b580      	push	{r7, lr}
 800808a:	b082      	sub	sp, #8
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	460b      	mov	r3, r1
 8008092:	70fb      	strb	r3, [r7, #3]
	return SCPI_ResultInt(context, val ? 1 : 0);
 8008094:	78fb      	ldrb	r3, [r7, #3]
 8008096:	4619      	mov	r1, r3
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f7ff ffca 	bl	8008032 <SCPI_ResultInt>
 800809e:	4603      	mov	r3, r0
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3708      	adds	r7, #8
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <SCPI_ResultText>:
 * Write string withn " to the result
 * @param context
 * @param data
 * @return 
 */
size_t SCPI_ResultText(scpi_t * context, const char * data) {
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]
    size_t result = 0;
 80080b2:	2300      	movs	r3, #0
 80080b4:	60fb      	str	r3, [r7, #12]
    result += writeDelimiter(context);
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f7ff fdb0 	bl	8007c1c <writeDelimiter>
 80080bc:	4602      	mov	r2, r0
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	4413      	add	r3, r2
 80080c2:	60fb      	str	r3, [r7, #12]
    result += writeData(context, "\"", 1);
 80080c4:	2201      	movs	r2, #1
 80080c6:	4914      	ldr	r1, [pc, #80]	; (8008118 <SCPI_ResultText+0x70>)
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f7ff fd78 	bl	8007bbe <writeData>
 80080ce:	4602      	mov	r2, r0
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	4413      	add	r3, r2
 80080d4:	60fb      	str	r3, [r7, #12]
    result += writeData(context, data, strlen(data));
 80080d6:	6838      	ldr	r0, [r7, #0]
 80080d8:	f7f8 f87a 	bl	80001d0 <strlen>
 80080dc:	4603      	mov	r3, r0
 80080de:	461a      	mov	r2, r3
 80080e0:	6839      	ldr	r1, [r7, #0]
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f7ff fd6b 	bl	8007bbe <writeData>
 80080e8:	4602      	mov	r2, r0
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	4413      	add	r3, r2
 80080ee:	60fb      	str	r3, [r7, #12]
    result += writeData(context, "\"", 1);
 80080f0:	2201      	movs	r2, #1
 80080f2:	4909      	ldr	r1, [pc, #36]	; (8008118 <SCPI_ResultText+0x70>)
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f7ff fd62 	bl	8007bbe <writeData>
 80080fa:	4602      	mov	r2, r0
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	4413      	add	r3, r2
 8008100:	60fb      	str	r3, [r7, #12]
    context->output_count++;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6a1b      	ldr	r3, [r3, #32]
 8008106:	1c5a      	adds	r2, r3, #1
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	621a      	str	r2, [r3, #32]
    return result;
 800810c:	68fb      	ldr	r3, [r7, #12]
}
 800810e:	4618      	mov	r0, r3
 8008110:	3710      	adds	r7, #16
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	0800e7e0 	.word	0x0800e7e0

0800811c <SCPI_ResultBinary>:
 * @param context
 * @param data
 * @param data_len
 * @return
 */
size_t SCPI_ResultBinary(scpi_t * context, const char * data, const size_t data_len) {
 800811c:	b580      	push	{r7, lr}
 800811e:	b08c      	sub	sp, #48	; 0x30
 8008120:	af00      	add	r7, sp, #0
 8008122:	60f8      	str	r0, [r7, #12]
 8008124:	60b9      	str	r1, [r7, #8]
 8008126:	607a      	str	r2, [r7, #4]
    size_t result = 0;
 8008128:	2300      	movs	r3, #0
 800812a:	62fb      	str	r3, [r7, #44]	; 0x2c
    char len[10]; /* header length is only allowed to be 9 digits */
    char header[12]; /* plus # and length of length field */
    sprintf(len, "%d", data_len);
 800812c:	f107 0320 	add.w	r3, r7, #32
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	4919      	ldr	r1, [pc, #100]	; (8008198 <SCPI_ResultBinary+0x7c>)
 8008134:	4618      	mov	r0, r3
 8008136:	f002 ffe1 	bl	800b0fc <siprintf>
    sprintf(header, "#%zd%d", strlen(len), data_len);
 800813a:	f107 0320 	add.w	r3, r7, #32
 800813e:	4618      	mov	r0, r3
 8008140:	f7f8 f846 	bl	80001d0 <strlen>
 8008144:	4602      	mov	r2, r0
 8008146:	f107 0014 	add.w	r0, r7, #20
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	4913      	ldr	r1, [pc, #76]	; (800819c <SCPI_ResultBinary+0x80>)
 800814e:	f002 ffd5 	bl	800b0fc <siprintf>
    result += writeData(context, header, strlen(header));
 8008152:	f107 0314 	add.w	r3, r7, #20
 8008156:	4618      	mov	r0, r3
 8008158:	f7f8 f83a 	bl	80001d0 <strlen>
 800815c:	4602      	mov	r2, r0
 800815e:	f107 0314 	add.w	r3, r7, #20
 8008162:	4619      	mov	r1, r3
 8008164:	68f8      	ldr	r0, [r7, #12]
 8008166:	f7ff fd2a 	bl	8007bbe <writeData>
 800816a:	4602      	mov	r2, r0
 800816c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800816e:	4413      	add	r3, r2
 8008170:	62fb      	str	r3, [r7, #44]	; 0x2c
    result += writeData(context, data, data_len);
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	68b9      	ldr	r1, [r7, #8]
 8008176:	68f8      	ldr	r0, [r7, #12]
 8008178:	f7ff fd21 	bl	8007bbe <writeData>
 800817c:	4602      	mov	r2, r0
 800817e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008180:	4413      	add	r3, r2
 8008182:	62fb      	str	r3, [r7, #44]	; 0x2c
    context->output_count++;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	6a1b      	ldr	r3, [r3, #32]
 8008188:	1c5a      	adds	r2, r3, #1
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	621a      	str	r2, [r3, #32]
    return result;
 800818e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008190:	4618      	mov	r0, r3
 8008192:	3730      	adds	r7, #48	; 0x30
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}
 8008198:	0800e7e4 	.word	0x0800e7e4
 800819c:	0800e7e8 	.word	0x0800e7e8

080081a0 <paramSkipBytes>:
/**
 * Skip num bytes from the begginig of parameters
 * @param context
 * @param num
 */
void paramSkipBytes(scpi_t * context, size_t num) {
 80081a0:	b480      	push	{r7}
 80081a2:	b083      	sub	sp, #12
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	6039      	str	r1, [r7, #0]
    if (context->paramlist.length < num) {
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	699b      	ldr	r3, [r3, #24]
 80081ae:	683a      	ldr	r2, [r7, #0]
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d902      	bls.n	80081ba <paramSkipBytes+0x1a>
        num = context->paramlist.length;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	699b      	ldr	r3, [r3, #24]
 80081b8:	603b      	str	r3, [r7, #0]
    }
    context->paramlist.parameters += num;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	695a      	ldr	r2, [r3, #20]
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	441a      	add	r2, r3
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	615a      	str	r2, [r3, #20]
    context->paramlist.length -= num;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	699a      	ldr	r2, [r3, #24]
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	1ad2      	subs	r2, r2, r3
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	619a      	str	r2, [r3, #24]
}
 80081d2:	bf00      	nop
 80081d4:	370c      	adds	r7, #12
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr

080081de <paramSkipWhitespace>:

/**
 * Skip white spaces from the beggining of parameters
 * @param context
 */
void paramSkipWhitespace(scpi_t * context) {
 80081de:	b580      	push	{r7, lr}
 80081e0:	b084      	sub	sp, #16
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
    size_t ws = skipWhitespace(context->paramlist.parameters, context->paramlist.length);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	695a      	ldr	r2, [r3, #20]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	699b      	ldr	r3, [r3, #24]
 80081ee:	4619      	mov	r1, r3
 80081f0:	4610      	mov	r0, r2
 80081f2:	f000 fce5 	bl	8008bc0 <skipWhitespace>
 80081f6:	60f8      	str	r0, [r7, #12]
    paramSkipBytes(context, ws);
 80081f8:	68f9      	ldr	r1, [r7, #12]
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f7ff ffd0 	bl	80081a0 <paramSkipBytes>
}
 8008200:	bf00      	nop
 8008202:	3710      	adds	r7, #16
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <paramNext>:
 * Find next parameter
 * @param context
 * @param mandatory
 * @return 
 */
scpi_bool_t paramNext(scpi_t * context, scpi_bool_t mandatory) {
 8008208:	b580      	push	{r7, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	460b      	mov	r3, r1
 8008212:	70fb      	strb	r3, [r7, #3]
    paramSkipWhitespace(context);
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f7ff ffe2 	bl	80081de <paramSkipWhitespace>
    if (context->paramlist.length == 0) {
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	699b      	ldr	r3, [r3, #24]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d109      	bne.n	8008236 <paramNext+0x2e>
        if (mandatory) {
 8008222:	78fb      	ldrb	r3, [r7, #3]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d004      	beq.n	8008232 <paramNext+0x2a>
            SCPI_ErrorPush(context, SCPI_ERROR_MISSING_PARAMETER);
 8008228:	f06f 016c 	mvn.w	r1, #108	; 0x6c
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f7ff f8e1 	bl	80073f4 <SCPI_ErrorPush>
        }
        return FALSE;
 8008232:	2300      	movs	r3, #0
 8008234:	e01d      	b.n	8008272 <paramNext+0x6a>
    }
    if (context->input_count != 0) {
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823a:	2b00      	cmp	r3, #0
 800823c:	d013      	beq.n	8008266 <paramNext+0x5e>
        if (context->paramlist.parameters[0] == ',') {
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	695b      	ldr	r3, [r3, #20]
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	2b2c      	cmp	r3, #44	; 0x2c
 8008246:	d107      	bne.n	8008258 <paramNext+0x50>
            paramSkipBytes(context, 1);
 8008248:	2101      	movs	r1, #1
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f7ff ffa8 	bl	80081a0 <paramSkipBytes>
            paramSkipWhitespace(context);
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f7ff ffc4 	bl	80081de <paramSkipWhitespace>
 8008256:	e006      	b.n	8008266 <paramNext+0x5e>
        } else {
            SCPI_ErrorPush(context, SCPI_ERROR_INVALID_SEPARATOR);
 8008258:	f06f 0166 	mvn.w	r1, #102	; 0x66
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f7ff f8c9 	bl	80073f4 <SCPI_ErrorPush>
            return FALSE;
 8008262:	2300      	movs	r3, #0
 8008264:	e005      	b.n	8008272 <paramNext+0x6a>
        }
    }
    context->input_count++;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800826a:	1c5a      	adds	r2, r3, #1
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	625a      	str	r2, [r3, #36]	; 0x24
    return TRUE;
 8008270:	2301      	movs	r3, #1
}
 8008272:	4618      	mov	r0, r3
 8008274:	3708      	adds	r7, #8
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}

0800827a <SCPI_ParamString>:
 * @param value
 * @param len
 * @param mandatory
 * @return 
 */
scpi_bool_t SCPI_ParamString(scpi_t * context, const char ** value, size_t * len, scpi_bool_t mandatory) {
 800827a:	b580      	push	{r7, lr}
 800827c:	b086      	sub	sp, #24
 800827e:	af00      	add	r7, sp, #0
 8008280:	60f8      	str	r0, [r7, #12]
 8008282:	60b9      	str	r1, [r7, #8]
 8008284:	607a      	str	r2, [r7, #4]
 8008286:	70fb      	strb	r3, [r7, #3]
    size_t length;

    if (!value || !len) {
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d002      	beq.n	8008294 <SCPI_ParamString+0x1a>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d101      	bne.n	8008298 <SCPI_ParamString+0x1e>
        return FALSE;
 8008294:	2300      	movs	r3, #0
 8008296:	e029      	b.n	80082ec <SCPI_ParamString+0x72>
    }

    if (!paramNext(context, mandatory)) {
 8008298:	78fb      	ldrb	r3, [r7, #3]
 800829a:	4619      	mov	r1, r3
 800829c:	68f8      	ldr	r0, [r7, #12]
 800829e:	f7ff ffb3 	bl	8008208 <paramNext>
 80082a2:	4603      	mov	r3, r0
 80082a4:	f083 0301 	eor.w	r3, r3, #1
 80082a8:	b2db      	uxtb	r3, r3
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d001      	beq.n	80082b2 <SCPI_ParamString+0x38>
        return FALSE;
 80082ae:	2300      	movs	r3, #0
 80082b0:	e01c      	b.n	80082ec <SCPI_ParamString+0x72>
    }

    if (locateStr(context->paramlist.parameters, context->paramlist.length, value, &length)) {
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	6958      	ldr	r0, [r3, #20]
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	6999      	ldr	r1, [r3, #24]
 80082ba:	f107 0314 	add.w	r3, r7, #20
 80082be:	68ba      	ldr	r2, [r7, #8]
 80082c0:	f000 fc34 	bl	8008b2c <locateStr>
 80082c4:	4603      	mov	r3, r0
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d00f      	beq.n	80082ea <SCPI_ParamString+0x70>
        paramSkipBytes(context, length);
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	4619      	mov	r1, r3
 80082ce:	68f8      	ldr	r0, [r7, #12]
 80082d0:	f7ff ff66 	bl	80081a0 <paramSkipBytes>
        paramSkipWhitespace(context);
 80082d4:	68f8      	ldr	r0, [r7, #12]
 80082d6:	f7ff ff82 	bl	80081de <paramSkipWhitespace>
        if (len) {
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d002      	beq.n	80082e6 <SCPI_ParamString+0x6c>
            *len = length;
 80082e0:	697a      	ldr	r2, [r7, #20]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	601a      	str	r2, [r3, #0]
        }
        return TRUE;
 80082e6:	2301      	movs	r3, #1
 80082e8:	e000      	b.n	80082ec <SCPI_ParamString+0x72>
    }

    return FALSE;
 80082ea:	2300      	movs	r3, #0
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3718      	adds	r7, #24
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <SCPI_ParamBinary>:
 * @param len optional, will be filled in with field 'zzz' if provided
 * @param mandatory
 * @return
 */
scpi_bool_t SCPI_ParamBinary(scpi_t * context, const void **value, size_t * len, scpi_bool_t mandatory)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b08a      	sub	sp, #40	; 0x28
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	60f8      	str	r0, [r7, #12]
 80082fc:	60b9      	str	r1, [r7, #8]
 80082fe:	607a      	str	r2, [r7, #4]
 8008300:	70fb      	strb	r3, [r7, #3]
    if (!value || !len) {
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d002      	beq.n	800830e <SCPI_ParamBinary+0x1a>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d101      	bne.n	8008312 <SCPI_ParamBinary+0x1e>
        return FALSE;
 800830e:	2300      	movs	r3, #0
 8008310:	e04f      	b.n	80083b2 <SCPI_ParamBinary+0xbe>
    }

    if (!paramNext(context, mandatory)) {
 8008312:	78fb      	ldrb	r3, [r7, #3]
 8008314:	4619      	mov	r1, r3
 8008316:	68f8      	ldr	r0, [r7, #12]
 8008318:	f7ff ff76 	bl	8008208 <paramNext>
 800831c:	4603      	mov	r3, r0
 800831e:	f083 0301 	eor.w	r3, r3, #1
 8008322:	b2db      	uxtb	r3, r3
 8008324:	2b00      	cmp	r3, #0
 8008326:	d001      	beq.n	800832c <SCPI_ParamBinary+0x38>
        return FALSE;
 8008328:	2300      	movs	r3, #0
 800832a:	e042      	b.n	80083b2 <SCPI_ParamBinary+0xbe>
    }

    if (context->paramlist.parameters[0] != '#') {
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	695b      	ldr	r3, [r3, #20]
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	2b23      	cmp	r3, #35	; 0x23
 8008334:	d001      	beq.n	800833a <SCPI_ParamBinary+0x46>
        return FALSE;
 8008336:	2300      	movs	r3, #0
 8008338:	e03b      	b.n	80083b2 <SCPI_ParamBinary+0xbe>
    }

    int len_len = context->paramlist.parameters[1] - '0';
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	695b      	ldr	r3, [r3, #20]
 800833e:	3301      	adds	r3, #1
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	3b30      	subs	r3, #48	; 0x30
 8008344:	627b      	str	r3, [r7, #36]	; 0x24
    if (len_len > 10 || len_len < 1) {
 8008346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008348:	2b0a      	cmp	r3, #10
 800834a:	dc02      	bgt.n	8008352 <SCPI_ParamBinary+0x5e>
 800834c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834e:	2b00      	cmp	r3, #0
 8008350:	dc01      	bgt.n	8008356 <SCPI_ParamBinary+0x62>
        return FALSE;
 8008352:	2300      	movs	r3, #0
 8008354:	e02d      	b.n	80083b2 <SCPI_ParamBinary+0xbe>
    }

    /* length can only ever be 9 digits */
    char len_lens[10];
    memcpy(len_lens, &context->paramlist.parameters[2], len_len);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	695b      	ldr	r3, [r3, #20]
 800835a:	1c99      	adds	r1, r3, #2
 800835c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800835e:	f107 0318 	add.w	r3, r7, #24
 8008362:	4618      	mov	r0, r3
 8008364:	f002 fdc1 	bl	800aeea <memcpy>
    len_lens[len_len] = '\0';
 8008368:	f107 0218 	add.w	r2, r7, #24
 800836c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836e:	4413      	add	r3, r2
 8008370:	2200      	movs	r2, #0
 8008372:	701a      	strb	r2, [r3, #0]
    int32_t data_len;
    strToLong(len_lens, &data_len);
 8008374:	f107 0214 	add.w	r2, r7, #20
 8008378:	f107 0318 	add.w	r3, r7, #24
 800837c:	4611      	mov	r1, r2
 800837e:	4618      	mov	r0, r3
 8008380:	f000 fb0a 	bl	8008998 <strToLong>
    if (len) {
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d003      	beq.n	8008392 <SCPI_ParamBinary+0x9e>
        *len = data_len;
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	461a      	mov	r2, r3
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	601a      	str	r2, [r3, #0]
    }
    *value = &context->paramlist.parameters[2 + len_len];
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	695b      	ldr	r3, [r3, #20]
 8008396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008398:	3202      	adds	r2, #2
 800839a:	441a      	add	r2, r3
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	601a      	str	r2, [r3, #0]
    paramSkipBytes(context, 2 + len_len + data_len);
 80083a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a2:	1c9a      	adds	r2, r3, #2
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	4413      	add	r3, r2
 80083a8:	4619      	mov	r1, r3
 80083aa:	68f8      	ldr	r0, [r7, #12]
 80083ac:	f7ff fef8 	bl	80081a0 <paramSkipBytes>
    return TRUE;
 80083b0:	2301      	movs	r3, #1
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3728      	adds	r7, #40	; 0x28
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}
	...

080083bc <SCPI_ParamBool>:
 * @param context
 * @param value
 * @param mandatory
 * @return 
 */
scpi_bool_t SCPI_ParamBool(scpi_t * context, scpi_bool_t * value, scpi_bool_t mandatory) {
 80083bc:	b580      	push	{r7, lr}
 80083be:	b088      	sub	sp, #32
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	60b9      	str	r1, [r7, #8]
 80083c6:	4613      	mov	r3, r2
 80083c8:	71fb      	strb	r3, [r7, #7]
    const char * param;
    size_t param_len;
    size_t num_len;
    int32_t i;

    if (!value) {
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d101      	bne.n	80083d4 <SCPI_ParamBool+0x18>
        return FALSE;
 80083d0:	2300      	movs	r3, #0
 80083d2:	e045      	b.n	8008460 <SCPI_ParamBool+0xa4>
    }

    if (!SCPI_ParamString(context, &param, &param_len, mandatory)) {
 80083d4:	79fb      	ldrb	r3, [r7, #7]
 80083d6:	f107 0214 	add.w	r2, r7, #20
 80083da:	f107 0118 	add.w	r1, r7, #24
 80083de:	68f8      	ldr	r0, [r7, #12]
 80083e0:	f7ff ff4b 	bl	800827a <SCPI_ParamString>
 80083e4:	4603      	mov	r3, r0
 80083e6:	f083 0301 	eor.w	r3, r3, #1
 80083ea:	b2db      	uxtb	r3, r3
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d001      	beq.n	80083f4 <SCPI_ParamBool+0x38>
        return FALSE;
 80083f0:	2300      	movs	r3, #0
 80083f2:	e035      	b.n	8008460 <SCPI_ParamBool+0xa4>
    }

    if (matchPattern("ON", 2, param, param_len)) {
 80083f4:	69ba      	ldr	r2, [r7, #24]
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	2102      	movs	r1, #2
 80083fa:	481b      	ldr	r0, [pc, #108]	; (8008468 <SCPI_ParamBool+0xac>)
 80083fc:	f000 fc68 	bl	8008cd0 <matchPattern>
 8008400:	4603      	mov	r3, r0
 8008402:	2b00      	cmp	r3, #0
 8008404:	d003      	beq.n	800840e <SCPI_ParamBool+0x52>
        *value = TRUE;
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	2201      	movs	r2, #1
 800840a:	701a      	strb	r2, [r3, #0]
 800840c:	e027      	b.n	800845e <SCPI_ParamBool+0xa2>
    } else if (matchPattern("OFF", 3, param, param_len)) {
 800840e:	69ba      	ldr	r2, [r7, #24]
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	2103      	movs	r1, #3
 8008414:	4815      	ldr	r0, [pc, #84]	; (800846c <SCPI_ParamBool+0xb0>)
 8008416:	f000 fc5b 	bl	8008cd0 <matchPattern>
 800841a:	4603      	mov	r3, r0
 800841c:	2b00      	cmp	r3, #0
 800841e:	d003      	beq.n	8008428 <SCPI_ParamBool+0x6c>
        *value = FALSE;
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	2200      	movs	r2, #0
 8008424:	701a      	strb	r2, [r3, #0]
 8008426:	e01a      	b.n	800845e <SCPI_ParamBool+0xa2>
    } else {
        num_len = strToLong(param, &i);
 8008428:	69bb      	ldr	r3, [r7, #24]
 800842a:	f107 0210 	add.w	r2, r7, #16
 800842e:	4611      	mov	r1, r2
 8008430:	4618      	mov	r0, r3
 8008432:	f000 fab1 	bl	8008998 <strToLong>
 8008436:	61f8      	str	r0, [r7, #28]

        if (num_len != param_len) {
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	69fa      	ldr	r2, [r7, #28]
 800843c:	429a      	cmp	r2, r3
 800843e:	d006      	beq.n	800844e <SCPI_ParamBool+0x92>
            SCPI_ErrorPush(context, SCPI_ERROR_SUFFIX_NOT_ALLOWED);
 8008440:	f06f 0189 	mvn.w	r1, #137	; 0x89
 8008444:	68f8      	ldr	r0, [r7, #12]
 8008446:	f7fe ffd5 	bl	80073f4 <SCPI_ErrorPush>
            return FALSE;
 800844a:	2300      	movs	r3, #0
 800844c:	e008      	b.n	8008460 <SCPI_ParamBool+0xa4>
        }

        *value = i ? TRUE : FALSE;
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	2b00      	cmp	r3, #0
 8008452:	bf14      	ite	ne
 8008454:	2301      	movne	r3, #1
 8008456:	2300      	moveq	r3, #0
 8008458:	b2da      	uxtb	r2, r3
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	701a      	strb	r2, [r3, #0]
    }

    return TRUE;
 800845e:	2301      	movs	r3, #1
}
 8008460:	4618      	mov	r0, r3
 8008462:	3720      	adds	r7, #32
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}
 8008468:	0800e7f0 	.word	0x0800e7f0
 800846c:	0800e7f4 	.word	0x0800e7f4

08008470 <translateSpecialNumber>:
 * @param str string to be recognised
 * @param len length of string
 * @param value resultin value
 * @return TRUE if str matches one of specs patterns
 */
static scpi_bool_t translateSpecialNumber(const scpi_special_number_def_t * specs, const char * str, size_t len, scpi_number_t * value) {
 8008470:	b590      	push	{r4, r7, lr}
 8008472:	b087      	sub	sp, #28
 8008474:	af00      	add	r7, sp, #0
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	60b9      	str	r1, [r7, #8]
 800847a:	607a      	str	r2, [r7, #4]
 800847c:	603b      	str	r3, [r7, #0]
    int i;

    value->value = 0.0;
 800847e:	6839      	ldr	r1, [r7, #0]
 8008480:	f04f 0200 	mov.w	r2, #0
 8008484:	f04f 0300 	mov.w	r3, #0
 8008488:	e9c1 2300 	strd	r2, r3, [r1]
    value->unit = SCPI_UNIT_NONE;
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	2200      	movs	r2, #0
 8008490:	721a      	strb	r2, [r3, #8]
    value->type = SCPI_NUM_NUMBER;
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	2200      	movs	r2, #0
 8008496:	725a      	strb	r2, [r3, #9]

    if (specs == NULL) {
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d101      	bne.n	80084a2 <translateSpecialNumber+0x32>
        return FALSE;
 800849e:	2300      	movs	r3, #0
 80084a0:	e02c      	b.n	80084fc <translateSpecialNumber+0x8c>
    }

    for (i = 0; specs[i].name != NULL; i++) {
 80084a2:	2300      	movs	r3, #0
 80084a4:	617b      	str	r3, [r7, #20]
 80084a6:	e021      	b.n	80084ec <translateSpecialNumber+0x7c>
        if (matchPattern(specs[i].name, strlen(specs[i].name), str, len)) {
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	00db      	lsls	r3, r3, #3
 80084ac:	68fa      	ldr	r2, [r7, #12]
 80084ae:	4413      	add	r3, r2
 80084b0:	681c      	ldr	r4, [r3, #0]
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	00db      	lsls	r3, r3, #3
 80084b6:	68fa      	ldr	r2, [r7, #12]
 80084b8:	4413      	add	r3, r2
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4618      	mov	r0, r3
 80084be:	f7f7 fe87 	bl	80001d0 <strlen>
 80084c2:	4601      	mov	r1, r0
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	68ba      	ldr	r2, [r7, #8]
 80084c8:	4620      	mov	r0, r4
 80084ca:	f000 fc01 	bl	8008cd0 <matchPattern>
 80084ce:	4603      	mov	r3, r0
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d008      	beq.n	80084e6 <translateSpecialNumber+0x76>
            value->type = specs[i].type;
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	00db      	lsls	r3, r3, #3
 80084d8:	68fa      	ldr	r2, [r7, #12]
 80084da:	4413      	add	r3, r2
 80084dc:	791a      	ldrb	r2, [r3, #4]
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	725a      	strb	r2, [r3, #9]
            return TRUE;
 80084e2:	2301      	movs	r3, #1
 80084e4:	e00a      	b.n	80084fc <translateSpecialNumber+0x8c>
    for (i = 0; specs[i].name != NULL; i++) {
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	3301      	adds	r3, #1
 80084ea:	617b      	str	r3, [r7, #20]
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	00db      	lsls	r3, r3, #3
 80084f0:	68fa      	ldr	r2, [r7, #12]
 80084f2:	4413      	add	r3, r2
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d1d6      	bne.n	80084a8 <translateSpecialNumber+0x38>
        }
    }

    return FALSE;
 80084fa:	2300      	movs	r3, #0
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	371c      	adds	r7, #28
 8008500:	46bd      	mov	sp, r7
 8008502:	bd90      	pop	{r4, r7, pc}

08008504 <translateSpecialNumberInverse>:
 * Convert special number type to its string representation
 * @param specs specifications of special numbers (patterns)
 * @param type type of special number
 * @return String representing special number or NULL
 */
static const char * translateSpecialNumberInverse(const scpi_special_number_def_t * specs, scpi_special_number_t type) {
 8008504:	b480      	push	{r7}
 8008506:	b085      	sub	sp, #20
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	460b      	mov	r3, r1
 800850e:	70fb      	strb	r3, [r7, #3]
    int i;

    if (specs == NULL) {
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d101      	bne.n	800851a <translateSpecialNumberInverse+0x16>
        return NULL;
 8008516:	2300      	movs	r3, #0
 8008518:	e01b      	b.n	8008552 <translateSpecialNumberInverse+0x4e>
    }
    
    for (i = 0; specs[i].name != NULL; i++) {
 800851a:	2300      	movs	r3, #0
 800851c:	60fb      	str	r3, [r7, #12]
 800851e:	e010      	b.n	8008542 <translateSpecialNumberInverse+0x3e>
        if (specs[i].type == type) {
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	00db      	lsls	r3, r3, #3
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	4413      	add	r3, r2
 8008528:	791b      	ldrb	r3, [r3, #4]
 800852a:	78fa      	ldrb	r2, [r7, #3]
 800852c:	429a      	cmp	r2, r3
 800852e:	d105      	bne.n	800853c <translateSpecialNumberInverse+0x38>
            return specs[i].name;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	00db      	lsls	r3, r3, #3
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	4413      	add	r3, r2
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	e00a      	b.n	8008552 <translateSpecialNumberInverse+0x4e>
    for (i = 0; specs[i].name != NULL; i++) {
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	3301      	adds	r3, #1
 8008540:	60fb      	str	r3, [r7, #12]
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	00db      	lsls	r3, r3, #3
 8008546:	687a      	ldr	r2, [r7, #4]
 8008548:	4413      	add	r3, r2
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d1e7      	bne.n	8008520 <translateSpecialNumberInverse+0x1c>
        }
    }

    return NULL;
 8008550:	2300      	movs	r3, #0
}
 8008552:	4618      	mov	r0, r3
 8008554:	3714      	adds	r7, #20
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr

0800855e <translateUnit>:
 * @param units units patterns
 * @param unit text representation of unknown unit
 * @param len length of text representation
 * @return pointer of related unit definition or NULL
 */
static const scpi_unit_def_t * translateUnit(const scpi_unit_def_t * units, const char * unit, size_t len) {
 800855e:	b590      	push	{r4, r7, lr}
 8008560:	b087      	sub	sp, #28
 8008562:	af00      	add	r7, sp, #0
 8008564:	60f8      	str	r0, [r7, #12]
 8008566:	60b9      	str	r1, [r7, #8]
 8008568:	607a      	str	r2, [r7, #4]
    int i;
    
    if (units == NULL) {
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d101      	bne.n	8008574 <translateUnit+0x16>
        return NULL;
 8008570:	2300      	movs	r3, #0
 8008572:	e028      	b.n	80085c6 <translateUnit+0x68>
    }
    
    for (i = 0; units[i].name != NULL; i++) {
 8008574:	2300      	movs	r3, #0
 8008576:	617b      	str	r3, [r7, #20]
 8008578:	e01d      	b.n	80085b6 <translateUnit+0x58>
        if (compareStr(unit, len, units[i].name, strlen(units[i].name))) {
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	011b      	lsls	r3, r3, #4
 800857e:	68fa      	ldr	r2, [r7, #12]
 8008580:	4413      	add	r3, r2
 8008582:	681c      	ldr	r4, [r3, #0]
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	011b      	lsls	r3, r3, #4
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	4413      	add	r3, r2
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4618      	mov	r0, r3
 8008590:	f7f7 fe1e 	bl	80001d0 <strlen>
 8008594:	4603      	mov	r3, r0
 8008596:	4622      	mov	r2, r4
 8008598:	6879      	ldr	r1, [r7, #4]
 800859a:	68b8      	ldr	r0, [r7, #8]
 800859c:	f000 fa2b 	bl	80089f6 <compareStr>
 80085a0:	4603      	mov	r3, r0
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d004      	beq.n	80085b0 <translateUnit+0x52>
            return &units[i];
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	011b      	lsls	r3, r3, #4
 80085aa:	68fa      	ldr	r2, [r7, #12]
 80085ac:	4413      	add	r3, r2
 80085ae:	e00a      	b.n	80085c6 <translateUnit+0x68>
    for (i = 0; units[i].name != NULL; i++) {
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	3301      	adds	r3, #1
 80085b4:	617b      	str	r3, [r7, #20]
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	011b      	lsls	r3, r3, #4
 80085ba:	68fa      	ldr	r2, [r7, #12]
 80085bc:	4413      	add	r3, r2
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d1da      	bne.n	800857a <translateUnit+0x1c>
        }
    }

    return NULL;
 80085c4:	2300      	movs	r3, #0
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	371c      	adds	r7, #28
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd90      	pop	{r4, r7, pc}
	...

080085d0 <translateUnitInverse>:
 * Convert unit definition to string
 * @param units units definitions (patterns)
 * @param unit type of unit
 * @return string representation of unit
 */
static const char * translateUnitInverse(const scpi_unit_def_t * units, const scpi_unit_t unit) {
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	460b      	mov	r3, r1
 80085da:	70fb      	strb	r3, [r7, #3]
    int i;
    
    if (units == NULL) {
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d101      	bne.n	80085e6 <translateUnitInverse+0x16>
        return NULL;
 80085e2:	2300      	movs	r3, #0
 80085e4:	e029      	b.n	800863a <translateUnitInverse+0x6a>
    }
    
    for (i = 0; units[i].name != NULL; i++) {
 80085e6:	2300      	movs	r3, #0
 80085e8:	60fb      	str	r3, [r7, #12]
 80085ea:	e01e      	b.n	800862a <translateUnitInverse+0x5a>
        if ((units[i].unit == unit) && (units[i].mult == 1)) {
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	011b      	lsls	r3, r3, #4
 80085f0:	687a      	ldr	r2, [r7, #4]
 80085f2:	4413      	add	r3, r2
 80085f4:	791b      	ldrb	r3, [r3, #4]
 80085f6:	78fa      	ldrb	r2, [r7, #3]
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d113      	bne.n	8008624 <translateUnitInverse+0x54>
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	011b      	lsls	r3, r3, #4
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	4413      	add	r3, r2
 8008604:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8008608:	f04f 0200 	mov.w	r2, #0
 800860c:	4b0d      	ldr	r3, [pc, #52]	; (8008644 <translateUnitInverse+0x74>)
 800860e:	f7f8 fa5b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008612:	4603      	mov	r3, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	d005      	beq.n	8008624 <translateUnitInverse+0x54>
            return units[i].name;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	011b      	lsls	r3, r3, #4
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	4413      	add	r3, r2
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	e00a      	b.n	800863a <translateUnitInverse+0x6a>
    for (i = 0; units[i].name != NULL; i++) {
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	3301      	adds	r3, #1
 8008628:	60fb      	str	r3, [r7, #12]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	011b      	lsls	r3, r3, #4
 800862e:	687a      	ldr	r2, [r7, #4]
 8008630:	4413      	add	r3, r2
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d1d9      	bne.n	80085ec <translateUnitInverse+0x1c>
        }
    }

    return NULL;
 8008638:	2300      	movs	r3, #0
}
 800863a:	4618      	mov	r0, r3
 800863c:	3710      	adds	r7, #16
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
 8008642:	bf00      	nop
 8008644:	3ff00000 	.word	0x3ff00000

08008648 <transformNumber>:
 * @param unit text representation of unit
 * @param len length of text representation
 * @param value preparsed numeric value
 * @return TRUE if value parameter was converted to base units
 */
static scpi_bool_t transformNumber(scpi_t * context, const char * unit, size_t len, scpi_number_t * value) {
 8008648:	b580      	push	{r7, lr}
 800864a:	b086      	sub	sp, #24
 800864c:	af00      	add	r7, sp, #0
 800864e:	60f8      	str	r0, [r7, #12]
 8008650:	60b9      	str	r1, [r7, #8]
 8008652:	607a      	str	r2, [r7, #4]
 8008654:	603b      	str	r3, [r7, #0]
    size_t s;
    const scpi_unit_def_t * unitDef;
    s = skipWhitespace(unit, len);
 8008656:	6879      	ldr	r1, [r7, #4]
 8008658:	68b8      	ldr	r0, [r7, #8]
 800865a:	f000 fab1 	bl	8008bc0 <skipWhitespace>
 800865e:	6178      	str	r0, [r7, #20]

    if (s == len) {
 8008660:	697a      	ldr	r2, [r7, #20]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	429a      	cmp	r2, r3
 8008666:	d104      	bne.n	8008672 <transformNumber+0x2a>
        value->unit = SCPI_UNIT_NONE;
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	2200      	movs	r2, #0
 800866c:	721a      	strb	r2, [r3, #8]
        return TRUE;
 800866e:	2301      	movs	r3, #1
 8008670:	e027      	b.n	80086c2 <transformNumber+0x7a>
    }

    unitDef = translateUnit(context->units, unit + s, len - s);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008676:	68ba      	ldr	r2, [r7, #8]
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	18d1      	adds	r1, r2, r3
 800867c:	687a      	ldr	r2, [r7, #4]
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	1ad3      	subs	r3, r2, r3
 8008682:	461a      	mov	r2, r3
 8008684:	f7ff ff6b 	bl	800855e <translateUnit>
 8008688:	6138      	str	r0, [r7, #16]

    if (unitDef == NULL) {
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d106      	bne.n	800869e <transformNumber+0x56>
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_SUFFIX);
 8008690:	f06f 0182 	mvn.w	r1, #130	; 0x82
 8008694:	68f8      	ldr	r0, [r7, #12]
 8008696:	f7fe fead 	bl	80073f4 <SCPI_ErrorPush>
        return FALSE;
 800869a:	2300      	movs	r3, #0
 800869c:	e011      	b.n	80086c2 <transformNumber+0x7a>
    }

    value->value *= unitDef->mult;
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80086aa:	f7f7 ffa5 	bl	80005f8 <__aeabi_dmul>
 80086ae:	4602      	mov	r2, r0
 80086b0:	460b      	mov	r3, r1
 80086b2:	6839      	ldr	r1, [r7, #0]
 80086b4:	e9c1 2300 	strd	r2, r3, [r1]
    value->unit = unitDef->unit;
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	791a      	ldrb	r2, [r3, #4]
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	721a      	strb	r2, [r3, #8]

    return TRUE;
 80086c0:	2301      	movs	r3, #1
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3718      	adds	r7, #24
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}

080086ca <SCPI_ParamNumber>:
 * @param context
 * @param value return value
 * @param mandatory if the parameter is mandatory
 * @return 
 */
scpi_bool_t SCPI_ParamNumber(scpi_t * context, scpi_number_t * value, scpi_bool_t mandatory) {
 80086ca:	b580      	push	{r7, lr}
 80086cc:	b088      	sub	sp, #32
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	60f8      	str	r0, [r7, #12]
 80086d2:	60b9      	str	r1, [r7, #8]
 80086d4:	4613      	mov	r3, r2
 80086d6:	71fb      	strb	r3, [r7, #7]
    const char * param;
    size_t len;
    size_t numlen;

    /* read parameter and shift to the next one */
    result = SCPI_ParamString(context, &param, &len, mandatory);
 80086d8:	79fb      	ldrb	r3, [r7, #7]
 80086da:	f107 0210 	add.w	r2, r7, #16
 80086de:	f107 0114 	add.w	r1, r7, #20
 80086e2:	68f8      	ldr	r0, [r7, #12]
 80086e4:	f7ff fdc9 	bl	800827a <SCPI_ParamString>
 80086e8:	4603      	mov	r3, r0
 80086ea:	77fb      	strb	r3, [r7, #31]

    /* value not initializes */
    if (!value) {
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d101      	bne.n	80086f6 <SCPI_ParamNumber+0x2c>
        return FALSE;
 80086f2:	2300      	movs	r3, #0
 80086f4:	e031      	b.n	800875a <SCPI_ParamNumber+0x90>
    }

    value->type = SCPI_NUM_DEF;
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	2203      	movs	r2, #3
 80086fa:	725a      	strb	r2, [r3, #9]

    /* if parameter was not found, return TRUE or FALSE according
     * to fact that parameter was mandatory or not */
    if (!result) {
 80086fc:	7ffb      	ldrb	r3, [r7, #31]
 80086fe:	f083 0301 	eor.w	r3, r3, #1
 8008702:	b2db      	uxtb	r3, r3
 8008704:	2b00      	cmp	r3, #0
 8008706:	d004      	beq.n	8008712 <SCPI_ParamNumber+0x48>
        return mandatory ? FALSE : TRUE;
 8008708:	79fb      	ldrb	r3, [r7, #7]
 800870a:	f083 0301 	eor.w	r3, r3, #1
 800870e:	b2db      	uxtb	r3, r3
 8008710:	e023      	b.n	800875a <SCPI_ParamNumber+0x90>
    }

    /* convert string to special number type */
    if (translateSpecialNumber(context->special_numbers, param, len, value)) {
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008716:	6979      	ldr	r1, [r7, #20]
 8008718:	693a      	ldr	r2, [r7, #16]
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	f7ff fea8 	bl	8008470 <translateSpecialNumber>
 8008720:	4603      	mov	r3, r0
 8008722:	2b00      	cmp	r3, #0
 8008724:	d001      	beq.n	800872a <SCPI_ParamNumber+0x60>
        /* found special type */
        return TRUE;
 8008726:	2301      	movs	r3, #1
 8008728:	e017      	b.n	800875a <SCPI_ParamNumber+0x90>
    }

    /* convert text from double - no special type */
    numlen = strToDouble(param, &value->value);
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	68ba      	ldr	r2, [r7, #8]
 800872e:	4611      	mov	r1, r2
 8008730:	4618      	mov	r0, r3
 8008732:	f000 f947 	bl	80089c4 <strToDouble>
 8008736:	61b8      	str	r0, [r7, #24]

    /* transform units of value */
    if (numlen <= len) {
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	69ba      	ldr	r2, [r7, #24]
 800873c:	429a      	cmp	r2, r3
 800873e:	d80b      	bhi.n	8008758 <SCPI_ParamNumber+0x8e>
        return transformNumber(context, param + numlen, len - numlen, value);
 8008740:	697a      	ldr	r2, [r7, #20]
 8008742:	69bb      	ldr	r3, [r7, #24]
 8008744:	18d1      	adds	r1, r2, r3
 8008746:	693a      	ldr	r2, [r7, #16]
 8008748:	69bb      	ldr	r3, [r7, #24]
 800874a:	1ad2      	subs	r2, r2, r3
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	68f8      	ldr	r0, [r7, #12]
 8008750:	f7ff ff7a 	bl	8008648 <transformNumber>
 8008754:	4603      	mov	r3, r0
 8008756:	e000      	b.n	800875a <SCPI_ParamNumber+0x90>
    }
    return FALSE;
 8008758:	2300      	movs	r3, #0

}
 800875a:	4618      	mov	r0, r3
 800875c:	3720      	adds	r7, #32
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
	...

08008764 <SCPI_NumberToStr>:
 * @param value number value
 * @param str target string
 * @param len max length of string
 * @return number of chars written to string
 */
size_t SCPI_NumberToStr(scpi_t * context, scpi_number_t * value, char * str, size_t len) {
 8008764:	b580      	push	{r7, lr}
 8008766:	b088      	sub	sp, #32
 8008768:	af00      	add	r7, sp, #0
 800876a:	60f8      	str	r0, [r7, #12]
 800876c:	60b9      	str	r1, [r7, #8]
 800876e:	607a      	str	r2, [r7, #4]
 8008770:	603b      	str	r3, [r7, #0]
    const char * type;
    const char * unit;
    size_t result;

    if (!value || !str) {
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d002      	beq.n	800877e <SCPI_NumberToStr+0x1a>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d101      	bne.n	8008782 <SCPI_NumberToStr+0x1e>
        return 0;
 800877e:	2300      	movs	r3, #0
 8008780:	e049      	b.n	8008816 <SCPI_NumberToStr+0xb2>
    }

    type = translateSpecialNumberInverse(context->special_numbers, value->type);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	7a5b      	ldrb	r3, [r3, #9]
 800878a:	4619      	mov	r1, r3
 800878c:	4610      	mov	r0, r2
 800878e:	f7ff feb9 	bl	8008504 <translateSpecialNumberInverse>
 8008792:	61b8      	str	r0, [r7, #24]

    if (type) {
 8008794:	69bb      	ldr	r3, [r7, #24]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d012      	beq.n	80087c0 <SCPI_NumberToStr+0x5c>
        strncpy(str, type, len);
 800879a:	683a      	ldr	r2, [r7, #0]
 800879c:	69b9      	ldr	r1, [r7, #24]
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f002 fd01 	bl	800b1a6 <strncpy>
        return min(strlen(type), len);
 80087a4:	69b8      	ldr	r0, [r7, #24]
 80087a6:	f7f7 fd13 	bl	80001d0 <strlen>
 80087aa:	4602      	mov	r2, r0
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d904      	bls.n	80087bc <SCPI_NumberToStr+0x58>
 80087b2:	69b8      	ldr	r0, [r7, #24]
 80087b4:	f7f7 fd0c 	bl	80001d0 <strlen>
 80087b8:	4603      	mov	r3, r0
 80087ba:	e02c      	b.n	8008816 <SCPI_NumberToStr+0xb2>
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	e02a      	b.n	8008816 <SCPI_NumberToStr+0xb2>
    }

    result = doubleToStr(value->value, str, len);
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	ed93 7b00 	vldr	d7, [r3]
 80087c6:	6839      	ldr	r1, [r7, #0]
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	eeb0 0a47 	vmov.f32	s0, s14
 80087ce:	eef0 0a67 	vmov.f32	s1, s15
 80087d2:	f000 f8c9 	bl	8008968 <doubleToStr>
 80087d6:	61f8      	str	r0, [r7, #28]

    unit = translateUnitInverse(context->units, value->unit);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	7a1b      	ldrb	r3, [r3, #8]
 80087e0:	4619      	mov	r1, r3
 80087e2:	4610      	mov	r0, r2
 80087e4:	f7ff fef4 	bl	80085d0 <translateUnitInverse>
 80087e8:	6178      	str	r0, [r7, #20]

    if (unit) {
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d011      	beq.n	8008814 <SCPI_NumberToStr+0xb0>
        strncat(str, " ", len);
 80087f0:	683a      	ldr	r2, [r7, #0]
 80087f2:	490b      	ldr	r1, [pc, #44]	; (8008820 <SCPI_NumberToStr+0xbc>)
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f002 fcc3 	bl	800b180 <strncat>
        strncat(str, unit, len);
 80087fa:	683a      	ldr	r2, [r7, #0]
 80087fc:	6979      	ldr	r1, [r7, #20]
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f002 fcbe 	bl	800b180 <strncat>
        result += strlen(unit) + 1;
 8008804:	6978      	ldr	r0, [r7, #20]
 8008806:	f7f7 fce3 	bl	80001d0 <strlen>
 800880a:	4602      	mov	r2, r0
 800880c:	69fb      	ldr	r3, [r7, #28]
 800880e:	4413      	add	r3, r2
 8008810:	3301      	adds	r3, #1
 8008812:	61fb      	str	r3, [r7, #28]
    }

    return result;
 8008814:	69fb      	ldr	r3, [r7, #28]
}
 8008816:	4618      	mov	r0, r3
 8008818:	3720      	adds	r7, #32
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	0800e890 	.word	0x0800e890

08008824 <strnpbrk>:
 * @param str
 * @param size
 * @param set
 * @return 
 */
const char * strnpbrk(const char *str, size_t size, const char *set) {
 8008824:	b480      	push	{r7}
 8008826:	b089      	sub	sp, #36	; 0x24
 8008828:	af00      	add	r7, sp, #0
 800882a:	60f8      	str	r0, [r7, #12]
 800882c:	60b9      	str	r1, [r7, #8]
 800882e:	607a      	str	r2, [r7, #4]
    const char *scanp;
    long c, sc;
    const char * strend = str + size;
 8008830:	68fa      	ldr	r2, [r7, #12]
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	4413      	add	r3, r2
 8008836:	61bb      	str	r3, [r7, #24]

    while ((strend != str) && ((c = *str++) != 0)) {
 8008838:	e011      	b.n	800885e <strnpbrk+0x3a>
        for (scanp = set; (sc = *scanp++) != '\0';)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	61fb      	str	r3, [r7, #28]
 800883e:	e006      	b.n	800884e <strnpbrk+0x2a>
            if (sc == c)
 8008840:	693a      	ldr	r2, [r7, #16]
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	429a      	cmp	r2, r3
 8008846:	d102      	bne.n	800884e <strnpbrk+0x2a>
                return str - 1;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	3b01      	subs	r3, #1
 800884c:	e014      	b.n	8008878 <strnpbrk+0x54>
        for (scanp = set; (sc = *scanp++) != '\0';)
 800884e:	69fb      	ldr	r3, [r7, #28]
 8008850:	1c5a      	adds	r2, r3, #1
 8008852:	61fa      	str	r2, [r7, #28]
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	613b      	str	r3, [r7, #16]
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d1f0      	bne.n	8008840 <strnpbrk+0x1c>
    while ((strend != str) && ((c = *str++) != 0)) {
 800885e:	69ba      	ldr	r2, [r7, #24]
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	429a      	cmp	r2, r3
 8008864:	d007      	beq.n	8008876 <strnpbrk+0x52>
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	1c5a      	adds	r2, r3, #1
 800886a:	60fa      	str	r2, [r7, #12]
 800886c:	781b      	ldrb	r3, [r3, #0]
 800886e:	617b      	str	r3, [r7, #20]
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d1e1      	bne.n	800883a <strnpbrk+0x16>
    }
    return (NULL);
 8008876:	2300      	movs	r3, #0
}
 8008878:	4618      	mov	r0, r3
 800887a:	3724      	adds	r7, #36	; 0x24
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr

08008884 <longToStr>:
 * @param val   integer value
 * @param str   converted textual representation
 * @param len   string buffer length
 * @return number of bytes written to str (without '\0')
 */
size_t longToStr(int32_t val, char * str, size_t len) {
 8008884:	b480      	push	{r7}
 8008886:	b089      	sub	sp, #36	; 0x24
 8008888:	af00      	add	r7, sp, #0
 800888a:	60f8      	str	r0, [r7, #12]
 800888c:	60b9      	str	r1, [r7, #8]
 800888e:	607a      	str	r2, [r7, #4]
    uint32_t x = 1000000000L;
 8008890:	4b33      	ldr	r3, [pc, #204]	; (8008960 <longToStr+0xdc>)
 8008892:	61fb      	str	r3, [r7, #28]
    int_fast8_t digit;
    size_t pos = 0;
 8008894:	2300      	movs	r3, #0
 8008896:	61bb      	str	r3, [r7, #24]

    if (val == 0) {
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d10b      	bne.n	80088b6 <longToStr+0x32>
        if (pos < len) str[pos++] = '0';
 800889e:	69ba      	ldr	r2, [r7, #24]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d24b      	bcs.n	800893e <longToStr+0xba>
 80088a6:	69bb      	ldr	r3, [r7, #24]
 80088a8:	1c5a      	adds	r2, r3, #1
 80088aa:	61ba      	str	r2, [r7, #24]
 80088ac:	68ba      	ldr	r2, [r7, #8]
 80088ae:	4413      	add	r3, r2
 80088b0:	2230      	movs	r2, #48	; 0x30
 80088b2:	701a      	strb	r2, [r3, #0]
 80088b4:	e043      	b.n	800893e <longToStr+0xba>
    } else {
        if (val < 0) {
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	da14      	bge.n	80088e6 <longToStr+0x62>
            val = -val;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	425b      	negs	r3, r3
 80088c0:	60fb      	str	r3, [r7, #12]
            if (pos < len) str[pos++] = '-';
 80088c2:	69ba      	ldr	r2, [r7, #24]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d20d      	bcs.n	80088e6 <longToStr+0x62>
 80088ca:	69bb      	ldr	r3, [r7, #24]
 80088cc:	1c5a      	adds	r2, r3, #1
 80088ce:	61ba      	str	r2, [r7, #24]
 80088d0:	68ba      	ldr	r2, [r7, #8]
 80088d2:	4413      	add	r3, r2
 80088d4:	222d      	movs	r2, #45	; 0x2d
 80088d6:	701a      	strb	r2, [r3, #0]
        }

        while ((val / x) == 0) {
 80088d8:	e005      	b.n	80088e6 <longToStr+0x62>
            x /= 10;
 80088da:	69fb      	ldr	r3, [r7, #28]
 80088dc:	4a21      	ldr	r2, [pc, #132]	; (8008964 <longToStr+0xe0>)
 80088de:	fba2 2303 	umull	r2, r3, r2, r3
 80088e2:	08db      	lsrs	r3, r3, #3
 80088e4:	61fb      	str	r3, [r7, #28]
        while ((val / x) == 0) {
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	69fa      	ldr	r2, [r7, #28]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d8f5      	bhi.n	80088da <longToStr+0x56>
        }

        do {
            digit = (uint8_t) (val / x);
 80088ee:	68fa      	ldr	r2, [r7, #12]
 80088f0:	69fb      	ldr	r3, [r7, #28]
 80088f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80088f6:	b2db      	uxtb	r3, r3
 80088f8:	617b      	str	r3, [r7, #20]
            if (pos < len) str[pos++] = digit + '0';
 80088fa:	69ba      	ldr	r2, [r7, #24]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	429a      	cmp	r2, r3
 8008900:	d209      	bcs.n	8008916 <longToStr+0x92>
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	b2da      	uxtb	r2, r3
 8008906:	69bb      	ldr	r3, [r7, #24]
 8008908:	1c59      	adds	r1, r3, #1
 800890a:	61b9      	str	r1, [r7, #24]
 800890c:	68b9      	ldr	r1, [r7, #8]
 800890e:	440b      	add	r3, r1
 8008910:	3230      	adds	r2, #48	; 0x30
 8008912:	b2d2      	uxtb	r2, r2
 8008914:	701a      	strb	r2, [r3, #0]
            val -= digit * x;
 8008916:	68fa      	ldr	r2, [r7, #12]
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	69f9      	ldr	r1, [r7, #28]
 800891c:	fb01 f303 	mul.w	r3, r1, r3
 8008920:	1ad3      	subs	r3, r2, r3
 8008922:	60fb      	str	r3, [r7, #12]
            x /= 10;
 8008924:	69fb      	ldr	r3, [r7, #28]
 8008926:	4a0f      	ldr	r2, [pc, #60]	; (8008964 <longToStr+0xe0>)
 8008928:	fba2 2303 	umull	r2, r3, r2, r3
 800892c:	08db      	lsrs	r3, r3, #3
 800892e:	61fb      	str	r3, [r7, #28]
        } while (x && (pos < len));
 8008930:	69fb      	ldr	r3, [r7, #28]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d003      	beq.n	800893e <longToStr+0xba>
 8008936:	69ba      	ldr	r2, [r7, #24]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	429a      	cmp	r2, r3
 800893c:	d3d7      	bcc.n	80088ee <longToStr+0x6a>
    }

    if (pos < len) str[pos] = 0;
 800893e:	69ba      	ldr	r2, [r7, #24]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	429a      	cmp	r2, r3
 8008944:	d204      	bcs.n	8008950 <longToStr+0xcc>
 8008946:	68ba      	ldr	r2, [r7, #8]
 8008948:	69bb      	ldr	r3, [r7, #24]
 800894a:	4413      	add	r3, r2
 800894c:	2200      	movs	r2, #0
 800894e:	701a      	strb	r2, [r3, #0]
    return pos;
 8008950:	69bb      	ldr	r3, [r7, #24]
}
 8008952:	4618      	mov	r0, r3
 8008954:	3724      	adds	r7, #36	; 0x24
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr
 800895e:	bf00      	nop
 8008960:	3b9aca00 	.word	0x3b9aca00
 8008964:	cccccccd 	.word	0xcccccccd

08008968 <doubleToStr>:
 * @param val   double value
 * @param str   converted textual representation
 * @param len   string buffer length
 * @return number of bytes written to str (without '\0')
 */
size_t doubleToStr(double val, char * str, size_t len) {
 8008968:	b580      	push	{r7, lr}
 800896a:	b086      	sub	sp, #24
 800896c:	af02      	add	r7, sp, #8
 800896e:	ed87 0b02 	vstr	d0, [r7, #8]
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]
    return snprintf(str, len, "%lg", val);
 8008976:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800897a:	e9cd 2300 	strd	r2, r3, [sp]
 800897e:	4a05      	ldr	r2, [pc, #20]	; (8008994 <doubleToStr+0x2c>)
 8008980:	6839      	ldr	r1, [r7, #0]
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f002 fb86 	bl	800b094 <sniprintf>
 8008988:	4603      	mov	r3, r0
}
 800898a:	4618      	mov	r0, r3
 800898c:	3710      	adds	r7, #16
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop
 8008994:	0800e894 	.word	0x0800e894

08008998 <strToLong>:
 * Converts string to signed 32bit integer representation
 * @param str   string value
 * @param val   32bit integer result
 * @return      number of bytes used in string
 */
size_t strToLong(const char * str, int32_t * val) {
 8008998:	b580      	push	{r7, lr}
 800899a:	b084      	sub	sp, #16
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	6039      	str	r1, [r7, #0]
    char * endptr;
    *val = strtol(str, &endptr, 0);
 80089a2:	f107 030c 	add.w	r3, r7, #12
 80089a6:	2200      	movs	r2, #0
 80089a8:	4619      	mov	r1, r3
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f003 fad2 	bl	800bf54 <strtol>
 80089b0:	4602      	mov	r2, r0
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	601a      	str	r2, [r3, #0]
    return endptr - str;
 80089b6:	68fa      	ldr	r2, [r7, #12]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	1ad3      	subs	r3, r2, r3
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3710      	adds	r7, #16
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <strToDouble>:
 * Converts string to double representation
 * @param str   string value
 * @param val   double result
 * @return      number of bytes used in string
 */
size_t strToDouble(const char * str, double * val) {
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b084      	sub	sp, #16
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	6039      	str	r1, [r7, #0]
    char * endptr;
    *val = strtod(str, &endptr);
 80089ce:	f107 030c 	add.w	r3, r7, #12
 80089d2:	4619      	mov	r1, r3
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f003 fa2d 	bl	800be34 <strtod>
 80089da:	eeb0 7a40 	vmov.f32	s14, s0
 80089de:	eef0 7a60 	vmov.f32	s15, s1
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	ed83 7b00 	vstr	d7, [r3]
    return endptr - str;
 80089e8:	68fa      	ldr	r2, [r7, #12]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	1ad3      	subs	r3, r2, r3
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3710      	adds	r7, #16
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}

080089f6 <compareStr>:
 * @param len1
 * @param str2
 * @param len2
 * @return TRUE if len1==len2 and "len" characters of both strings are equal
 */
scpi_bool_t compareStr(const char * str1, size_t len1, const char * str2, size_t len2) {
 80089f6:	b580      	push	{r7, lr}
 80089f8:	b084      	sub	sp, #16
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	60f8      	str	r0, [r7, #12]
 80089fe:	60b9      	str	r1, [r7, #8]
 8008a00:	607a      	str	r2, [r7, #4]
 8008a02:	603b      	str	r3, [r7, #0]
    if (len1 != len2) {
 8008a04:	68ba      	ldr	r2, [r7, #8]
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d001      	beq.n	8008a10 <compareStr+0x1a>
        return FALSE;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	e00a      	b.n	8008a26 <compareStr+0x30>
    }

    if (SCPI_strncasecmp(str1, str2, len2) == 0) {
 8008a10:	683a      	ldr	r2, [r7, #0]
 8008a12:	6879      	ldr	r1, [r7, #4]
 8008a14:	68f8      	ldr	r0, [r7, #12]
 8008a16:	f002 fb91 	bl	800b13c <strncasecmp>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d101      	bne.n	8008a24 <compareStr+0x2e>
        return TRUE;
 8008a20:	2301      	movs	r3, #1
 8008a22:	e000      	b.n	8008a26 <compareStr+0x30>
    }

    return FALSE;
 8008a24:	2300      	movs	r3, #0
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3710      	adds	r7, #16
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}

08008a2e <isFinalState>:
typedef struct _locate_text_nfa locate_text_nfa;

/**
 * Test locate text state, if it is correct final state
 */
static scpi_bool_t isFinalState(locate_text_states state) {
 8008a2e:	b480      	push	{r7}
 8008a30:	b083      	sub	sp, #12
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	4603      	mov	r3, r0
 8008a36:	71fb      	strb	r3, [r7, #7]
    return (
        ((state) == STATE_COMMA)
        || ((state) == STATE_LAST_WHITESPACE)
        || ((state) == STATE_TEXT) ||
 8008a38:	79fb      	ldrb	r3, [r7, #7]
 8008a3a:	2b04      	cmp	r3, #4
 8008a3c:	d008      	beq.n	8008a50 <isFinalState+0x22>
        || ((state) == STATE_LAST_WHITESPACE)
 8008a3e:	79fb      	ldrb	r3, [r7, #7]
 8008a40:	2b03      	cmp	r3, #3
 8008a42:	d005      	beq.n	8008a50 <isFinalState+0x22>
        || ((state) == STATE_TEXT) ||
 8008a44:	79fb      	ldrb	r3, [r7, #7]
 8008a46:	2b02      	cmp	r3, #2
 8008a48:	d002      	beq.n	8008a50 <isFinalState+0x22>
 8008a4a:	79fb      	ldrb	r3, [r7, #7]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d101      	bne.n	8008a54 <isFinalState+0x26>
 8008a50:	2301      	movs	r3, #1
 8008a52:	e000      	b.n	8008a56 <isFinalState+0x28>
 8008a54:	2300      	movs	r3, #0
 8008a56:	f003 0301 	and.w	r3, r3, #1
 8008a5a:	b2db      	uxtb	r3, r3
        ((state) == STATE_FIRST_WHITESPACE)
    );
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	370c      	adds	r7, #12
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr

08008a68 <locateStrAutomaton>:
/**
 * Perform locateStr automaton to search string pattern
 * @param nfa stores automaton state
 * @param c current char processed
 */
static scpi_bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	460b      	mov	r3, r1
 8008a72:	70fb      	strb	r3, [r7, #3]
    switch(nfa->state) {
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d002      	beq.n	8008a82 <locateStrAutomaton+0x1a>
 8008a7c:	2b02      	cmp	r3, #2
 8008a7e:	d02a      	beq.n	8008ad6 <locateStrAutomaton+0x6e>
                nfa->stopIdx = nfa->i + 1;
            }
            break;

        default:
            break;            
 8008a80:	e040      	b.n	8008b04 <locateStrAutomaton+0x9c>
            if(isspace(c)) {
 8008a82:	78fb      	ldrb	r3, [r7, #3]
 8008a84:	3301      	adds	r3, #1
 8008a86:	4a28      	ldr	r2, [pc, #160]	; (8008b28 <locateStrAutomaton+0xc0>)
 8008a88:	4413      	add	r3, r2
 8008a8a:	781b      	ldrb	r3, [r3, #0]
 8008a8c:	f003 0308 	and.w	r3, r3, #8
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d00a      	beq.n	8008aaa <locateStrAutomaton+0x42>
                nfa->startIdx = nfa->stopIdx = nfa->i + 1;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	68db      	ldr	r3, [r3, #12]
 8008a98:	3301      	adds	r3, #1
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	609a      	str	r2, [r3, #8]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	689a      	ldr	r2, [r3, #8]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	605a      	str	r2, [r3, #4]
            break;
 8008aa8:	e02c      	b.n	8008b04 <locateStrAutomaton+0x9c>
            } else if (c == ',') {
 8008aaa:	78fb      	ldrb	r3, [r7, #3]
 8008aac:	2b2c      	cmp	r3, #44	; 0x2c
 8008aae:	d103      	bne.n	8008ab8 <locateStrAutomaton+0x50>
                nfa->state = STATE_COMMA;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2204      	movs	r2, #4
 8008ab4:	701a      	strb	r2, [r3, #0]
            break;
 8008ab6:	e025      	b.n	8008b04 <locateStrAutomaton+0x9c>
                nfa->startIdx = nfa->i;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	68db      	ldr	r3, [r3, #12]
 8008abc:	461a      	mov	r2, r3
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	605a      	str	r2, [r3, #4]
                nfa->stopIdx = nfa->i + 1;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	68db      	ldr	r3, [r3, #12]
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	461a      	mov	r2, r3
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	609a      	str	r2, [r3, #8]
                nfa->state = STATE_TEXT;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2202      	movs	r2, #2
 8008ad2:	701a      	strb	r2, [r3, #0]
            break;
 8008ad4:	e016      	b.n	8008b04 <locateStrAutomaton+0x9c>
            if (c == ',') {
 8008ad6:	78fb      	ldrb	r3, [r7, #3]
 8008ad8:	2b2c      	cmp	r3, #44	; 0x2c
 8008ada:	d103      	bne.n	8008ae4 <locateStrAutomaton+0x7c>
                nfa->state = STATE_COMMA;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2204      	movs	r2, #4
 8008ae0:	701a      	strb	r2, [r3, #0]
            break;
 8008ae2:	e00e      	b.n	8008b02 <locateStrAutomaton+0x9a>
            } else if (!isspace(c)) {
 8008ae4:	78fb      	ldrb	r3, [r7, #3]
 8008ae6:	3301      	adds	r3, #1
 8008ae8:	4a0f      	ldr	r2, [pc, #60]	; (8008b28 <locateStrAutomaton+0xc0>)
 8008aea:	4413      	add	r3, r2
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	f003 0308 	and.w	r3, r3, #8
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d105      	bne.n	8008b02 <locateStrAutomaton+0x9a>
                nfa->stopIdx = nfa->i + 1;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	68db      	ldr	r3, [r3, #12]
 8008afa:	3301      	adds	r3, #1
 8008afc:	461a      	mov	r2, r3
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	609a      	str	r2, [r3, #8]
            break;
 8008b02:	bf00      	nop
    }

    /* if it is terminating state, break from for loop */
    if ((nfa->state == STATE_COMMA) || (nfa->state == STATE_ERROR)) {
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	2b04      	cmp	r3, #4
 8008b0a:	d003      	beq.n	8008b14 <locateStrAutomaton+0xac>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	2b05      	cmp	r3, #5
 8008b12:	d101      	bne.n	8008b18 <locateStrAutomaton+0xb0>
        return FALSE;
 8008b14:	2300      	movs	r3, #0
 8008b16:	e000      	b.n	8008b1a <locateStrAutomaton+0xb2>
    } else {
        return TRUE;
 8008b18:	2301      	movs	r3, #1
    }
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	370c      	adds	r7, #12
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b24:	4770      	bx	lr
 8008b26:	bf00      	nop
 8008b28:	0800ec08 	.word	0x0800ec08

08008b2c <locateStr>:
 * @param len1 length of string
 * @param str2 result
 * @param len2 length of result
 * @return string str1 contains text and str2 was set
 */
scpi_bool_t locateStr(const char * str1, size_t len1, const char ** str2, size_t * len2) {
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b088      	sub	sp, #32
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	60f8      	str	r0, [r7, #12]
 8008b34:	60b9      	str	r1, [r7, #8]
 8008b36:	607a      	str	r2, [r7, #4]
 8008b38:	603b      	str	r3, [r7, #0]
    locate_text_nfa nfa;
    nfa.state = STATE_FIRST_WHITESPACE;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	743b      	strb	r3, [r7, #16]
    nfa.startIdx = 0;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	617b      	str	r3, [r7, #20]
    nfa.stopIdx = 0;
 8008b42:	2300      	movs	r3, #0
 8008b44:	61bb      	str	r3, [r7, #24]


    for (nfa.i = 0; nfa.i < len1; nfa.i++) {
 8008b46:	2300      	movs	r3, #0
 8008b48:	61fb      	str	r3, [r7, #28]
 8008b4a:	e012      	b.n	8008b72 <locateStr+0x46>
        if(FALSE == locateStrAutomaton(&nfa, str1[nfa.i])) {
 8008b4c:	69fb      	ldr	r3, [r7, #28]
 8008b4e:	68fa      	ldr	r2, [r7, #12]
 8008b50:	4413      	add	r3, r2
 8008b52:	781a      	ldrb	r2, [r3, #0]
 8008b54:	f107 0310 	add.w	r3, r7, #16
 8008b58:	4611      	mov	r1, r2
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f7ff ff84 	bl	8008a68 <locateStrAutomaton>
 8008b60:	4603      	mov	r3, r0
 8008b62:	f083 0301 	eor.w	r3, r3, #1
 8008b66:	b2db      	uxtb	r3, r3
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d107      	bne.n	8008b7c <locateStr+0x50>
    for (nfa.i = 0; nfa.i < len1; nfa.i++) {
 8008b6c:	69fb      	ldr	r3, [r7, #28]
 8008b6e:	3301      	adds	r3, #1
 8008b70:	61fb      	str	r3, [r7, #28]
 8008b72:	69fb      	ldr	r3, [r7, #28]
 8008b74:	68ba      	ldr	r2, [r7, #8]
 8008b76:	429a      	cmp	r2, r3
 8008b78:	d8e8      	bhi.n	8008b4c <locateStr+0x20>
 8008b7a:	e000      	b.n	8008b7e <locateStr+0x52>
            break;
 8008b7c:	bf00      	nop
        }
    }

    if (isFinalState(nfa.state)) {
 8008b7e:	7c3b      	ldrb	r3, [r7, #16]
 8008b80:	4618      	mov	r0, r3
 8008b82:	f7ff ff54 	bl	8008a2e <isFinalState>
 8008b86:	4603      	mov	r3, r0
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d013      	beq.n	8008bb4 <locateStr+0x88>

        if (str2) {
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d005      	beq.n	8008b9e <locateStr+0x72>
            *str2 = &str1[nfa.startIdx];
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	461a      	mov	r2, r3
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	441a      	add	r2, r3
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	601a      	str	r2, [r3, #0]
        }

        if (len2) {
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d005      	beq.n	8008bb0 <locateStr+0x84>
            *len2 = nfa.stopIdx - nfa.startIdx;
 8008ba4:	69ba      	ldr	r2, [r7, #24]
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	1ad3      	subs	r3, r2, r3
 8008baa:	461a      	mov	r2, r3
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	601a      	str	r2, [r3, #0]
        }
        return TRUE;
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	e000      	b.n	8008bb6 <locateStr+0x8a>
    }
    return FALSE;
 8008bb4:	2300      	movs	r3, #0
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3720      	adds	r7, #32
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
	...

08008bc0 <skipWhitespace>:
 * Count white spaces from the beggining
 * @param cmd - command
 * @param len - max search length
 * @return number of white spaces
 */
size_t skipWhitespace(const char * cmd, size_t len) {
 8008bc0:	b480      	push	{r7}
 8008bc2:	b085      	sub	sp, #20
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]
    size_t i;
    for (i = 0; i < len; i++) {
 8008bca:	2300      	movs	r3, #0
 8008bcc:	60fb      	str	r3, [r7, #12]
 8008bce:	e010      	b.n	8008bf2 <skipWhitespace+0x32>
        if (!isspace((unsigned char) cmd[i])) {
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	4413      	add	r3, r2
 8008bd6:	781b      	ldrb	r3, [r3, #0]
 8008bd8:	3301      	adds	r3, #1
 8008bda:	4a0b      	ldr	r2, [pc, #44]	; (8008c08 <skipWhitespace+0x48>)
 8008bdc:	4413      	add	r3, r2
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	f003 0308 	and.w	r3, r3, #8
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d101      	bne.n	8008bec <skipWhitespace+0x2c>
            return i;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	e007      	b.n	8008bfc <skipWhitespace+0x3c>
    for (i = 0; i < len; i++) {
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	3301      	adds	r3, #1
 8008bf0:	60fb      	str	r3, [r7, #12]
 8008bf2:	68fa      	ldr	r2, [r7, #12]
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	d3ea      	bcc.n	8008bd0 <skipWhitespace+0x10>
        }
    }
    return len;
 8008bfa:	683b      	ldr	r3, [r7, #0]
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3714      	adds	r7, #20
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr
 8008c08:	0800ec08 	.word	0x0800ec08

08008c0c <patternSeparatorShortPos>:
 * search the first lowercase letter
 * @param pattern
 * @param len - max search length
 * @return position of separator or len
 */
size_t patternSeparatorShortPos(const char * pattern, size_t len) {
 8008c0c:	b480      	push	{r7}
 8008c0e:	b085      	sub	sp, #20
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	6039      	str	r1, [r7, #0]
    size_t i;
    for (i = 0; (i < len) && pattern[i]; i++) {
 8008c16:	2300      	movs	r3, #0
 8008c18:	60fb      	str	r3, [r7, #12]
 8008c1a:	e010      	b.n	8008c3e <patternSeparatorShortPos+0x32>
        if (islower((unsigned char) pattern[i])) {
 8008c1c:	687a      	ldr	r2, [r7, #4]
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	4413      	add	r3, r2
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	3301      	adds	r3, #1
 8008c26:	4a0e      	ldr	r2, [pc, #56]	; (8008c60 <patternSeparatorShortPos+0x54>)
 8008c28:	4413      	add	r3, r2
 8008c2a:	781b      	ldrb	r3, [r3, #0]
 8008c2c:	f003 0303 	and.w	r3, r3, #3
 8008c30:	2b02      	cmp	r3, #2
 8008c32:	d101      	bne.n	8008c38 <patternSeparatorShortPos+0x2c>
            return i;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	e00d      	b.n	8008c54 <patternSeparatorShortPos+0x48>
    for (i = 0; (i < len) && pattern[i]; i++) {
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	60fb      	str	r3, [r7, #12]
 8008c3e:	68fa      	ldr	r2, [r7, #12]
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d205      	bcs.n	8008c52 <patternSeparatorShortPos+0x46>
 8008c46:	687a      	ldr	r2, [r7, #4]
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	4413      	add	r3, r2
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d1e4      	bne.n	8008c1c <patternSeparatorShortPos+0x10>
        }
    }
    return i;
 8008c52:	68fb      	ldr	r3, [r7, #12]
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3714      	adds	r7, #20
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5e:	4770      	bx	lr
 8008c60:	0800ec08 	.word	0x0800ec08

08008c64 <patternSeparatorPos>:
 * Find pattern separator position
 * @param pattern
 * @param len - max search length
 * @return position of separator or len
 */
size_t patternSeparatorPos(const char * pattern, size_t len) {
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b084      	sub	sp, #16
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	6039      	str	r1, [r7, #0]

    const char * separator = strnpbrk(pattern, len, "?:[]");
 8008c6e:	4a09      	ldr	r2, [pc, #36]	; (8008c94 <patternSeparatorPos+0x30>)
 8008c70:	6839      	ldr	r1, [r7, #0]
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f7ff fdd6 	bl	8008824 <strnpbrk>
 8008c78:	60f8      	str	r0, [r7, #12]
    if (separator == NULL) {
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d101      	bne.n	8008c84 <patternSeparatorPos+0x20>
        return len;
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	e002      	b.n	8008c8a <patternSeparatorPos+0x26>
    } else {
        return separator - pattern;
 8008c84:	68fa      	ldr	r2, [r7, #12]
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	1ad3      	subs	r3, r2, r3
    }
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3710      	adds	r7, #16
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}
 8008c92:	bf00      	nop
 8008c94:	0800e898 	.word	0x0800e898

08008c98 <cmdSeparatorPos>:
 * Find command separator position
 * @param cmd - input command
 * @param len - max search length
 * @return position of separator or len
 */
size_t cmdSeparatorPos(const char * cmd, size_t len) {
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b084      	sub	sp, #16
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	6039      	str	r1, [r7, #0]
    const char * separator = strnpbrk(cmd, len, ":?");
 8008ca2:	4a0a      	ldr	r2, [pc, #40]	; (8008ccc <cmdSeparatorPos+0x34>)
 8008ca4:	6839      	ldr	r1, [r7, #0]
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f7ff fdbc 	bl	8008824 <strnpbrk>
 8008cac:	60b8      	str	r0, [r7, #8]
    size_t result;
    if (separator == NULL) {
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d102      	bne.n	8008cba <cmdSeparatorPos+0x22>
        result = len;
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	60fb      	str	r3, [r7, #12]
 8008cb8:	e003      	b.n	8008cc2 <cmdSeparatorPos+0x2a>
    } else {
        result = separator - cmd;
 8008cba:	68ba      	ldr	r2, [r7, #8]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	1ad3      	subs	r3, r2, r3
 8008cc0:	60fb      	str	r3, [r7, #12]
    }

    return result;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3710      	adds	r7, #16
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}
 8008ccc:	0800e8a0 	.word	0x0800e8a0

08008cd0 <matchPattern>:
 * @param pattern_len
 * @param str
 * @param str_len
 * @return 
 */
scpi_bool_t matchPattern(const char * pattern, size_t pattern_len, const char * str, size_t str_len) {
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b086      	sub	sp, #24
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	60f8      	str	r0, [r7, #12]
 8008cd8:	60b9      	str	r1, [r7, #8]
 8008cda:	607a      	str	r2, [r7, #4]
 8008cdc:	603b      	str	r3, [r7, #0]
    int pattern_sep_pos_short = patternSeparatorShortPos(pattern, pattern_len);
 8008cde:	68b9      	ldr	r1, [r7, #8]
 8008ce0:	68f8      	ldr	r0, [r7, #12]
 8008ce2:	f7ff ff93 	bl	8008c0c <patternSeparatorShortPos>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	617b      	str	r3, [r7, #20]
    return compareStr(pattern, pattern_len, str, str_len) ||
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	687a      	ldr	r2, [r7, #4]
 8008cee:	68b9      	ldr	r1, [r7, #8]
 8008cf0:	68f8      	ldr	r0, [r7, #12]
 8008cf2:	f7ff fe80 	bl	80089f6 <compareStr>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d108      	bne.n	8008d0e <matchPattern+0x3e>
            compareStr(pattern, pattern_sep_pos_short, str, str_len);
 8008cfc:	6979      	ldr	r1, [r7, #20]
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	68f8      	ldr	r0, [r7, #12]
 8008d04:	f7ff fe77 	bl	80089f6 <compareStr>
 8008d08:	4603      	mov	r3, r0
    return compareStr(pattern, pattern_len, str, str_len) ||
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d001      	beq.n	8008d12 <matchPattern+0x42>
 8008d0e:	2301      	movs	r3, #1
 8008d10:	e000      	b.n	8008d14 <matchPattern+0x44>
 8008d12:	2300      	movs	r3, #0
 8008d14:	f003 0301 	and.w	r3, r3, #1
 8008d18:	b2db      	uxtb	r3, r3
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3718      	adds	r7, #24
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}

08008d22 <matchCommand>:
 * @param pattern eg. [:MEASure]:VOLTage:DC?
 * @param cmd - command
 * @param len - max search length
 * @return TRUE if pattern matches, FALSE otherwise
 */
scpi_bool_t matchCommand(const char * pattern, const char * cmd, size_t len) {
 8008d22:	b580      	push	{r7, lr}
 8008d24:	b090      	sub	sp, #64	; 0x40
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	60f8      	str	r0, [r7, #12]
 8008d2a:	60b9      	str	r1, [r7, #8]
 8008d2c:	607a      	str	r2, [r7, #4]
    scpi_bool_t result = FALSE;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    int leftFlag = 0; // flag for '[' on left
 8008d34:	2300      	movs	r3, #0
 8008d36:	63bb      	str	r3, [r7, #56]	; 0x38
    int rightFlag = 0; // flag for ']' on right
 8008d38:	2300      	movs	r3, #0
 8008d3a:	637b      	str	r3, [r7, #52]	; 0x34
    int cmd_sep_pos = 0;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	633b      	str	r3, [r7, #48]	; 0x30

    const char * pattern_ptr = pattern;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	62fb      	str	r3, [r7, #44]	; 0x2c
    int pattern_len = strlen(pattern);
 8008d44:	68f8      	ldr	r0, [r7, #12]
 8008d46:	f7f7 fa43 	bl	80001d0 <strlen>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	62bb      	str	r3, [r7, #40]	; 0x28
    const char * pattern_end = pattern + pattern_len;
 8008d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d50:	68fa      	ldr	r2, [r7, #12]
 8008d52:	4413      	add	r3, r2
 8008d54:	623b      	str	r3, [r7, #32]

    const char * cmd_ptr = cmd;
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	627b      	str	r3, [r7, #36]	; 0x24
    size_t cmd_len = SCPI_strnlen(cmd, len);
 8008d5a:	6879      	ldr	r1, [r7, #4]
 8008d5c:	68b8      	ldr	r0, [r7, #8]
 8008d5e:	f002 fa35 	bl	800b1cc <strnlen>
 8008d62:	61f8      	str	r0, [r7, #28]
    const char * cmd_end = cmd + cmd_len;
 8008d64:	68ba      	ldr	r2, [r7, #8]
 8008d66:	69fb      	ldr	r3, [r7, #28]
 8008d68:	4413      	add	r3, r2
 8008d6a:	61bb      	str	r3, [r7, #24]

    /* now support optional keywords in pattern style, e.g. [:MEASure]:VOLTage:DC? */
    if (pattern_ptr[0] == '[') { // skip first '['
 8008d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d6e:	781b      	ldrb	r3, [r3, #0]
 8008d70:	2b5b      	cmp	r3, #91	; 0x5b
 8008d72:	d108      	bne.n	8008d86 <matchCommand+0x64>
        pattern_len--;
 8008d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d76:	3b01      	subs	r3, #1
 8008d78:	62bb      	str	r3, [r7, #40]	; 0x28
        pattern_ptr++;
 8008d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d7c:	3301      	adds	r3, #1
 8008d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        leftFlag++;
 8008d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d82:	3301      	adds	r3, #1
 8008d84:	63bb      	str	r3, [r7, #56]	; 0x38
    }
    if (pattern_ptr[0] == ':') { // skip first ':'
 8008d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	2b3a      	cmp	r3, #58	; 0x3a
 8008d8c:	d105      	bne.n	8008d9a <matchCommand+0x78>
        pattern_len--;
 8008d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d90:	3b01      	subs	r3, #1
 8008d92:	62bb      	str	r3, [r7, #40]	; 0x28
        pattern_ptr++;
 8008d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d96:	3301      	adds	r3, #1
 8008d98:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if (cmd_ptr[0] == ':') {
 8008d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	2b3a      	cmp	r3, #58	; 0x3a
 8008da0:	d10d      	bne.n	8008dbe <matchCommand+0x9c>
        /* handle errornouse ":*IDN?" */
        if((cmd_len >= 2) && (cmd_ptr[1] != '*')) {
 8008da2:	69fb      	ldr	r3, [r7, #28]
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	d90a      	bls.n	8008dbe <matchCommand+0x9c>
 8008da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008daa:	3301      	adds	r3, #1
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	2b2a      	cmp	r3, #42	; 0x2a
 8008db0:	d005      	beq.n	8008dbe <matchCommand+0x9c>
            cmd_len--;
 8008db2:	69fb      	ldr	r3, [r7, #28]
 8008db4:	3b01      	subs	r3, #1
 8008db6:	61fb      	str	r3, [r7, #28]
            cmd_ptr++;
 8008db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dba:	3301      	adds	r3, #1
 8008dbc:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }

    while (1) {
        int pattern_sep_pos = patternSeparatorPos(pattern_ptr, pattern_end - pattern_ptr);
 8008dbe:	6a3a      	ldr	r2, [r7, #32]
 8008dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dc2:	1ad3      	subs	r3, r2, r3
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008dc8:	f7ff ff4c 	bl	8008c64 <patternSeparatorPos>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	617b      	str	r3, [r7, #20]

        if ((leftFlag > 0) && (rightFlag > 0)) {
 8008dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	dd09      	ble.n	8008dea <matchCommand+0xc8>
 8008dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	dd06      	ble.n	8008dea <matchCommand+0xc8>
            leftFlag--;
 8008ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dde:	3b01      	subs	r3, #1
 8008de0:	63bb      	str	r3, [r7, #56]	; 0x38
            rightFlag--;
 8008de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008de4:	3b01      	subs	r3, #1
 8008de6:	637b      	str	r3, [r7, #52]	; 0x34
 8008de8:	e008      	b.n	8008dfc <matchCommand+0xda>
        } else {
            cmd_sep_pos = cmdSeparatorPos(cmd_ptr, cmd_end - cmd_ptr);
 8008dea:	69ba      	ldr	r2, [r7, #24]
 8008dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dee:	1ad3      	subs	r3, r2, r3
 8008df0:	4619      	mov	r1, r3
 8008df2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008df4:	f7ff ff50 	bl	8008c98 <cmdSeparatorPos>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	633b      	str	r3, [r7, #48]	; 0x30
        }

        if (matchPattern(pattern_ptr, pattern_sep_pos, cmd_ptr, cmd_sep_pos)) {
 8008dfc:	6979      	ldr	r1, [r7, #20]
 8008dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e04:	f7ff ff64 	bl	8008cd0 <matchPattern>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	f000 80c0 	beq.w	8008f90 <matchCommand+0x26e>
            pattern_ptr = pattern_ptr + pattern_sep_pos;
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e14:	4413      	add	r3, r2
 8008e16:	62fb      	str	r3, [r7, #44]	; 0x2c
            cmd_ptr = cmd_ptr + cmd_sep_pos;
 8008e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e1c:	4413      	add	r3, r2
 8008e1e:	627b      	str	r3, [r7, #36]	; 0x24
            result = TRUE;
 8008e20:	2301      	movs	r3, #1
 8008e22:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

            /* command is complete */
            if ((pattern_ptr == pattern_end) && (cmd_ptr >= cmd_end)) {
 8008e26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e28:	6a3b      	ldr	r3, [r7, #32]
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d104      	bne.n	8008e38 <matchCommand+0x116>
 8008e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e30:	69bb      	ldr	r3, [r7, #24]
 8008e32:	429a      	cmp	r2, r3
 8008e34:	f080 80da 	bcs.w	8008fec <matchCommand+0x2ca>
                break;
            }

            /* pattern complete, but command not */
            if ((pattern_ptr == pattern_end) && (cmd_ptr < cmd_end)) {
 8008e38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e3a:	6a3b      	ldr	r3, [r7, #32]
 8008e3c:	429a      	cmp	r2, r3
 8008e3e:	d107      	bne.n	8008e50 <matchCommand+0x12e>
 8008e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e42:	69bb      	ldr	r3, [r7, #24]
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d203      	bcs.n	8008e50 <matchCommand+0x12e>
                result = FALSE;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                break;
 8008e4e:	e0d2      	b.n	8008ff6 <matchCommand+0x2d4>
            }

            /* command complete, but pattern not */
            if (cmd_ptr >= cmd_end) {
 8008e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e52:	69bb      	ldr	r3, [r7, #24]
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d31d      	bcc.n	8008e94 <matchCommand+0x172>
                if (cmd_end == cmd_ptr) {
 8008e58:	69ba      	ldr	r2, [r7, #24]
 8008e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d115      	bne.n	8008e8c <matchCommand+0x16a>
                    if (cmd_ptr[0] == pattern_ptr[pattern_end - pattern_ptr - 1]) {
 8008e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e62:	781a      	ldrb	r2, [r3, #0]
 8008e64:	6a39      	ldr	r1, [r7, #32]
 8008e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e68:	1acb      	subs	r3, r1, r3
 8008e6a:	3b01      	subs	r3, #1
 8008e6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e6e:	440b      	add	r3, r1
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	429a      	cmp	r2, r3
 8008e74:	f000 80bc 	beq.w	8008ff0 <matchCommand+0x2ce>
                        break; /* exist optional keyword, command is complete */
                    }
                    if (']' == pattern_ptr[pattern_end - pattern_ptr - 1]) {
 8008e78:	6a3a      	ldr	r2, [r7, #32]
 8008e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e7c:	1ad3      	subs	r3, r2, r3
 8008e7e:	3b01      	subs	r3, #1
 8008e80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e82:	4413      	add	r3, r2
 8008e84:	781b      	ldrb	r3, [r3, #0]
 8008e86:	2b5d      	cmp	r3, #93	; 0x5d
 8008e88:	f000 80b4 	beq.w	8008ff4 <matchCommand+0x2d2>
                        break; /* exist optional keyword, command is complete */
                    }
                }
                result = FALSE;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                break;
 8008e92:	e0b0      	b.n	8008ff6 <matchCommand+0x2d4>
            }

            /* both command and patter contains command separator at this position */
            if ((pattern_ptr[0] == cmd_ptr[0]) && ((pattern_ptr[0] == ':') || (pattern_ptr[0] == '?'))) {
 8008e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e96:	781a      	ldrb	r2, [r3, #0]
 8008e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9a:	781b      	ldrb	r3, [r3, #0]
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d10e      	bne.n	8008ebe <matchCommand+0x19c>
 8008ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea2:	781b      	ldrb	r3, [r3, #0]
 8008ea4:	2b3a      	cmp	r3, #58	; 0x3a
 8008ea6:	d003      	beq.n	8008eb0 <matchCommand+0x18e>
 8008ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	2b3f      	cmp	r3, #63	; 0x3f
 8008eae:	d106      	bne.n	8008ebe <matchCommand+0x19c>
                pattern_ptr = pattern_ptr + 1;
 8008eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
                cmd_ptr = cmd_ptr + 1;
 8008eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb8:	3301      	adds	r3, #1
 8008eba:	627b      	str	r3, [r7, #36]	; 0x24
 8008ebc:	e095      	b.n	8008fea <matchCommand+0x2c8>
            } else if ((pattern_ptr[1] == cmd_ptr[0])
 8008ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec0:	3301      	adds	r3, #1
 8008ec2:	781a      	ldrb	r2, [r3, #0]
 8008ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec6:	781b      	ldrb	r3, [r3, #0]
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d112      	bne.n	8008ef2 <matchCommand+0x1d0>
                    && (pattern_ptr[0] == '[')
 8008ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	2b5b      	cmp	r3, #91	; 0x5b
 8008ed2:	d10e      	bne.n	8008ef2 <matchCommand+0x1d0>
                    && (pattern_ptr[1] == ':')) {
 8008ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed6:	3301      	adds	r3, #1
 8008ed8:	781b      	ldrb	r3, [r3, #0]
 8008eda:	2b3a      	cmp	r3, #58	; 0x3a
 8008edc:	d109      	bne.n	8008ef2 <matchCommand+0x1d0>
                pattern_ptr = pattern_ptr + 2; // for skip '[' in "[:"
 8008ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ee0:	3302      	adds	r3, #2
 8008ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
                cmd_ptr = cmd_ptr + 1;
 8008ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	627b      	str	r3, [r7, #36]	; 0x24
                leftFlag++;
 8008eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eec:	3301      	adds	r3, #1
 8008eee:	63bb      	str	r3, [r7, #56]	; 0x38
 8008ef0:	e07b      	b.n	8008fea <matchCommand+0x2c8>
            } else if ((pattern_ptr[1] == cmd_ptr[0])
 8008ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ef4:	3301      	adds	r3, #1
 8008ef6:	781a      	ldrb	r2, [r3, #0]
 8008ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d10f      	bne.n	8008f20 <matchCommand+0x1fe>
                    && (pattern_ptr[0] == ']')
 8008f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	2b5d      	cmp	r3, #93	; 0x5d
 8008f06:	d10b      	bne.n	8008f20 <matchCommand+0x1fe>
                    && (pattern_ptr[1] == ':')) {
 8008f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	2b3a      	cmp	r3, #58	; 0x3a
 8008f10:	d106      	bne.n	8008f20 <matchCommand+0x1fe>
                pattern_ptr = pattern_ptr + 2; // for skip ']' in "]:"
 8008f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f14:	3302      	adds	r3, #2
 8008f16:	62fb      	str	r3, [r7, #44]	; 0x2c
                cmd_ptr = cmd_ptr + 1;
 8008f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8008f1e:	e064      	b.n	8008fea <matchCommand+0x2c8>
            } else if ((pattern_ptr[2] == cmd_ptr[0])
 8008f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f22:	3302      	adds	r3, #2
 8008f24:	781a      	ldrb	r2, [r3, #0]
 8008f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d117      	bne.n	8008f5e <matchCommand+0x23c>
                    && (pattern_ptr[0] == ']')
 8008f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	2b5d      	cmp	r3, #93	; 0x5d
 8008f34:	d113      	bne.n	8008f5e <matchCommand+0x23c>
                    && (pattern_ptr[1] == '[')
 8008f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f38:	3301      	adds	r3, #1
 8008f3a:	781b      	ldrb	r3, [r3, #0]
 8008f3c:	2b5b      	cmp	r3, #91	; 0x5b
 8008f3e:	d10e      	bne.n	8008f5e <matchCommand+0x23c>
                    && (pattern_ptr[2] == ':')) {
 8008f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f42:	3302      	adds	r3, #2
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	2b3a      	cmp	r3, #58	; 0x3a
 8008f48:	d109      	bne.n	8008f5e <matchCommand+0x23c>
                pattern_ptr = pattern_ptr + 3; // for skip '][' in "][:"
 8008f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f4c:	3303      	adds	r3, #3
 8008f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
                cmd_ptr = cmd_ptr + 1;
 8008f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f52:	3301      	adds	r3, #1
 8008f54:	627b      	str	r3, [r7, #36]	; 0x24
                leftFlag++;
 8008f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f58:	3301      	adds	r3, #1
 8008f5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8008f5c:	e045      	b.n	8008fea <matchCommand+0x2c8>
            } else if (((pattern_ptr[0] == ']')
 8008f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f60:	781b      	ldrb	r3, [r3, #0]
 8008f62:	2b5d      	cmp	r3, #93	; 0x5d
 8008f64:	d003      	beq.n	8008f6e <matchCommand+0x24c>
                    || (pattern_ptr[0] == '['))
 8008f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f68:	781b      	ldrb	r3, [r3, #0]
 8008f6a:	2b5b      	cmp	r3, #91	; 0x5b
 8008f6c:	d10c      	bne.n	8008f88 <matchCommand+0x266>
                    && (*(pattern_end - 1) == '?') // last is '?'
 8008f6e:	6a3b      	ldr	r3, [r7, #32]
 8008f70:	3b01      	subs	r3, #1
 8008f72:	781b      	ldrb	r3, [r3, #0]
 8008f74:	2b3f      	cmp	r3, #63	; 0x3f
 8008f76:	d107      	bne.n	8008f88 <matchCommand+0x266>
                    && (cmd_ptr[0] == '?')) {
 8008f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	2b3f      	cmp	r3, #63	; 0x3f
 8008f7e:	d103      	bne.n	8008f88 <matchCommand+0x266>
                result = TRUE; // exist optional keyword, and they are end with '?'
 8008f80:	2301      	movs	r3, #1
 8008f82:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                break; // command is complete  OK
 8008f86:	e036      	b.n	8008ff6 <matchCommand+0x2d4>
            } else {
                result = FALSE;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                break;
 8008f8e:	e032      	b.n	8008ff6 <matchCommand+0x2d4>
            }
        } else {
            pattern_ptr = pattern_ptr + pattern_sep_pos;
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f94:	4413      	add	r3, r2
 8008f96:	62fb      	str	r3, [r7, #44]	; 0x2c
            if ((pattern_ptr[0] == ']') && (pattern_ptr[1] == ':')) {
 8008f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	2b5d      	cmp	r3, #93	; 0x5d
 8008f9e:	d10b      	bne.n	8008fb8 <matchCommand+0x296>
 8008fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	781b      	ldrb	r3, [r3, #0]
 8008fa6:	2b3a      	cmp	r3, #58	; 0x3a
 8008fa8:	d106      	bne.n	8008fb8 <matchCommand+0x296>
                pattern_ptr = pattern_ptr + 2; // for skip ']' in "]:" , pattern_ptr continue, while cmd_ptr remain unchanged
 8008faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fac:	3302      	adds	r3, #2
 8008fae:	62fb      	str	r3, [r7, #44]	; 0x2c
                rightFlag++;
 8008fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	637b      	str	r3, [r7, #52]	; 0x34
 8008fb6:	e018      	b.n	8008fea <matchCommand+0x2c8>
            } else if ((pattern_ptr[0] == ']')
 8008fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fba:	781b      	ldrb	r3, [r3, #0]
 8008fbc:	2b5d      	cmp	r3, #93	; 0x5d
 8008fbe:	d110      	bne.n	8008fe2 <matchCommand+0x2c0>
                    && (pattern_ptr[1] == '[')
 8008fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	781b      	ldrb	r3, [r3, #0]
 8008fc6:	2b5b      	cmp	r3, #91	; 0x5b
 8008fc8:	d10b      	bne.n	8008fe2 <matchCommand+0x2c0>
                    && (pattern_ptr[2] == ':')) {
 8008fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fcc:	3302      	adds	r3, #2
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	2b3a      	cmp	r3, #58	; 0x3a
 8008fd2:	d106      	bne.n	8008fe2 <matchCommand+0x2c0>
                pattern_ptr = pattern_ptr + 3; // for skip ']' in "][:" , pattern_ptr continue, while cmd_ptr remain unchanged
 8008fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd6:	3303      	adds	r3, #3
 8008fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
                rightFlag++;
 8008fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fdc:	3301      	adds	r3, #1
 8008fde:	637b      	str	r3, [r7, #52]	; 0x34
 8008fe0:	e003      	b.n	8008fea <matchCommand+0x2c8>
            } else {
                result = FALSE;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                break;
 8008fe8:	e005      	b.n	8008ff6 <matchCommand+0x2d4>
    while (1) {
 8008fea:	e6e8      	b.n	8008dbe <matchCommand+0x9c>
                break;
 8008fec:	bf00      	nop
 8008fee:	e002      	b.n	8008ff6 <matchCommand+0x2d4>
                        break; /* exist optional keyword, command is complete */
 8008ff0:	bf00      	nop
 8008ff2:	e000      	b.n	8008ff6 <matchCommand+0x2d4>
                        break; /* exist optional keyword, command is complete */
 8008ff4:	bf00      	nop
            }
        }
    }

    return result;
 8008ff6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3740      	adds	r7, #64	; 0x40
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}

08009002 <composeCompoundCommand>:
 * 
 * 
 * 
 */
scpi_bool_t composeCompoundCommand(char * ptr_prev, size_t len_prev,
                              char ** pptr, size_t * plen) {
 8009002:	b580      	push	{r7, lr}
 8009004:	b088      	sub	sp, #32
 8009006:	af00      	add	r7, sp, #0
 8009008:	60f8      	str	r0, [r7, #12]
 800900a:	60b9      	str	r1, [r7, #8]
 800900c:	607a      	str	r2, [r7, #4]
 800900e:	603b      	str	r3, [r7, #0]
    char * ptr;
    size_t len;
    size_t i;

    /* Invalid input */
    if (pptr == NULL || plen == NULL)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d002      	beq.n	800901c <composeCompoundCommand+0x1a>
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d101      	bne.n	8009020 <composeCompoundCommand+0x1e>
        return FALSE;
 800901c:	2300      	movs	r3, #0
 800901e:	e051      	b.n	80090c4 <composeCompoundCommand+0xc2>

    /* no previous command - nothing to do*/
    if (ptr_prev == NULL || len_prev == 0)
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d002      	beq.n	800902c <composeCompoundCommand+0x2a>
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d101      	bne.n	8009030 <composeCompoundCommand+0x2e>
        return TRUE;
 800902c:	2301      	movs	r3, #1
 800902e:	e049      	b.n	80090c4 <composeCompoundCommand+0xc2>
       
    ptr = *pptr;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	61bb      	str	r3, [r7, #24]
    len = *plen;
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	617b      	str	r3, [r7, #20]
    
    /* No current command */
    if (len == 0 || ptr == NULL)
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d002      	beq.n	8009048 <composeCompoundCommand+0x46>
 8009042:	69bb      	ldr	r3, [r7, #24]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d101      	bne.n	800904c <composeCompoundCommand+0x4a>
        return FALSE;
 8009048:	2300      	movs	r3, #0
 800904a:	e03b      	b.n	80090c4 <composeCompoundCommand+0xc2>
    
    /* Common command or command root - nothing to do */
    if (ptr[0] == '*' || ptr[0] == ':')
 800904c:	69bb      	ldr	r3, [r7, #24]
 800904e:	781b      	ldrb	r3, [r3, #0]
 8009050:	2b2a      	cmp	r3, #42	; 0x2a
 8009052:	d003      	beq.n	800905c <composeCompoundCommand+0x5a>
 8009054:	69bb      	ldr	r3, [r7, #24]
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	2b3a      	cmp	r3, #58	; 0x3a
 800905a:	d101      	bne.n	8009060 <composeCompoundCommand+0x5e>
        return TRUE;
 800905c:	2301      	movs	r3, #1
 800905e:	e031      	b.n	80090c4 <composeCompoundCommand+0xc2>
        
    /* Previsou command was common command - nothing to do */
    if (ptr_prev[0] == '*')
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	781b      	ldrb	r3, [r3, #0]
 8009064:	2b2a      	cmp	r3, #42	; 0x2a
 8009066:	d101      	bne.n	800906c <composeCompoundCommand+0x6a>
        return TRUE;
 8009068:	2301      	movs	r3, #1
 800906a:	e02b      	b.n	80090c4 <composeCompoundCommand+0xc2>
        
    /* Find last occurence of ':' */
    for (i = len_prev; i > 0; i--) {
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	61fb      	str	r3, [r7, #28]
 8009070:	e009      	b.n	8009086 <composeCompoundCommand+0x84>
        if (ptr_prev[i-1] == ':') {
 8009072:	69fb      	ldr	r3, [r7, #28]
 8009074:	3b01      	subs	r3, #1
 8009076:	68fa      	ldr	r2, [r7, #12]
 8009078:	4413      	add	r3, r2
 800907a:	781b      	ldrb	r3, [r3, #0]
 800907c:	2b3a      	cmp	r3, #58	; 0x3a
 800907e:	d006      	beq.n	800908e <composeCompoundCommand+0x8c>
    for (i = len_prev; i > 0; i--) {
 8009080:	69fb      	ldr	r3, [r7, #28]
 8009082:	3b01      	subs	r3, #1
 8009084:	61fb      	str	r3, [r7, #28]
 8009086:	69fb      	ldr	r3, [r7, #28]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d1f2      	bne.n	8009072 <composeCompoundCommand+0x70>
 800908c:	e000      	b.n	8009090 <composeCompoundCommand+0x8e>
            break;
 800908e:	bf00      	nop
        }
    }
    
    /* Previous command was simple command - nothing to do*/
    if (i == 0)
 8009090:	69fb      	ldr	r3, [r7, #28]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d101      	bne.n	800909a <composeCompoundCommand+0x98>
        return TRUE;
 8009096:	2301      	movs	r3, #1
 8009098:	e014      	b.n	80090c4 <composeCompoundCommand+0xc2>
    
    ptr -= i;
 800909a:	69fb      	ldr	r3, [r7, #28]
 800909c:	425b      	negs	r3, r3
 800909e:	69ba      	ldr	r2, [r7, #24]
 80090a0:	4413      	add	r3, r2
 80090a2:	61bb      	str	r3, [r7, #24]
    len += i;
 80090a4:	697a      	ldr	r2, [r7, #20]
 80090a6:	69fb      	ldr	r3, [r7, #28]
 80090a8:	4413      	add	r3, r2
 80090aa:	617b      	str	r3, [r7, #20]
    memmove(ptr, ptr_prev, i);
 80090ac:	69fa      	ldr	r2, [r7, #28]
 80090ae:	68f9      	ldr	r1, [r7, #12]
 80090b0:	69b8      	ldr	r0, [r7, #24]
 80090b2:	f001 ff28 	bl	800af06 <memmove>
    *plen = len;
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	697a      	ldr	r2, [r7, #20]
 80090ba:	601a      	str	r2, [r3, #0]
    *pptr = ptr;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	69ba      	ldr	r2, [r7, #24]
 80090c0:	601a      	str	r2, [r3, #0]
    return TRUE;
 80090c2:	2301      	movs	r3, #1
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3720      	adds	r7, #32
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}

080090cc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b086      	sub	sp, #24
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	60f8      	str	r0, [r7, #12]
 80090d4:	60b9      	str	r1, [r7, #8]
 80090d6:	4613      	mov	r3, r2
 80090d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d101      	bne.n	80090e4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80090e0:	2303      	movs	r3, #3
 80090e2:	e01f      	b.n	8009124 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	2200      	movs	r2, #0
 80090e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2200      	movs	r2, #0
 80090f0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2200      	movs	r2, #0
 80090f8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d003      	beq.n	800910a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	68ba      	ldr	r2, [r7, #8]
 8009106:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2201      	movs	r2, #1
 800910e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	79fa      	ldrb	r2, [r7, #7]
 8009116:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009118:	68f8      	ldr	r0, [r7, #12]
 800911a:	f001 fceb 	bl	800aaf4 <USBD_LL_Init>
 800911e:	4603      	mov	r3, r0
 8009120:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009122:	7dfb      	ldrb	r3, [r7, #23]
}
 8009124:	4618      	mov	r0, r3
 8009126:	3718      	adds	r7, #24
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}

0800912c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b084      	sub	sp, #16
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009136:	2300      	movs	r3, #0
 8009138:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d101      	bne.n	8009144 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009140:	2303      	movs	r3, #3
 8009142:	e016      	b.n	8009172 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	683a      	ldr	r2, [r7, #0]
 8009148:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009154:	2b00      	cmp	r3, #0
 8009156:	d00b      	beq.n	8009170 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800915e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009160:	f107 020e 	add.w	r2, r7, #14
 8009164:	4610      	mov	r0, r2
 8009166:	4798      	blx	r3
 8009168:	4602      	mov	r2, r0
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8009170:	2300      	movs	r3, #0
}
 8009172:	4618      	mov	r0, r3
 8009174:	3710      	adds	r7, #16
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}

0800917a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800917a:	b580      	push	{r7, lr}
 800917c:	b082      	sub	sp, #8
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f001 fd02 	bl	800ab8c <USBD_LL_Start>
 8009188:	4603      	mov	r3, r0
}
 800918a:	4618      	mov	r0, r3
 800918c:	3708      	adds	r7, #8
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}

08009192 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009192:	b480      	push	{r7}
 8009194:	b083      	sub	sp, #12
 8009196:	af00      	add	r7, sp, #0
 8009198:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800919a:	2300      	movs	r3, #0
}
 800919c:	4618      	mov	r0, r3
 800919e:	370c      	adds	r7, #12
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr

080091a8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b084      	sub	sp, #16
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	460b      	mov	r3, r1
 80091b2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80091b4:	2303      	movs	r3, #3
 80091b6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d009      	beq.n	80091d6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	78fa      	ldrb	r2, [r7, #3]
 80091cc:	4611      	mov	r1, r2
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	4798      	blx	r3
 80091d2:	4603      	mov	r3, r0
 80091d4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80091d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3710      	adds	r7, #16
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}

080091e0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b082      	sub	sp, #8
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
 80091e8:	460b      	mov	r3, r1
 80091ea:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d007      	beq.n	8009206 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	78fa      	ldrb	r2, [r7, #3]
 8009200:	4611      	mov	r1, r2
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	4798      	blx	r3
  }

  return USBD_OK;
 8009206:	2300      	movs	r3, #0
}
 8009208:	4618      	mov	r0, r3
 800920a:	3708      	adds	r7, #8
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}

08009210 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b084      	sub	sp, #16
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009220:	6839      	ldr	r1, [r7, #0]
 8009222:	4618      	mov	r0, r3
 8009224:	f000 ff90 	bl	800a148 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2201      	movs	r2, #1
 800922c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009236:	461a      	mov	r2, r3
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009244:	f003 031f 	and.w	r3, r3, #31
 8009248:	2b02      	cmp	r3, #2
 800924a:	d01a      	beq.n	8009282 <USBD_LL_SetupStage+0x72>
 800924c:	2b02      	cmp	r3, #2
 800924e:	d822      	bhi.n	8009296 <USBD_LL_SetupStage+0x86>
 8009250:	2b00      	cmp	r3, #0
 8009252:	d002      	beq.n	800925a <USBD_LL_SetupStage+0x4a>
 8009254:	2b01      	cmp	r3, #1
 8009256:	d00a      	beq.n	800926e <USBD_LL_SetupStage+0x5e>
 8009258:	e01d      	b.n	8009296 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009260:	4619      	mov	r1, r3
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f000 fa62 	bl	800972c <USBD_StdDevReq>
 8009268:	4603      	mov	r3, r0
 800926a:	73fb      	strb	r3, [r7, #15]
      break;
 800926c:	e020      	b.n	80092b0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009274:	4619      	mov	r1, r3
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f000 fac6 	bl	8009808 <USBD_StdItfReq>
 800927c:	4603      	mov	r3, r0
 800927e:	73fb      	strb	r3, [r7, #15]
      break;
 8009280:	e016      	b.n	80092b0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009288:	4619      	mov	r1, r3
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f000 fb05 	bl	800989a <USBD_StdEPReq>
 8009290:	4603      	mov	r3, r0
 8009292:	73fb      	strb	r3, [r7, #15]
      break;
 8009294:	e00c      	b.n	80092b0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800929c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80092a0:	b2db      	uxtb	r3, r3
 80092a2:	4619      	mov	r1, r3
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f001 fcd1 	bl	800ac4c <USBD_LL_StallEP>
 80092aa:	4603      	mov	r3, r0
 80092ac:	73fb      	strb	r3, [r7, #15]
      break;
 80092ae:	bf00      	nop
  }

  return ret;
 80092b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3710      	adds	r7, #16
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}

080092ba <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80092ba:	b580      	push	{r7, lr}
 80092bc:	b086      	sub	sp, #24
 80092be:	af00      	add	r7, sp, #0
 80092c0:	60f8      	str	r0, [r7, #12]
 80092c2:	460b      	mov	r3, r1
 80092c4:	607a      	str	r2, [r7, #4]
 80092c6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80092c8:	7afb      	ldrb	r3, [r7, #11]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d138      	bne.n	8009340 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80092d4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80092dc:	2b03      	cmp	r3, #3
 80092de:	d14a      	bne.n	8009376 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	689a      	ldr	r2, [r3, #8]
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	68db      	ldr	r3, [r3, #12]
 80092e8:	429a      	cmp	r2, r3
 80092ea:	d913      	bls.n	8009314 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	689a      	ldr	r2, [r3, #8]
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	68db      	ldr	r3, [r3, #12]
 80092f4:	1ad2      	subs	r2, r2, r3
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	68da      	ldr	r2, [r3, #12]
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	689b      	ldr	r3, [r3, #8]
 8009302:	4293      	cmp	r3, r2
 8009304:	bf28      	it	cs
 8009306:	4613      	movcs	r3, r2
 8009308:	461a      	mov	r2, r3
 800930a:	6879      	ldr	r1, [r7, #4]
 800930c:	68f8      	ldr	r0, [r7, #12]
 800930e:	f001 f80f 	bl	800a330 <USBD_CtlContinueRx>
 8009312:	e030      	b.n	8009376 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800931a:	b2db      	uxtb	r3, r3
 800931c:	2b03      	cmp	r3, #3
 800931e:	d10b      	bne.n	8009338 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009326:	691b      	ldr	r3, [r3, #16]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d005      	beq.n	8009338 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009332:	691b      	ldr	r3, [r3, #16]
 8009334:	68f8      	ldr	r0, [r7, #12]
 8009336:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009338:	68f8      	ldr	r0, [r7, #12]
 800933a:	f001 f80a 	bl	800a352 <USBD_CtlSendStatus>
 800933e:	e01a      	b.n	8009376 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009346:	b2db      	uxtb	r3, r3
 8009348:	2b03      	cmp	r3, #3
 800934a:	d114      	bne.n	8009376 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009352:	699b      	ldr	r3, [r3, #24]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d00e      	beq.n	8009376 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800935e:	699b      	ldr	r3, [r3, #24]
 8009360:	7afa      	ldrb	r2, [r7, #11]
 8009362:	4611      	mov	r1, r2
 8009364:	68f8      	ldr	r0, [r7, #12]
 8009366:	4798      	blx	r3
 8009368:	4603      	mov	r3, r0
 800936a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800936c:	7dfb      	ldrb	r3, [r7, #23]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d001      	beq.n	8009376 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8009372:	7dfb      	ldrb	r3, [r7, #23]
 8009374:	e000      	b.n	8009378 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8009376:	2300      	movs	r3, #0
}
 8009378:	4618      	mov	r0, r3
 800937a:	3718      	adds	r7, #24
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b086      	sub	sp, #24
 8009384:	af00      	add	r7, sp, #0
 8009386:	60f8      	str	r0, [r7, #12]
 8009388:	460b      	mov	r3, r1
 800938a:	607a      	str	r2, [r7, #4]
 800938c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800938e:	7afb      	ldrb	r3, [r7, #11]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d16b      	bne.n	800946c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	3314      	adds	r3, #20
 8009398:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80093a0:	2b02      	cmp	r3, #2
 80093a2:	d156      	bne.n	8009452 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	689a      	ldr	r2, [r3, #8]
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	68db      	ldr	r3, [r3, #12]
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d914      	bls.n	80093da <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	689a      	ldr	r2, [r3, #8]
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	68db      	ldr	r3, [r3, #12]
 80093b8:	1ad2      	subs	r2, r2, r3
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	689b      	ldr	r3, [r3, #8]
 80093c2:	461a      	mov	r2, r3
 80093c4:	6879      	ldr	r1, [r7, #4]
 80093c6:	68f8      	ldr	r0, [r7, #12]
 80093c8:	f000 ff84 	bl	800a2d4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80093cc:	2300      	movs	r3, #0
 80093ce:	2200      	movs	r2, #0
 80093d0:	2100      	movs	r1, #0
 80093d2:	68f8      	ldr	r0, [r7, #12]
 80093d4:	f001 fce4 	bl	800ada0 <USBD_LL_PrepareReceive>
 80093d8:	e03b      	b.n	8009452 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	68da      	ldr	r2, [r3, #12]
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	689b      	ldr	r3, [r3, #8]
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d11c      	bne.n	8009420 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	685a      	ldr	r2, [r3, #4]
 80093ea:	693b      	ldr	r3, [r7, #16]
 80093ec:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80093ee:	429a      	cmp	r2, r3
 80093f0:	d316      	bcc.n	8009420 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	685a      	ldr	r2, [r3, #4]
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d20f      	bcs.n	8009420 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009400:	2200      	movs	r2, #0
 8009402:	2100      	movs	r1, #0
 8009404:	68f8      	ldr	r0, [r7, #12]
 8009406:	f000 ff65 	bl	800a2d4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2200      	movs	r2, #0
 800940e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009412:	2300      	movs	r3, #0
 8009414:	2200      	movs	r2, #0
 8009416:	2100      	movs	r1, #0
 8009418:	68f8      	ldr	r0, [r7, #12]
 800941a:	f001 fcc1 	bl	800ada0 <USBD_LL_PrepareReceive>
 800941e:	e018      	b.n	8009452 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009426:	b2db      	uxtb	r3, r3
 8009428:	2b03      	cmp	r3, #3
 800942a:	d10b      	bne.n	8009444 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009432:	68db      	ldr	r3, [r3, #12]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d005      	beq.n	8009444 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800943e:	68db      	ldr	r3, [r3, #12]
 8009440:	68f8      	ldr	r0, [r7, #12]
 8009442:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009444:	2180      	movs	r1, #128	; 0x80
 8009446:	68f8      	ldr	r0, [r7, #12]
 8009448:	f001 fc00 	bl	800ac4c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800944c:	68f8      	ldr	r0, [r7, #12]
 800944e:	f000 ff93 	bl	800a378 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009458:	2b01      	cmp	r3, #1
 800945a:	d122      	bne.n	80094a2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800945c:	68f8      	ldr	r0, [r7, #12]
 800945e:	f7ff fe98 	bl	8009192 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2200      	movs	r2, #0
 8009466:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800946a:	e01a      	b.n	80094a2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009472:	b2db      	uxtb	r3, r3
 8009474:	2b03      	cmp	r3, #3
 8009476:	d114      	bne.n	80094a2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800947e:	695b      	ldr	r3, [r3, #20]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d00e      	beq.n	80094a2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800948a:	695b      	ldr	r3, [r3, #20]
 800948c:	7afa      	ldrb	r2, [r7, #11]
 800948e:	4611      	mov	r1, r2
 8009490:	68f8      	ldr	r0, [r7, #12]
 8009492:	4798      	blx	r3
 8009494:	4603      	mov	r3, r0
 8009496:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009498:	7dfb      	ldrb	r3, [r7, #23]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d001      	beq.n	80094a2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800949e:	7dfb      	ldrb	r3, [r7, #23]
 80094a0:	e000      	b.n	80094a4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80094a2:	2300      	movs	r3, #0
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3718      	adds	r7, #24
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b082      	sub	sp, #8
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2201      	movs	r2, #1
 80094b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2200      	movs	r2, #0
 80094c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2200      	movs	r2, #0
 80094c8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2200      	movs	r2, #0
 80094ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d101      	bne.n	80094e0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80094dc:	2303      	movs	r3, #3
 80094de:	e02f      	b.n	8009540 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d00f      	beq.n	800950a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094f0:	685b      	ldr	r3, [r3, #4]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d009      	beq.n	800950a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094fc:	685b      	ldr	r3, [r3, #4]
 80094fe:	687a      	ldr	r2, [r7, #4]
 8009500:	6852      	ldr	r2, [r2, #4]
 8009502:	b2d2      	uxtb	r2, r2
 8009504:	4611      	mov	r1, r2
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800950a:	2340      	movs	r3, #64	; 0x40
 800950c:	2200      	movs	r2, #0
 800950e:	2100      	movs	r1, #0
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f001 fb56 	bl	800abc2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2201      	movs	r2, #1
 800951a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2240      	movs	r2, #64	; 0x40
 8009522:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009526:	2340      	movs	r3, #64	; 0x40
 8009528:	2200      	movs	r2, #0
 800952a:	2180      	movs	r1, #128	; 0x80
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f001 fb48 	bl	800abc2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2201      	movs	r2, #1
 8009536:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2240      	movs	r2, #64	; 0x40
 800953c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800953e:	2300      	movs	r3, #0
}
 8009540:	4618      	mov	r0, r3
 8009542:	3708      	adds	r7, #8
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}

08009548 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009548:	b480      	push	{r7}
 800954a:	b083      	sub	sp, #12
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	460b      	mov	r3, r1
 8009552:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	78fa      	ldrb	r2, [r7, #3]
 8009558:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800955a:	2300      	movs	r3, #0
}
 800955c:	4618      	mov	r0, r3
 800955e:	370c      	adds	r7, #12
 8009560:	46bd      	mov	sp, r7
 8009562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009566:	4770      	bx	lr

08009568 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009568:	b480      	push	{r7}
 800956a:	b083      	sub	sp, #12
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009576:	b2da      	uxtb	r2, r3
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2204      	movs	r2, #4
 8009582:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009586:	2300      	movs	r3, #0
}
 8009588:	4618      	mov	r0, r3
 800958a:	370c      	adds	r7, #12
 800958c:	46bd      	mov	sp, r7
 800958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009592:	4770      	bx	lr

08009594 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009594:	b480      	push	{r7}
 8009596:	b083      	sub	sp, #12
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095a2:	b2db      	uxtb	r3, r3
 80095a4:	2b04      	cmp	r3, #4
 80095a6:	d106      	bne.n	80095b6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80095ae:	b2da      	uxtb	r2, r3
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80095b6:	2300      	movs	r3, #0
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	370c      	adds	r7, #12
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr

080095c4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d101      	bne.n	80095da <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80095d6:	2303      	movs	r3, #3
 80095d8:	e012      	b.n	8009600 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095e0:	b2db      	uxtb	r3, r3
 80095e2:	2b03      	cmp	r3, #3
 80095e4:	d10b      	bne.n	80095fe <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095ec:	69db      	ldr	r3, [r3, #28]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d005      	beq.n	80095fe <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095f8:	69db      	ldr	r3, [r3, #28]
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80095fe:	2300      	movs	r3, #0
}
 8009600:	4618      	mov	r0, r3
 8009602:	3708      	adds	r7, #8
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}

08009608 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b082      	sub	sp, #8
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	460b      	mov	r3, r1
 8009612:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800961a:	2b00      	cmp	r3, #0
 800961c:	d101      	bne.n	8009622 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800961e:	2303      	movs	r3, #3
 8009620:	e014      	b.n	800964c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009628:	b2db      	uxtb	r3, r3
 800962a:	2b03      	cmp	r3, #3
 800962c:	d10d      	bne.n	800964a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009634:	6a1b      	ldr	r3, [r3, #32]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d007      	beq.n	800964a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009640:	6a1b      	ldr	r3, [r3, #32]
 8009642:	78fa      	ldrb	r2, [r7, #3]
 8009644:	4611      	mov	r1, r2
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800964a:	2300      	movs	r3, #0
}
 800964c:	4618      	mov	r0, r3
 800964e:	3708      	adds	r7, #8
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}

08009654 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b082      	sub	sp, #8
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
 800965c:	460b      	mov	r3, r1
 800965e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009666:	2b00      	cmp	r3, #0
 8009668:	d101      	bne.n	800966e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800966a:	2303      	movs	r3, #3
 800966c:	e014      	b.n	8009698 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009674:	b2db      	uxtb	r3, r3
 8009676:	2b03      	cmp	r3, #3
 8009678:	d10d      	bne.n	8009696 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009682:	2b00      	cmp	r3, #0
 8009684:	d007      	beq.n	8009696 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800968c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800968e:	78fa      	ldrb	r2, [r7, #3]
 8009690:	4611      	mov	r1, r2
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009696:	2300      	movs	r3, #0
}
 8009698:	4618      	mov	r0, r3
 800969a:	3708      	adds	r7, #8
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b083      	sub	sp, #12
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80096a8:	2300      	movs	r3, #0
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	370c      	adds	r7, #12
 80096ae:	46bd      	mov	sp, r7
 80096b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b4:	4770      	bx	lr

080096b6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80096b6:	b580      	push	{r7, lr}
 80096b8:	b082      	sub	sp, #8
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2201      	movs	r2, #1
 80096c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d009      	beq.n	80096e4 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	687a      	ldr	r2, [r7, #4]
 80096da:	6852      	ldr	r2, [r2, #4]
 80096dc:	b2d2      	uxtb	r2, r2
 80096de:	4611      	mov	r1, r2
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	4798      	blx	r3
  }

  return USBD_OK;
 80096e4:	2300      	movs	r3, #0
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3708      	adds	r7, #8
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}

080096ee <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80096ee:	b480      	push	{r7}
 80096f0:	b087      	sub	sp, #28
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	781b      	ldrb	r3, [r3, #0]
 80096fe:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	3301      	adds	r3, #1
 8009704:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	781b      	ldrb	r3, [r3, #0]
 800970a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800970c:	8a3b      	ldrh	r3, [r7, #16]
 800970e:	021b      	lsls	r3, r3, #8
 8009710:	b21a      	sxth	r2, r3
 8009712:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009716:	4313      	orrs	r3, r2
 8009718:	b21b      	sxth	r3, r3
 800971a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800971c:	89fb      	ldrh	r3, [r7, #14]
}
 800971e:	4618      	mov	r0, r3
 8009720:	371c      	adds	r7, #28
 8009722:	46bd      	mov	sp, r7
 8009724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009728:	4770      	bx	lr
	...

0800972c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b084      	sub	sp, #16
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009736:	2300      	movs	r3, #0
 8009738:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	781b      	ldrb	r3, [r3, #0]
 800973e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009742:	2b40      	cmp	r3, #64	; 0x40
 8009744:	d005      	beq.n	8009752 <USBD_StdDevReq+0x26>
 8009746:	2b40      	cmp	r3, #64	; 0x40
 8009748:	d853      	bhi.n	80097f2 <USBD_StdDevReq+0xc6>
 800974a:	2b00      	cmp	r3, #0
 800974c:	d00b      	beq.n	8009766 <USBD_StdDevReq+0x3a>
 800974e:	2b20      	cmp	r3, #32
 8009750:	d14f      	bne.n	80097f2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009758:	689b      	ldr	r3, [r3, #8]
 800975a:	6839      	ldr	r1, [r7, #0]
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	4798      	blx	r3
 8009760:	4603      	mov	r3, r0
 8009762:	73fb      	strb	r3, [r7, #15]
      break;
 8009764:	e04a      	b.n	80097fc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	785b      	ldrb	r3, [r3, #1]
 800976a:	2b09      	cmp	r3, #9
 800976c:	d83b      	bhi.n	80097e6 <USBD_StdDevReq+0xba>
 800976e:	a201      	add	r2, pc, #4	; (adr r2, 8009774 <USBD_StdDevReq+0x48>)
 8009770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009774:	080097c9 	.word	0x080097c9
 8009778:	080097dd 	.word	0x080097dd
 800977c:	080097e7 	.word	0x080097e7
 8009780:	080097d3 	.word	0x080097d3
 8009784:	080097e7 	.word	0x080097e7
 8009788:	080097a7 	.word	0x080097a7
 800978c:	0800979d 	.word	0x0800979d
 8009790:	080097e7 	.word	0x080097e7
 8009794:	080097bf 	.word	0x080097bf
 8009798:	080097b1 	.word	0x080097b1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800979c:	6839      	ldr	r1, [r7, #0]
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f000 f9de 	bl	8009b60 <USBD_GetDescriptor>
          break;
 80097a4:	e024      	b.n	80097f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80097a6:	6839      	ldr	r1, [r7, #0]
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f000 fb43 	bl	8009e34 <USBD_SetAddress>
          break;
 80097ae:	e01f      	b.n	80097f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80097b0:	6839      	ldr	r1, [r7, #0]
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 fb82 	bl	8009ebc <USBD_SetConfig>
 80097b8:	4603      	mov	r3, r0
 80097ba:	73fb      	strb	r3, [r7, #15]
          break;
 80097bc:	e018      	b.n	80097f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80097be:	6839      	ldr	r1, [r7, #0]
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f000 fc21 	bl	800a008 <USBD_GetConfig>
          break;
 80097c6:	e013      	b.n	80097f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80097c8:	6839      	ldr	r1, [r7, #0]
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 fc52 	bl	800a074 <USBD_GetStatus>
          break;
 80097d0:	e00e      	b.n	80097f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80097d2:	6839      	ldr	r1, [r7, #0]
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f000 fc81 	bl	800a0dc <USBD_SetFeature>
          break;
 80097da:	e009      	b.n	80097f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80097dc:	6839      	ldr	r1, [r7, #0]
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 fc90 	bl	800a104 <USBD_ClrFeature>
          break;
 80097e4:	e004      	b.n	80097f0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80097e6:	6839      	ldr	r1, [r7, #0]
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f000 fce7 	bl	800a1bc <USBD_CtlError>
          break;
 80097ee:	bf00      	nop
      }
      break;
 80097f0:	e004      	b.n	80097fc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80097f2:	6839      	ldr	r1, [r7, #0]
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f000 fce1 	bl	800a1bc <USBD_CtlError>
      break;
 80097fa:	bf00      	nop
  }

  return ret;
 80097fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3710      	adds	r7, #16
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}
 8009806:	bf00      	nop

08009808 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b084      	sub	sp, #16
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009812:	2300      	movs	r3, #0
 8009814:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	781b      	ldrb	r3, [r3, #0]
 800981a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800981e:	2b40      	cmp	r3, #64	; 0x40
 8009820:	d005      	beq.n	800982e <USBD_StdItfReq+0x26>
 8009822:	2b40      	cmp	r3, #64	; 0x40
 8009824:	d82f      	bhi.n	8009886 <USBD_StdItfReq+0x7e>
 8009826:	2b00      	cmp	r3, #0
 8009828:	d001      	beq.n	800982e <USBD_StdItfReq+0x26>
 800982a:	2b20      	cmp	r3, #32
 800982c:	d12b      	bne.n	8009886 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009834:	b2db      	uxtb	r3, r3
 8009836:	3b01      	subs	r3, #1
 8009838:	2b02      	cmp	r3, #2
 800983a:	d81d      	bhi.n	8009878 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	889b      	ldrh	r3, [r3, #4]
 8009840:	b2db      	uxtb	r3, r3
 8009842:	2b01      	cmp	r3, #1
 8009844:	d813      	bhi.n	800986e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800984c:	689b      	ldr	r3, [r3, #8]
 800984e:	6839      	ldr	r1, [r7, #0]
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	4798      	blx	r3
 8009854:	4603      	mov	r3, r0
 8009856:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	88db      	ldrh	r3, [r3, #6]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d110      	bne.n	8009882 <USBD_StdItfReq+0x7a>
 8009860:	7bfb      	ldrb	r3, [r7, #15]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d10d      	bne.n	8009882 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 fd73 	bl	800a352 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800986c:	e009      	b.n	8009882 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800986e:	6839      	ldr	r1, [r7, #0]
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f000 fca3 	bl	800a1bc <USBD_CtlError>
          break;
 8009876:	e004      	b.n	8009882 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009878:	6839      	ldr	r1, [r7, #0]
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f000 fc9e 	bl	800a1bc <USBD_CtlError>
          break;
 8009880:	e000      	b.n	8009884 <USBD_StdItfReq+0x7c>
          break;
 8009882:	bf00      	nop
      }
      break;
 8009884:	e004      	b.n	8009890 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009886:	6839      	ldr	r1, [r7, #0]
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f000 fc97 	bl	800a1bc <USBD_CtlError>
      break;
 800988e:	bf00      	nop
  }

  return ret;
 8009890:	7bfb      	ldrb	r3, [r7, #15]
}
 8009892:	4618      	mov	r0, r3
 8009894:	3710      	adds	r7, #16
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}

0800989a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800989a:	b580      	push	{r7, lr}
 800989c:	b084      	sub	sp, #16
 800989e:	af00      	add	r7, sp, #0
 80098a0:	6078      	str	r0, [r7, #4]
 80098a2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80098a4:	2300      	movs	r3, #0
 80098a6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	889b      	ldrh	r3, [r3, #4]
 80098ac:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	781b      	ldrb	r3, [r3, #0]
 80098b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80098b6:	2b40      	cmp	r3, #64	; 0x40
 80098b8:	d007      	beq.n	80098ca <USBD_StdEPReq+0x30>
 80098ba:	2b40      	cmp	r3, #64	; 0x40
 80098bc:	f200 8145 	bhi.w	8009b4a <USBD_StdEPReq+0x2b0>
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d00c      	beq.n	80098de <USBD_StdEPReq+0x44>
 80098c4:	2b20      	cmp	r3, #32
 80098c6:	f040 8140 	bne.w	8009b4a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098d0:	689b      	ldr	r3, [r3, #8]
 80098d2:	6839      	ldr	r1, [r7, #0]
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	4798      	blx	r3
 80098d8:	4603      	mov	r3, r0
 80098da:	73fb      	strb	r3, [r7, #15]
      break;
 80098dc:	e13a      	b.n	8009b54 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	785b      	ldrb	r3, [r3, #1]
 80098e2:	2b03      	cmp	r3, #3
 80098e4:	d007      	beq.n	80098f6 <USBD_StdEPReq+0x5c>
 80098e6:	2b03      	cmp	r3, #3
 80098e8:	f300 8129 	bgt.w	8009b3e <USBD_StdEPReq+0x2a4>
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d07f      	beq.n	80099f0 <USBD_StdEPReq+0x156>
 80098f0:	2b01      	cmp	r3, #1
 80098f2:	d03c      	beq.n	800996e <USBD_StdEPReq+0xd4>
 80098f4:	e123      	b.n	8009b3e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098fc:	b2db      	uxtb	r3, r3
 80098fe:	2b02      	cmp	r3, #2
 8009900:	d002      	beq.n	8009908 <USBD_StdEPReq+0x6e>
 8009902:	2b03      	cmp	r3, #3
 8009904:	d016      	beq.n	8009934 <USBD_StdEPReq+0x9a>
 8009906:	e02c      	b.n	8009962 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009908:	7bbb      	ldrb	r3, [r7, #14]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d00d      	beq.n	800992a <USBD_StdEPReq+0x90>
 800990e:	7bbb      	ldrb	r3, [r7, #14]
 8009910:	2b80      	cmp	r3, #128	; 0x80
 8009912:	d00a      	beq.n	800992a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009914:	7bbb      	ldrb	r3, [r7, #14]
 8009916:	4619      	mov	r1, r3
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f001 f997 	bl	800ac4c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800991e:	2180      	movs	r1, #128	; 0x80
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f001 f993 	bl	800ac4c <USBD_LL_StallEP>
 8009926:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009928:	e020      	b.n	800996c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800992a:	6839      	ldr	r1, [r7, #0]
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f000 fc45 	bl	800a1bc <USBD_CtlError>
              break;
 8009932:	e01b      	b.n	800996c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	885b      	ldrh	r3, [r3, #2]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d10e      	bne.n	800995a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800993c:	7bbb      	ldrb	r3, [r7, #14]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d00b      	beq.n	800995a <USBD_StdEPReq+0xc0>
 8009942:	7bbb      	ldrb	r3, [r7, #14]
 8009944:	2b80      	cmp	r3, #128	; 0x80
 8009946:	d008      	beq.n	800995a <USBD_StdEPReq+0xc0>
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	88db      	ldrh	r3, [r3, #6]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d104      	bne.n	800995a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009950:	7bbb      	ldrb	r3, [r7, #14]
 8009952:	4619      	mov	r1, r3
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f001 f979 	bl	800ac4c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f000 fcf9 	bl	800a352 <USBD_CtlSendStatus>

              break;
 8009960:	e004      	b.n	800996c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009962:	6839      	ldr	r1, [r7, #0]
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f000 fc29 	bl	800a1bc <USBD_CtlError>
              break;
 800996a:	bf00      	nop
          }
          break;
 800996c:	e0ec      	b.n	8009b48 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009974:	b2db      	uxtb	r3, r3
 8009976:	2b02      	cmp	r3, #2
 8009978:	d002      	beq.n	8009980 <USBD_StdEPReq+0xe6>
 800997a:	2b03      	cmp	r3, #3
 800997c:	d016      	beq.n	80099ac <USBD_StdEPReq+0x112>
 800997e:	e030      	b.n	80099e2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009980:	7bbb      	ldrb	r3, [r7, #14]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d00d      	beq.n	80099a2 <USBD_StdEPReq+0x108>
 8009986:	7bbb      	ldrb	r3, [r7, #14]
 8009988:	2b80      	cmp	r3, #128	; 0x80
 800998a:	d00a      	beq.n	80099a2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800998c:	7bbb      	ldrb	r3, [r7, #14]
 800998e:	4619      	mov	r1, r3
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f001 f95b 	bl	800ac4c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009996:	2180      	movs	r1, #128	; 0x80
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f001 f957 	bl	800ac4c <USBD_LL_StallEP>
 800999e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80099a0:	e025      	b.n	80099ee <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80099a2:	6839      	ldr	r1, [r7, #0]
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f000 fc09 	bl	800a1bc <USBD_CtlError>
              break;
 80099aa:	e020      	b.n	80099ee <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	885b      	ldrh	r3, [r3, #2]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d11b      	bne.n	80099ec <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80099b4:	7bbb      	ldrb	r3, [r7, #14]
 80099b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d004      	beq.n	80099c8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80099be:	7bbb      	ldrb	r3, [r7, #14]
 80099c0:	4619      	mov	r1, r3
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f001 f961 	bl	800ac8a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 fcc2 	bl	800a352 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099d4:	689b      	ldr	r3, [r3, #8]
 80099d6:	6839      	ldr	r1, [r7, #0]
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	4798      	blx	r3
 80099dc:	4603      	mov	r3, r0
 80099de:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80099e0:	e004      	b.n	80099ec <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80099e2:	6839      	ldr	r1, [r7, #0]
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f000 fbe9 	bl	800a1bc <USBD_CtlError>
              break;
 80099ea:	e000      	b.n	80099ee <USBD_StdEPReq+0x154>
              break;
 80099ec:	bf00      	nop
          }
          break;
 80099ee:	e0ab      	b.n	8009b48 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099f6:	b2db      	uxtb	r3, r3
 80099f8:	2b02      	cmp	r3, #2
 80099fa:	d002      	beq.n	8009a02 <USBD_StdEPReq+0x168>
 80099fc:	2b03      	cmp	r3, #3
 80099fe:	d032      	beq.n	8009a66 <USBD_StdEPReq+0x1cc>
 8009a00:	e097      	b.n	8009b32 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a02:	7bbb      	ldrb	r3, [r7, #14]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d007      	beq.n	8009a18 <USBD_StdEPReq+0x17e>
 8009a08:	7bbb      	ldrb	r3, [r7, #14]
 8009a0a:	2b80      	cmp	r3, #128	; 0x80
 8009a0c:	d004      	beq.n	8009a18 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009a0e:	6839      	ldr	r1, [r7, #0]
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f000 fbd3 	bl	800a1bc <USBD_CtlError>
                break;
 8009a16:	e091      	b.n	8009b3c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	da0b      	bge.n	8009a38 <USBD_StdEPReq+0x19e>
 8009a20:	7bbb      	ldrb	r3, [r7, #14]
 8009a22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a26:	4613      	mov	r3, r2
 8009a28:	009b      	lsls	r3, r3, #2
 8009a2a:	4413      	add	r3, r2
 8009a2c:	009b      	lsls	r3, r3, #2
 8009a2e:	3310      	adds	r3, #16
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	4413      	add	r3, r2
 8009a34:	3304      	adds	r3, #4
 8009a36:	e00b      	b.n	8009a50 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009a38:	7bbb      	ldrb	r3, [r7, #14]
 8009a3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a3e:	4613      	mov	r3, r2
 8009a40:	009b      	lsls	r3, r3, #2
 8009a42:	4413      	add	r3, r2
 8009a44:	009b      	lsls	r3, r3, #2
 8009a46:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009a4a:	687a      	ldr	r2, [r7, #4]
 8009a4c:	4413      	add	r3, r2
 8009a4e:	3304      	adds	r3, #4
 8009a50:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	2200      	movs	r2, #0
 8009a56:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	2202      	movs	r2, #2
 8009a5c:	4619      	mov	r1, r3
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 fc1d 	bl	800a29e <USBD_CtlSendData>
              break;
 8009a64:	e06a      	b.n	8009b3c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009a66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	da11      	bge.n	8009a92 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009a6e:	7bbb      	ldrb	r3, [r7, #14]
 8009a70:	f003 020f 	and.w	r2, r3, #15
 8009a74:	6879      	ldr	r1, [r7, #4]
 8009a76:	4613      	mov	r3, r2
 8009a78:	009b      	lsls	r3, r3, #2
 8009a7a:	4413      	add	r3, r2
 8009a7c:	009b      	lsls	r3, r3, #2
 8009a7e:	440b      	add	r3, r1
 8009a80:	3324      	adds	r3, #36	; 0x24
 8009a82:	881b      	ldrh	r3, [r3, #0]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d117      	bne.n	8009ab8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009a88:	6839      	ldr	r1, [r7, #0]
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 fb96 	bl	800a1bc <USBD_CtlError>
                  break;
 8009a90:	e054      	b.n	8009b3c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009a92:	7bbb      	ldrb	r3, [r7, #14]
 8009a94:	f003 020f 	and.w	r2, r3, #15
 8009a98:	6879      	ldr	r1, [r7, #4]
 8009a9a:	4613      	mov	r3, r2
 8009a9c:	009b      	lsls	r3, r3, #2
 8009a9e:	4413      	add	r3, r2
 8009aa0:	009b      	lsls	r3, r3, #2
 8009aa2:	440b      	add	r3, r1
 8009aa4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009aa8:	881b      	ldrh	r3, [r3, #0]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d104      	bne.n	8009ab8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009aae:	6839      	ldr	r1, [r7, #0]
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f000 fb83 	bl	800a1bc <USBD_CtlError>
                  break;
 8009ab6:	e041      	b.n	8009b3c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ab8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	da0b      	bge.n	8009ad8 <USBD_StdEPReq+0x23e>
 8009ac0:	7bbb      	ldrb	r3, [r7, #14]
 8009ac2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ac6:	4613      	mov	r3, r2
 8009ac8:	009b      	lsls	r3, r3, #2
 8009aca:	4413      	add	r3, r2
 8009acc:	009b      	lsls	r3, r3, #2
 8009ace:	3310      	adds	r3, #16
 8009ad0:	687a      	ldr	r2, [r7, #4]
 8009ad2:	4413      	add	r3, r2
 8009ad4:	3304      	adds	r3, #4
 8009ad6:	e00b      	b.n	8009af0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009ad8:	7bbb      	ldrb	r3, [r7, #14]
 8009ada:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ade:	4613      	mov	r3, r2
 8009ae0:	009b      	lsls	r3, r3, #2
 8009ae2:	4413      	add	r3, r2
 8009ae4:	009b      	lsls	r3, r3, #2
 8009ae6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009aea:	687a      	ldr	r2, [r7, #4]
 8009aec:	4413      	add	r3, r2
 8009aee:	3304      	adds	r3, #4
 8009af0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009af2:	7bbb      	ldrb	r3, [r7, #14]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d002      	beq.n	8009afe <USBD_StdEPReq+0x264>
 8009af8:	7bbb      	ldrb	r3, [r7, #14]
 8009afa:	2b80      	cmp	r3, #128	; 0x80
 8009afc:	d103      	bne.n	8009b06 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	2200      	movs	r2, #0
 8009b02:	601a      	str	r2, [r3, #0]
 8009b04:	e00e      	b.n	8009b24 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009b06:	7bbb      	ldrb	r3, [r7, #14]
 8009b08:	4619      	mov	r1, r3
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f001 f8dc 	bl	800acc8 <USBD_LL_IsStallEP>
 8009b10:	4603      	mov	r3, r0
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d003      	beq.n	8009b1e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	2201      	movs	r2, #1
 8009b1a:	601a      	str	r2, [r3, #0]
 8009b1c:	e002      	b.n	8009b24 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	2200      	movs	r2, #0
 8009b22:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	2202      	movs	r2, #2
 8009b28:	4619      	mov	r1, r3
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f000 fbb7 	bl	800a29e <USBD_CtlSendData>
              break;
 8009b30:	e004      	b.n	8009b3c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009b32:	6839      	ldr	r1, [r7, #0]
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f000 fb41 	bl	800a1bc <USBD_CtlError>
              break;
 8009b3a:	bf00      	nop
          }
          break;
 8009b3c:	e004      	b.n	8009b48 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009b3e:	6839      	ldr	r1, [r7, #0]
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f000 fb3b 	bl	800a1bc <USBD_CtlError>
          break;
 8009b46:	bf00      	nop
      }
      break;
 8009b48:	e004      	b.n	8009b54 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009b4a:	6839      	ldr	r1, [r7, #0]
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f000 fb35 	bl	800a1bc <USBD_CtlError>
      break;
 8009b52:	bf00      	nop
  }

  return ret;
 8009b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3710      	adds	r7, #16
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}
	...

08009b60 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009b72:	2300      	movs	r3, #0
 8009b74:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	885b      	ldrh	r3, [r3, #2]
 8009b7a:	0a1b      	lsrs	r3, r3, #8
 8009b7c:	b29b      	uxth	r3, r3
 8009b7e:	3b01      	subs	r3, #1
 8009b80:	2b06      	cmp	r3, #6
 8009b82:	f200 8128 	bhi.w	8009dd6 <USBD_GetDescriptor+0x276>
 8009b86:	a201      	add	r2, pc, #4	; (adr r2, 8009b8c <USBD_GetDescriptor+0x2c>)
 8009b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b8c:	08009ba9 	.word	0x08009ba9
 8009b90:	08009bc1 	.word	0x08009bc1
 8009b94:	08009c01 	.word	0x08009c01
 8009b98:	08009dd7 	.word	0x08009dd7
 8009b9c:	08009dd7 	.word	0x08009dd7
 8009ba0:	08009d77 	.word	0x08009d77
 8009ba4:	08009da3 	.word	0x08009da3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	687a      	ldr	r2, [r7, #4]
 8009bb2:	7c12      	ldrb	r2, [r2, #16]
 8009bb4:	f107 0108 	add.w	r1, r7, #8
 8009bb8:	4610      	mov	r0, r2
 8009bba:	4798      	blx	r3
 8009bbc:	60f8      	str	r0, [r7, #12]
      break;
 8009bbe:	e112      	b.n	8009de6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	7c1b      	ldrb	r3, [r3, #16]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d10d      	bne.n	8009be4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bd0:	f107 0208 	add.w	r2, r7, #8
 8009bd4:	4610      	mov	r0, r2
 8009bd6:	4798      	blx	r3
 8009bd8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	3301      	adds	r3, #1
 8009bde:	2202      	movs	r2, #2
 8009be0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009be2:	e100      	b.n	8009de6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bec:	f107 0208 	add.w	r2, r7, #8
 8009bf0:	4610      	mov	r0, r2
 8009bf2:	4798      	blx	r3
 8009bf4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	3301      	adds	r3, #1
 8009bfa:	2202      	movs	r2, #2
 8009bfc:	701a      	strb	r2, [r3, #0]
      break;
 8009bfe:	e0f2      	b.n	8009de6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	885b      	ldrh	r3, [r3, #2]
 8009c04:	b2db      	uxtb	r3, r3
 8009c06:	2b05      	cmp	r3, #5
 8009c08:	f200 80ac 	bhi.w	8009d64 <USBD_GetDescriptor+0x204>
 8009c0c:	a201      	add	r2, pc, #4	; (adr r2, 8009c14 <USBD_GetDescriptor+0xb4>)
 8009c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c12:	bf00      	nop
 8009c14:	08009c2d 	.word	0x08009c2d
 8009c18:	08009c61 	.word	0x08009c61
 8009c1c:	08009c95 	.word	0x08009c95
 8009c20:	08009cc9 	.word	0x08009cc9
 8009c24:	08009cfd 	.word	0x08009cfd
 8009c28:	08009d31 	.word	0x08009d31
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d00b      	beq.n	8009c50 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c3e:	685b      	ldr	r3, [r3, #4]
 8009c40:	687a      	ldr	r2, [r7, #4]
 8009c42:	7c12      	ldrb	r2, [r2, #16]
 8009c44:	f107 0108 	add.w	r1, r7, #8
 8009c48:	4610      	mov	r0, r2
 8009c4a:	4798      	blx	r3
 8009c4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c4e:	e091      	b.n	8009d74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c50:	6839      	ldr	r1, [r7, #0]
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 fab2 	bl	800a1bc <USBD_CtlError>
            err++;
 8009c58:	7afb      	ldrb	r3, [r7, #11]
 8009c5a:	3301      	adds	r3, #1
 8009c5c:	72fb      	strb	r3, [r7, #11]
          break;
 8009c5e:	e089      	b.n	8009d74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d00b      	beq.n	8009c84 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c72:	689b      	ldr	r3, [r3, #8]
 8009c74:	687a      	ldr	r2, [r7, #4]
 8009c76:	7c12      	ldrb	r2, [r2, #16]
 8009c78:	f107 0108 	add.w	r1, r7, #8
 8009c7c:	4610      	mov	r0, r2
 8009c7e:	4798      	blx	r3
 8009c80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c82:	e077      	b.n	8009d74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c84:	6839      	ldr	r1, [r7, #0]
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f000 fa98 	bl	800a1bc <USBD_CtlError>
            err++;
 8009c8c:	7afb      	ldrb	r3, [r7, #11]
 8009c8e:	3301      	adds	r3, #1
 8009c90:	72fb      	strb	r3, [r7, #11]
          break;
 8009c92:	e06f      	b.n	8009d74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c9a:	68db      	ldr	r3, [r3, #12]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d00b      	beq.n	8009cb8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ca6:	68db      	ldr	r3, [r3, #12]
 8009ca8:	687a      	ldr	r2, [r7, #4]
 8009caa:	7c12      	ldrb	r2, [r2, #16]
 8009cac:	f107 0108 	add.w	r1, r7, #8
 8009cb0:	4610      	mov	r0, r2
 8009cb2:	4798      	blx	r3
 8009cb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cb6:	e05d      	b.n	8009d74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009cb8:	6839      	ldr	r1, [r7, #0]
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f000 fa7e 	bl	800a1bc <USBD_CtlError>
            err++;
 8009cc0:	7afb      	ldrb	r3, [r7, #11]
 8009cc2:	3301      	adds	r3, #1
 8009cc4:	72fb      	strb	r3, [r7, #11]
          break;
 8009cc6:	e055      	b.n	8009d74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cce:	691b      	ldr	r3, [r3, #16]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d00b      	beq.n	8009cec <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cda:	691b      	ldr	r3, [r3, #16]
 8009cdc:	687a      	ldr	r2, [r7, #4]
 8009cde:	7c12      	ldrb	r2, [r2, #16]
 8009ce0:	f107 0108 	add.w	r1, r7, #8
 8009ce4:	4610      	mov	r0, r2
 8009ce6:	4798      	blx	r3
 8009ce8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cea:	e043      	b.n	8009d74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009cec:	6839      	ldr	r1, [r7, #0]
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f000 fa64 	bl	800a1bc <USBD_CtlError>
            err++;
 8009cf4:	7afb      	ldrb	r3, [r7, #11]
 8009cf6:	3301      	adds	r3, #1
 8009cf8:	72fb      	strb	r3, [r7, #11]
          break;
 8009cfa:	e03b      	b.n	8009d74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d02:	695b      	ldr	r3, [r3, #20]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d00b      	beq.n	8009d20 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d0e:	695b      	ldr	r3, [r3, #20]
 8009d10:	687a      	ldr	r2, [r7, #4]
 8009d12:	7c12      	ldrb	r2, [r2, #16]
 8009d14:	f107 0108 	add.w	r1, r7, #8
 8009d18:	4610      	mov	r0, r2
 8009d1a:	4798      	blx	r3
 8009d1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d1e:	e029      	b.n	8009d74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d20:	6839      	ldr	r1, [r7, #0]
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f000 fa4a 	bl	800a1bc <USBD_CtlError>
            err++;
 8009d28:	7afb      	ldrb	r3, [r7, #11]
 8009d2a:	3301      	adds	r3, #1
 8009d2c:	72fb      	strb	r3, [r7, #11]
          break;
 8009d2e:	e021      	b.n	8009d74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d36:	699b      	ldr	r3, [r3, #24]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d00b      	beq.n	8009d54 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d42:	699b      	ldr	r3, [r3, #24]
 8009d44:	687a      	ldr	r2, [r7, #4]
 8009d46:	7c12      	ldrb	r2, [r2, #16]
 8009d48:	f107 0108 	add.w	r1, r7, #8
 8009d4c:	4610      	mov	r0, r2
 8009d4e:	4798      	blx	r3
 8009d50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d52:	e00f      	b.n	8009d74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d54:	6839      	ldr	r1, [r7, #0]
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f000 fa30 	bl	800a1bc <USBD_CtlError>
            err++;
 8009d5c:	7afb      	ldrb	r3, [r7, #11]
 8009d5e:	3301      	adds	r3, #1
 8009d60:	72fb      	strb	r3, [r7, #11]
          break;
 8009d62:	e007      	b.n	8009d74 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009d64:	6839      	ldr	r1, [r7, #0]
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f000 fa28 	bl	800a1bc <USBD_CtlError>
          err++;
 8009d6c:	7afb      	ldrb	r3, [r7, #11]
 8009d6e:	3301      	adds	r3, #1
 8009d70:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009d72:	bf00      	nop
      }
      break;
 8009d74:	e037      	b.n	8009de6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	7c1b      	ldrb	r3, [r3, #16]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d109      	bne.n	8009d92 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d86:	f107 0208 	add.w	r2, r7, #8
 8009d8a:	4610      	mov	r0, r2
 8009d8c:	4798      	blx	r3
 8009d8e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009d90:	e029      	b.n	8009de6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009d92:	6839      	ldr	r1, [r7, #0]
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f000 fa11 	bl	800a1bc <USBD_CtlError>
        err++;
 8009d9a:	7afb      	ldrb	r3, [r7, #11]
 8009d9c:	3301      	adds	r3, #1
 8009d9e:	72fb      	strb	r3, [r7, #11]
      break;
 8009da0:	e021      	b.n	8009de6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	7c1b      	ldrb	r3, [r3, #16]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d10d      	bne.n	8009dc6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009db2:	f107 0208 	add.w	r2, r7, #8
 8009db6:	4610      	mov	r0, r2
 8009db8:	4798      	blx	r3
 8009dba:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	3301      	adds	r3, #1
 8009dc0:	2207      	movs	r2, #7
 8009dc2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009dc4:	e00f      	b.n	8009de6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009dc6:	6839      	ldr	r1, [r7, #0]
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f000 f9f7 	bl	800a1bc <USBD_CtlError>
        err++;
 8009dce:	7afb      	ldrb	r3, [r7, #11]
 8009dd0:	3301      	adds	r3, #1
 8009dd2:	72fb      	strb	r3, [r7, #11]
      break;
 8009dd4:	e007      	b.n	8009de6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009dd6:	6839      	ldr	r1, [r7, #0]
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f000 f9ef 	bl	800a1bc <USBD_CtlError>
      err++;
 8009dde:	7afb      	ldrb	r3, [r7, #11]
 8009de0:	3301      	adds	r3, #1
 8009de2:	72fb      	strb	r3, [r7, #11]
      break;
 8009de4:	bf00      	nop
  }

  if (err != 0U)
 8009de6:	7afb      	ldrb	r3, [r7, #11]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d11e      	bne.n	8009e2a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	88db      	ldrh	r3, [r3, #6]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d016      	beq.n	8009e22 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009df4:	893b      	ldrh	r3, [r7, #8]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d00e      	beq.n	8009e18 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	88da      	ldrh	r2, [r3, #6]
 8009dfe:	893b      	ldrh	r3, [r7, #8]
 8009e00:	4293      	cmp	r3, r2
 8009e02:	bf28      	it	cs
 8009e04:	4613      	movcs	r3, r2
 8009e06:	b29b      	uxth	r3, r3
 8009e08:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009e0a:	893b      	ldrh	r3, [r7, #8]
 8009e0c:	461a      	mov	r2, r3
 8009e0e:	68f9      	ldr	r1, [r7, #12]
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f000 fa44 	bl	800a29e <USBD_CtlSendData>
 8009e16:	e009      	b.n	8009e2c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009e18:	6839      	ldr	r1, [r7, #0]
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f000 f9ce 	bl	800a1bc <USBD_CtlError>
 8009e20:	e004      	b.n	8009e2c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f000 fa95 	bl	800a352 <USBD_CtlSendStatus>
 8009e28:	e000      	b.n	8009e2c <USBD_GetDescriptor+0x2cc>
    return;
 8009e2a:	bf00      	nop
  }
}
 8009e2c:	3710      	adds	r7, #16
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}
 8009e32:	bf00      	nop

08009e34 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b084      	sub	sp, #16
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	889b      	ldrh	r3, [r3, #4]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d131      	bne.n	8009eaa <USBD_SetAddress+0x76>
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	88db      	ldrh	r3, [r3, #6]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d12d      	bne.n	8009eaa <USBD_SetAddress+0x76>
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	885b      	ldrh	r3, [r3, #2]
 8009e52:	2b7f      	cmp	r3, #127	; 0x7f
 8009e54:	d829      	bhi.n	8009eaa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	885b      	ldrh	r3, [r3, #2]
 8009e5a:	b2db      	uxtb	r3, r3
 8009e5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e60:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e68:	b2db      	uxtb	r3, r3
 8009e6a:	2b03      	cmp	r3, #3
 8009e6c:	d104      	bne.n	8009e78 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009e6e:	6839      	ldr	r1, [r7, #0]
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f000 f9a3 	bl	800a1bc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e76:	e01d      	b.n	8009eb4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	7bfa      	ldrb	r2, [r7, #15]
 8009e7c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009e80:	7bfb      	ldrb	r3, [r7, #15]
 8009e82:	4619      	mov	r1, r3
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f000 ff4b 	bl	800ad20 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f000 fa61 	bl	800a352 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009e90:	7bfb      	ldrb	r3, [r7, #15]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d004      	beq.n	8009ea0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2202      	movs	r2, #2
 8009e9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e9e:	e009      	b.n	8009eb4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ea8:	e004      	b.n	8009eb4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009eaa:	6839      	ldr	r1, [r7, #0]
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f000 f985 	bl	800a1bc <USBD_CtlError>
  }
}
 8009eb2:	bf00      	nop
 8009eb4:	bf00      	nop
 8009eb6:	3710      	adds	r7, #16
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}

08009ebc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b084      	sub	sp, #16
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	885b      	ldrh	r3, [r3, #2]
 8009ece:	b2da      	uxtb	r2, r3
 8009ed0:	4b4c      	ldr	r3, [pc, #304]	; (800a004 <USBD_SetConfig+0x148>)
 8009ed2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009ed4:	4b4b      	ldr	r3, [pc, #300]	; (800a004 <USBD_SetConfig+0x148>)
 8009ed6:	781b      	ldrb	r3, [r3, #0]
 8009ed8:	2b01      	cmp	r3, #1
 8009eda:	d905      	bls.n	8009ee8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009edc:	6839      	ldr	r1, [r7, #0]
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f000 f96c 	bl	800a1bc <USBD_CtlError>
    return USBD_FAIL;
 8009ee4:	2303      	movs	r3, #3
 8009ee6:	e088      	b.n	8009ffa <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009eee:	b2db      	uxtb	r3, r3
 8009ef0:	2b02      	cmp	r3, #2
 8009ef2:	d002      	beq.n	8009efa <USBD_SetConfig+0x3e>
 8009ef4:	2b03      	cmp	r3, #3
 8009ef6:	d025      	beq.n	8009f44 <USBD_SetConfig+0x88>
 8009ef8:	e071      	b.n	8009fde <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009efa:	4b42      	ldr	r3, [pc, #264]	; (800a004 <USBD_SetConfig+0x148>)
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d01c      	beq.n	8009f3c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009f02:	4b40      	ldr	r3, [pc, #256]	; (800a004 <USBD_SetConfig+0x148>)
 8009f04:	781b      	ldrb	r3, [r3, #0]
 8009f06:	461a      	mov	r2, r3
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009f0c:	4b3d      	ldr	r3, [pc, #244]	; (800a004 <USBD_SetConfig+0x148>)
 8009f0e:	781b      	ldrb	r3, [r3, #0]
 8009f10:	4619      	mov	r1, r3
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f7ff f948 	bl	80091a8 <USBD_SetClassConfig>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009f1c:	7bfb      	ldrb	r3, [r7, #15]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d004      	beq.n	8009f2c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009f22:	6839      	ldr	r1, [r7, #0]
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f000 f949 	bl	800a1bc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009f2a:	e065      	b.n	8009ff8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f000 fa10 	bl	800a352 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2203      	movs	r2, #3
 8009f36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009f3a:	e05d      	b.n	8009ff8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f000 fa08 	bl	800a352 <USBD_CtlSendStatus>
      break;
 8009f42:	e059      	b.n	8009ff8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009f44:	4b2f      	ldr	r3, [pc, #188]	; (800a004 <USBD_SetConfig+0x148>)
 8009f46:	781b      	ldrb	r3, [r3, #0]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d112      	bne.n	8009f72 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2202      	movs	r2, #2
 8009f50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009f54:	4b2b      	ldr	r3, [pc, #172]	; (800a004 <USBD_SetConfig+0x148>)
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	461a      	mov	r2, r3
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009f5e:	4b29      	ldr	r3, [pc, #164]	; (800a004 <USBD_SetConfig+0x148>)
 8009f60:	781b      	ldrb	r3, [r3, #0]
 8009f62:	4619      	mov	r1, r3
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f7ff f93b 	bl	80091e0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f000 f9f1 	bl	800a352 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009f70:	e042      	b.n	8009ff8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009f72:	4b24      	ldr	r3, [pc, #144]	; (800a004 <USBD_SetConfig+0x148>)
 8009f74:	781b      	ldrb	r3, [r3, #0]
 8009f76:	461a      	mov	r2, r3
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	685b      	ldr	r3, [r3, #4]
 8009f7c:	429a      	cmp	r2, r3
 8009f7e:	d02a      	beq.n	8009fd6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	685b      	ldr	r3, [r3, #4]
 8009f84:	b2db      	uxtb	r3, r3
 8009f86:	4619      	mov	r1, r3
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f7ff f929 	bl	80091e0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009f8e:	4b1d      	ldr	r3, [pc, #116]	; (800a004 <USBD_SetConfig+0x148>)
 8009f90:	781b      	ldrb	r3, [r3, #0]
 8009f92:	461a      	mov	r2, r3
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009f98:	4b1a      	ldr	r3, [pc, #104]	; (800a004 <USBD_SetConfig+0x148>)
 8009f9a:	781b      	ldrb	r3, [r3, #0]
 8009f9c:	4619      	mov	r1, r3
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f7ff f902 	bl	80091a8 <USBD_SetClassConfig>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009fa8:	7bfb      	ldrb	r3, [r7, #15]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d00f      	beq.n	8009fce <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009fae:	6839      	ldr	r1, [r7, #0]
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f000 f903 	bl	800a1bc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	b2db      	uxtb	r3, r3
 8009fbc:	4619      	mov	r1, r3
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f7ff f90e 	bl	80091e0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2202      	movs	r2, #2
 8009fc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009fcc:	e014      	b.n	8009ff8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f000 f9bf 	bl	800a352 <USBD_CtlSendStatus>
      break;
 8009fd4:	e010      	b.n	8009ff8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f000 f9bb 	bl	800a352 <USBD_CtlSendStatus>
      break;
 8009fdc:	e00c      	b.n	8009ff8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009fde:	6839      	ldr	r1, [r7, #0]
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f000 f8eb 	bl	800a1bc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009fe6:	4b07      	ldr	r3, [pc, #28]	; (800a004 <USBD_SetConfig+0x148>)
 8009fe8:	781b      	ldrb	r3, [r3, #0]
 8009fea:	4619      	mov	r1, r3
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f7ff f8f7 	bl	80091e0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009ff2:	2303      	movs	r3, #3
 8009ff4:	73fb      	strb	r3, [r7, #15]
      break;
 8009ff6:	bf00      	nop
  }

  return ret;
 8009ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3710      	adds	r7, #16
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}
 800a002:	bf00      	nop
 800a004:	20000dfe 	.word	0x20000dfe

0800a008 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b082      	sub	sp, #8
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
 800a010:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	88db      	ldrh	r3, [r3, #6]
 800a016:	2b01      	cmp	r3, #1
 800a018:	d004      	beq.n	800a024 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a01a:	6839      	ldr	r1, [r7, #0]
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f000 f8cd 	bl	800a1bc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a022:	e023      	b.n	800a06c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a02a:	b2db      	uxtb	r3, r3
 800a02c:	2b02      	cmp	r3, #2
 800a02e:	dc02      	bgt.n	800a036 <USBD_GetConfig+0x2e>
 800a030:	2b00      	cmp	r3, #0
 800a032:	dc03      	bgt.n	800a03c <USBD_GetConfig+0x34>
 800a034:	e015      	b.n	800a062 <USBD_GetConfig+0x5a>
 800a036:	2b03      	cmp	r3, #3
 800a038:	d00b      	beq.n	800a052 <USBD_GetConfig+0x4a>
 800a03a:	e012      	b.n	800a062 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2200      	movs	r2, #0
 800a040:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	3308      	adds	r3, #8
 800a046:	2201      	movs	r2, #1
 800a048:	4619      	mov	r1, r3
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f000 f927 	bl	800a29e <USBD_CtlSendData>
        break;
 800a050:	e00c      	b.n	800a06c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	3304      	adds	r3, #4
 800a056:	2201      	movs	r2, #1
 800a058:	4619      	mov	r1, r3
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f000 f91f 	bl	800a29e <USBD_CtlSendData>
        break;
 800a060:	e004      	b.n	800a06c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a062:	6839      	ldr	r1, [r7, #0]
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f000 f8a9 	bl	800a1bc <USBD_CtlError>
        break;
 800a06a:	bf00      	nop
}
 800a06c:	bf00      	nop
 800a06e:	3708      	adds	r7, #8
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}

0800a074 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b082      	sub	sp, #8
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
 800a07c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a084:	b2db      	uxtb	r3, r3
 800a086:	3b01      	subs	r3, #1
 800a088:	2b02      	cmp	r3, #2
 800a08a:	d81e      	bhi.n	800a0ca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	88db      	ldrh	r3, [r3, #6]
 800a090:	2b02      	cmp	r3, #2
 800a092:	d004      	beq.n	800a09e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a094:	6839      	ldr	r1, [r7, #0]
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f000 f890 	bl	800a1bc <USBD_CtlError>
        break;
 800a09c:	e01a      	b.n	800a0d4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2201      	movs	r2, #1
 800a0a2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d005      	beq.n	800a0ba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	68db      	ldr	r3, [r3, #12]
 800a0b2:	f043 0202 	orr.w	r2, r3, #2
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	330c      	adds	r3, #12
 800a0be:	2202      	movs	r2, #2
 800a0c0:	4619      	mov	r1, r3
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f000 f8eb 	bl	800a29e <USBD_CtlSendData>
      break;
 800a0c8:	e004      	b.n	800a0d4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a0ca:	6839      	ldr	r1, [r7, #0]
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f000 f875 	bl	800a1bc <USBD_CtlError>
      break;
 800a0d2:	bf00      	nop
  }
}
 800a0d4:	bf00      	nop
 800a0d6:	3708      	adds	r7, #8
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}

0800a0dc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b082      	sub	sp, #8
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	885b      	ldrh	r3, [r3, #2]
 800a0ea:	2b01      	cmp	r3, #1
 800a0ec:	d106      	bne.n	800a0fc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f000 f92b 	bl	800a352 <USBD_CtlSendStatus>
  }
}
 800a0fc:	bf00      	nop
 800a0fe:	3708      	adds	r7, #8
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}

0800a104 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b082      	sub	sp, #8
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a114:	b2db      	uxtb	r3, r3
 800a116:	3b01      	subs	r3, #1
 800a118:	2b02      	cmp	r3, #2
 800a11a:	d80b      	bhi.n	800a134 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	885b      	ldrh	r3, [r3, #2]
 800a120:	2b01      	cmp	r3, #1
 800a122:	d10c      	bne.n	800a13e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2200      	movs	r2, #0
 800a128:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f000 f910 	bl	800a352 <USBD_CtlSendStatus>
      }
      break;
 800a132:	e004      	b.n	800a13e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a134:	6839      	ldr	r1, [r7, #0]
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f000 f840 	bl	800a1bc <USBD_CtlError>
      break;
 800a13c:	e000      	b.n	800a140 <USBD_ClrFeature+0x3c>
      break;
 800a13e:	bf00      	nop
  }
}
 800a140:	bf00      	nop
 800a142:	3708      	adds	r7, #8
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}

0800a148 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b084      	sub	sp, #16
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	781a      	ldrb	r2, [r3, #0]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	3301      	adds	r3, #1
 800a162:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	781a      	ldrb	r2, [r3, #0]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	3301      	adds	r3, #1
 800a170:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a172:	68f8      	ldr	r0, [r7, #12]
 800a174:	f7ff fabb 	bl	80096ee <SWAPBYTE>
 800a178:	4603      	mov	r3, r0
 800a17a:	461a      	mov	r2, r3
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	3301      	adds	r3, #1
 800a184:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	3301      	adds	r3, #1
 800a18a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a18c:	68f8      	ldr	r0, [r7, #12]
 800a18e:	f7ff faae 	bl	80096ee <SWAPBYTE>
 800a192:	4603      	mov	r3, r0
 800a194:	461a      	mov	r2, r3
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	3301      	adds	r3, #1
 800a19e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	3301      	adds	r3, #1
 800a1a4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a1a6:	68f8      	ldr	r0, [r7, #12]
 800a1a8:	f7ff faa1 	bl	80096ee <SWAPBYTE>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	461a      	mov	r2, r3
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	80da      	strh	r2, [r3, #6]
}
 800a1b4:	bf00      	nop
 800a1b6:	3710      	adds	r7, #16
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}

0800a1bc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b082      	sub	sp, #8
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
 800a1c4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a1c6:	2180      	movs	r1, #128	; 0x80
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f000 fd3f 	bl	800ac4c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a1ce:	2100      	movs	r1, #0
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f000 fd3b 	bl	800ac4c <USBD_LL_StallEP>
}
 800a1d6:	bf00      	nop
 800a1d8:	3708      	adds	r7, #8
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}

0800a1de <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a1de:	b580      	push	{r7, lr}
 800a1e0:	b086      	sub	sp, #24
 800a1e2:	af00      	add	r7, sp, #0
 800a1e4:	60f8      	str	r0, [r7, #12]
 800a1e6:	60b9      	str	r1, [r7, #8]
 800a1e8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d036      	beq.n	800a262 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a1f8:	6938      	ldr	r0, [r7, #16]
 800a1fa:	f000 f836 	bl	800a26a <USBD_GetLen>
 800a1fe:	4603      	mov	r3, r0
 800a200:	3301      	adds	r3, #1
 800a202:	b29b      	uxth	r3, r3
 800a204:	005b      	lsls	r3, r3, #1
 800a206:	b29a      	uxth	r2, r3
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a20c:	7dfb      	ldrb	r3, [r7, #23]
 800a20e:	68ba      	ldr	r2, [r7, #8]
 800a210:	4413      	add	r3, r2
 800a212:	687a      	ldr	r2, [r7, #4]
 800a214:	7812      	ldrb	r2, [r2, #0]
 800a216:	701a      	strb	r2, [r3, #0]
  idx++;
 800a218:	7dfb      	ldrb	r3, [r7, #23]
 800a21a:	3301      	adds	r3, #1
 800a21c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a21e:	7dfb      	ldrb	r3, [r7, #23]
 800a220:	68ba      	ldr	r2, [r7, #8]
 800a222:	4413      	add	r3, r2
 800a224:	2203      	movs	r2, #3
 800a226:	701a      	strb	r2, [r3, #0]
  idx++;
 800a228:	7dfb      	ldrb	r3, [r7, #23]
 800a22a:	3301      	adds	r3, #1
 800a22c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a22e:	e013      	b.n	800a258 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a230:	7dfb      	ldrb	r3, [r7, #23]
 800a232:	68ba      	ldr	r2, [r7, #8]
 800a234:	4413      	add	r3, r2
 800a236:	693a      	ldr	r2, [r7, #16]
 800a238:	7812      	ldrb	r2, [r2, #0]
 800a23a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	3301      	adds	r3, #1
 800a240:	613b      	str	r3, [r7, #16]
    idx++;
 800a242:	7dfb      	ldrb	r3, [r7, #23]
 800a244:	3301      	adds	r3, #1
 800a246:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a248:	7dfb      	ldrb	r3, [r7, #23]
 800a24a:	68ba      	ldr	r2, [r7, #8]
 800a24c:	4413      	add	r3, r2
 800a24e:	2200      	movs	r2, #0
 800a250:	701a      	strb	r2, [r3, #0]
    idx++;
 800a252:	7dfb      	ldrb	r3, [r7, #23]
 800a254:	3301      	adds	r3, #1
 800a256:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	781b      	ldrb	r3, [r3, #0]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d1e7      	bne.n	800a230 <USBD_GetString+0x52>
 800a260:	e000      	b.n	800a264 <USBD_GetString+0x86>
    return;
 800a262:	bf00      	nop
  }
}
 800a264:	3718      	adds	r7, #24
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}

0800a26a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a26a:	b480      	push	{r7}
 800a26c:	b085      	sub	sp, #20
 800a26e:	af00      	add	r7, sp, #0
 800a270:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a272:	2300      	movs	r3, #0
 800a274:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a27a:	e005      	b.n	800a288 <USBD_GetLen+0x1e>
  {
    len++;
 800a27c:	7bfb      	ldrb	r3, [r7, #15]
 800a27e:	3301      	adds	r3, #1
 800a280:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	3301      	adds	r3, #1
 800a286:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	781b      	ldrb	r3, [r3, #0]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d1f5      	bne.n	800a27c <USBD_GetLen+0x12>
  }

  return len;
 800a290:	7bfb      	ldrb	r3, [r7, #15]
}
 800a292:	4618      	mov	r0, r3
 800a294:	3714      	adds	r7, #20
 800a296:	46bd      	mov	sp, r7
 800a298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29c:	4770      	bx	lr

0800a29e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a29e:	b580      	push	{r7, lr}
 800a2a0:	b084      	sub	sp, #16
 800a2a2:	af00      	add	r7, sp, #0
 800a2a4:	60f8      	str	r0, [r7, #12]
 800a2a6:	60b9      	str	r1, [r7, #8]
 800a2a8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	2202      	movs	r2, #2
 800a2ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	687a      	ldr	r2, [r7, #4]
 800a2b6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	687a      	ldr	r2, [r7, #4]
 800a2bc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	68ba      	ldr	r2, [r7, #8]
 800a2c2:	2100      	movs	r1, #0
 800a2c4:	68f8      	ldr	r0, [r7, #12]
 800a2c6:	f000 fd4a 	bl	800ad5e <USBD_LL_Transmit>

  return USBD_OK;
 800a2ca:	2300      	movs	r3, #0
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	3710      	adds	r7, #16
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}

0800a2d4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b084      	sub	sp, #16
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	60f8      	str	r0, [r7, #12]
 800a2dc:	60b9      	str	r1, [r7, #8]
 800a2de:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	68ba      	ldr	r2, [r7, #8]
 800a2e4:	2100      	movs	r1, #0
 800a2e6:	68f8      	ldr	r0, [r7, #12]
 800a2e8:	f000 fd39 	bl	800ad5e <USBD_LL_Transmit>

  return USBD_OK;
 800a2ec:	2300      	movs	r3, #0
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3710      	adds	r7, #16
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}

0800a2f6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a2f6:	b580      	push	{r7, lr}
 800a2f8:	b084      	sub	sp, #16
 800a2fa:	af00      	add	r7, sp, #0
 800a2fc:	60f8      	str	r0, [r7, #12]
 800a2fe:	60b9      	str	r1, [r7, #8]
 800a300:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	2203      	movs	r2, #3
 800a306:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	687a      	ldr	r2, [r7, #4]
 800a30e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	687a      	ldr	r2, [r7, #4]
 800a316:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	68ba      	ldr	r2, [r7, #8]
 800a31e:	2100      	movs	r1, #0
 800a320:	68f8      	ldr	r0, [r7, #12]
 800a322:	f000 fd3d 	bl	800ada0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a326:	2300      	movs	r3, #0
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3710      	adds	r7, #16
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}

0800a330 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b084      	sub	sp, #16
 800a334:	af00      	add	r7, sp, #0
 800a336:	60f8      	str	r0, [r7, #12]
 800a338:	60b9      	str	r1, [r7, #8]
 800a33a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	68ba      	ldr	r2, [r7, #8]
 800a340:	2100      	movs	r1, #0
 800a342:	68f8      	ldr	r0, [r7, #12]
 800a344:	f000 fd2c 	bl	800ada0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a348:	2300      	movs	r3, #0
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3710      	adds	r7, #16
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}

0800a352 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a352:	b580      	push	{r7, lr}
 800a354:	b082      	sub	sp, #8
 800a356:	af00      	add	r7, sp, #0
 800a358:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2204      	movs	r2, #4
 800a35e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a362:	2300      	movs	r3, #0
 800a364:	2200      	movs	r2, #0
 800a366:	2100      	movs	r1, #0
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f000 fcf8 	bl	800ad5e <USBD_LL_Transmit>

  return USBD_OK;
 800a36e:	2300      	movs	r3, #0
}
 800a370:	4618      	mov	r0, r3
 800a372:	3708      	adds	r7, #8
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b082      	sub	sp, #8
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2205      	movs	r2, #5
 800a384:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a388:	2300      	movs	r3, #0
 800a38a:	2200      	movs	r2, #0
 800a38c:	2100      	movs	r1, #0
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f000 fd06 	bl	800ada0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a394:	2300      	movs	r3, #0
}
 800a396:	4618      	mov	r0, r3
 800a398:	3708      	adds	r7, #8
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}
	...

0800a3a0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	4912      	ldr	r1, [pc, #72]	; (800a3f0 <MX_USB_DEVICE_Init+0x50>)
 800a3a8:	4812      	ldr	r0, [pc, #72]	; (800a3f4 <MX_USB_DEVICE_Init+0x54>)
 800a3aa:	f7fe fe8f 	bl	80090cc <USBD_Init>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d001      	beq.n	800a3b8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a3b4:	f7f7 fde4 	bl	8001f80 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a3b8:	490f      	ldr	r1, [pc, #60]	; (800a3f8 <MX_USB_DEVICE_Init+0x58>)
 800a3ba:	480e      	ldr	r0, [pc, #56]	; (800a3f4 <MX_USB_DEVICE_Init+0x54>)
 800a3bc:	f7fe feb6 	bl	800912c <USBD_RegisterClass>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d001      	beq.n	800a3ca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a3c6:	f7f7 fddb 	bl	8001f80 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a3ca:	490c      	ldr	r1, [pc, #48]	; (800a3fc <MX_USB_DEVICE_Init+0x5c>)
 800a3cc:	4809      	ldr	r0, [pc, #36]	; (800a3f4 <MX_USB_DEVICE_Init+0x54>)
 800a3ce:	f7fc ff29 	bl	8007224 <USBD_CDC_RegisterInterface>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d001      	beq.n	800a3dc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a3d8:	f7f7 fdd2 	bl	8001f80 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a3dc:	4805      	ldr	r0, [pc, #20]	; (800a3f4 <MX_USB_DEVICE_Init+0x54>)
 800a3de:	f7fe fecc 	bl	800917a <USBD_Start>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d001      	beq.n	800a3ec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a3e8:	f7f7 fdca 	bl	8001f80 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a3ec:	bf00      	nop
 800a3ee:	bd80      	pop	{r7, pc}
 800a3f0:	20000a2c 	.word	0x20000a2c
 800a3f4:	200012a0 	.word	0x200012a0
 800a3f8:	20000968 	.word	0x20000968
 800a3fc:	20000a18 	.word	0x20000a18

0800a400 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a404:	2200      	movs	r2, #0
 800a406:	4905      	ldr	r1, [pc, #20]	; (800a41c <CDC_Init_FS+0x1c>)
 800a408:	4805      	ldr	r0, [pc, #20]	; (800a420 <CDC_Init_FS+0x20>)
 800a40a:	f7fc ff20 	bl	800724e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a40e:	4905      	ldr	r1, [pc, #20]	; (800a424 <CDC_Init_FS+0x24>)
 800a410:	4803      	ldr	r0, [pc, #12]	; (800a420 <CDC_Init_FS+0x20>)
 800a412:	f7fc ff35 	bl	8007280 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a416:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a418:	4618      	mov	r0, r3
 800a41a:	bd80      	pop	{r7, pc}
 800a41c:	20001d70 	.word	0x20001d70
 800a420:	200012a0 	.word	0x200012a0
 800a424:	20001570 	.word	0x20001570

0800a428 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a428:	b480      	push	{r7}
 800a42a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a42c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a42e:	4618      	mov	r0, r3
 800a430:	46bd      	mov	sp, r7
 800a432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a436:	4770      	bx	lr

0800a438 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a438:	b480      	push	{r7}
 800a43a:	b083      	sub	sp, #12
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	4603      	mov	r3, r0
 800a440:	6039      	str	r1, [r7, #0]
 800a442:	71fb      	strb	r3, [r7, #7]
 800a444:	4613      	mov	r3, r2
 800a446:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a448:	79fb      	ldrb	r3, [r7, #7]
 800a44a:	2b23      	cmp	r3, #35	; 0x23
 800a44c:	d84a      	bhi.n	800a4e4 <CDC_Control_FS+0xac>
 800a44e:	a201      	add	r2, pc, #4	; (adr r2, 800a454 <CDC_Control_FS+0x1c>)
 800a450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a454:	0800a4e5 	.word	0x0800a4e5
 800a458:	0800a4e5 	.word	0x0800a4e5
 800a45c:	0800a4e5 	.word	0x0800a4e5
 800a460:	0800a4e5 	.word	0x0800a4e5
 800a464:	0800a4e5 	.word	0x0800a4e5
 800a468:	0800a4e5 	.word	0x0800a4e5
 800a46c:	0800a4e5 	.word	0x0800a4e5
 800a470:	0800a4e5 	.word	0x0800a4e5
 800a474:	0800a4e5 	.word	0x0800a4e5
 800a478:	0800a4e5 	.word	0x0800a4e5
 800a47c:	0800a4e5 	.word	0x0800a4e5
 800a480:	0800a4e5 	.word	0x0800a4e5
 800a484:	0800a4e5 	.word	0x0800a4e5
 800a488:	0800a4e5 	.word	0x0800a4e5
 800a48c:	0800a4e5 	.word	0x0800a4e5
 800a490:	0800a4e5 	.word	0x0800a4e5
 800a494:	0800a4e5 	.word	0x0800a4e5
 800a498:	0800a4e5 	.word	0x0800a4e5
 800a49c:	0800a4e5 	.word	0x0800a4e5
 800a4a0:	0800a4e5 	.word	0x0800a4e5
 800a4a4:	0800a4e5 	.word	0x0800a4e5
 800a4a8:	0800a4e5 	.word	0x0800a4e5
 800a4ac:	0800a4e5 	.word	0x0800a4e5
 800a4b0:	0800a4e5 	.word	0x0800a4e5
 800a4b4:	0800a4e5 	.word	0x0800a4e5
 800a4b8:	0800a4e5 	.word	0x0800a4e5
 800a4bc:	0800a4e5 	.word	0x0800a4e5
 800a4c0:	0800a4e5 	.word	0x0800a4e5
 800a4c4:	0800a4e5 	.word	0x0800a4e5
 800a4c8:	0800a4e5 	.word	0x0800a4e5
 800a4cc:	0800a4e5 	.word	0x0800a4e5
 800a4d0:	0800a4e5 	.word	0x0800a4e5
 800a4d4:	0800a4e5 	.word	0x0800a4e5
 800a4d8:	0800a4e5 	.word	0x0800a4e5
 800a4dc:	0800a4e5 	.word	0x0800a4e5
 800a4e0:	0800a4e5 	.word	0x0800a4e5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a4e4:	bf00      	nop
  }

  return (USBD_OK);
 800a4e6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	370c      	adds	r7, #12
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f2:	4770      	bx	lr

0800a4f4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b084      	sub	sp, #16
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
 800a4fc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  //USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a4fe:	4839      	ldr	r0, [pc, #228]	; (800a5e4 <CDC_Receive_FS+0xf0>)
 800a500:	f7fc ff02 	bl	8007308 <USBD_CDC_ReceivePacket>

  struct usb_tmc_bulk_header *bhin = (struct usb_tmc_bulk_header *)Buf;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	60fb      	str	r3, [r7, #12]
  	switch (bhin->MsgID) {
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	781b      	ldrb	r3, [r3, #0]
 800a50c:	2b7f      	cmp	r3, #127	; 0x7f
 800a50e:	d05e      	beq.n	800a5ce <CDC_Receive_FS+0xda>
 800a510:	2b7f      	cmp	r3, #127	; 0x7f
 800a512:	dc60      	bgt.n	800a5d6 <CDC_Receive_FS+0xe2>
 800a514:	2b7e      	cmp	r3, #126	; 0x7e
 800a516:	d056      	beq.n	800a5c6 <CDC_Receive_FS+0xd2>
 800a518:	2b7e      	cmp	r3, #126	; 0x7e
 800a51a:	dc5c      	bgt.n	800a5d6 <CDC_Receive_FS+0xe2>
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	d002      	beq.n	800a526 <CDC_Receive_FS+0x32>
 800a520:	2b02      	cmp	r3, #2
 800a522:	d021      	beq.n	800a568 <CDC_Receive_FS+0x74>
 800a524:	e057      	b.n	800a5d6 <CDC_Receive_FS+0xe2>
  	case USB_TMC_MSGID_OUT_DEV_DEP_MSG_OUT:
  		printf("dev dep out btag: %d\n", bhin->bTag);
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	785b      	ldrb	r3, [r3, #1]
 800a52a:	4619      	mov	r1, r3
 800a52c:	482e      	ldr	r0, [pc, #184]	; (800a5e8 <CDC_Receive_FS+0xf4>)
 800a52e:	f000 fd0d 	bl	800af4c <iprintf>
  			printf("ignoring invalid: bTag != bTagInverse?!!");
  			return;
  		}
#endif
  		/* Could also assert that reserved is zero, but let's forgive things */
  		if (bhin->command_specific.dev_dep_msg_out.transferSize > 64) {
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	685b      	ldr	r3, [r3, #4]
 800a536:	2b40      	cmp	r3, #64	; 0x40
 800a538:	d903      	bls.n	800a542 <CDC_Receive_FS+0x4e>
  			printf("transfer > 1 packet! (UNHANDLED)\n");
 800a53a:	482c      	ldr	r0, [pc, #176]	; (800a5ec <CDC_Receive_FS+0xf8>)
 800a53c:	f000 fda2 	bl	800b084 <puts>
  			return;
 800a540:	e04b      	b.n	800a5da <CDC_Receive_FS+0xe6>
  		}
  		if (bhin->command_specific.dev_dep_msg_out.bmTransferAttributes & USB_TMC_BULK_HEADER_BMTRANSFER_ATTRIB_EOM) {
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	7a1b      	ldrb	r3, [r3, #8]
 800a546:	f003 0301 	and.w	r3, r3, #1
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d002      	beq.n	800a554 <CDC_Receive_FS+0x60>
  			/* exit state machine here */
  			printf("single frame packet :)\n");
 800a54e:	4828      	ldr	r0, [pc, #160]	; (800a5f0 <CDC_Receive_FS+0xfc>)
 800a550:	f000 fd98 	bl	800b084 <puts>
  		}
  		scpi_glue_input(&Buf[sizeof(struct usb_tmc_bulk_header)], bhin->command_specific.dev_dep_msg_out.transferSize, true);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f103 000c 	add.w	r0, r3, #12
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	685b      	ldr	r3, [r3, #4]
 800a55e:	b29b      	uxth	r3, r3
 800a560:	2201      	movs	r2, #1
 800a562:	4619      	mov	r1, r3
 800a564:	f7f7 f89a 	bl	800169c <scpi_glue_input>
  	case USB_TMC_MSGID_OUT_REQUEST_DEV_DEP_MSG_IN:
  		/* WILL need state machiens here too I guess :( */
  		if (bhin->command_specific.req_dev_dep_msg_in.bmTransferAttributes & USB_TMC_BULK_HEADER_BMTRANSFER_ATTRIB_TERMCHAR) {
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	7a1b      	ldrb	r3, [r3, #8]
 800a56c:	f003 0302 	and.w	r3, r3, #2
 800a570:	2b00      	cmp	r3, #0
 800a572:	d003      	beq.n	800a57c <CDC_Receive_FS+0x88>
  			printf("FAIL! requested term char!\n");
 800a574:	481f      	ldr	r0, [pc, #124]	; (800a5f4 <CDC_Receive_FS+0x100>)
 800a576:	f000 fd85 	bl	800b084 <puts>
  			return;  /* TODO reply error? */
 800a57a:	e02e      	b.n	800a5da <CDC_Receive_FS+0xe6>
  		}
  		bhin->MsgID = USB_TMC_MSGID_IN_DEV_DEP_MSG_IN;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	2202      	movs	r2, #2
 800a580:	701a      	strb	r2, [r3, #0]
  		bhin->command_specific.dev_dep_msg_in.transferSize = output_buffer_idx;
 800a582:	4b1d      	ldr	r3, [pc, #116]	; (800a5f8 <CDC_Receive_FS+0x104>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	461a      	mov	r2, r3
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	605a      	str	r2, [r3, #4]
  		/* only support short stuff now! */
  		bhin->command_specific.dev_dep_msg_in.bmTransferAttributes = USB_TMC_BULK_HEADER_BMTRANSFER_ATTRIB_EOM;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	2201      	movs	r2, #1
 800a590:	721a      	strb	r2, [r3, #8]
  		memcpy(&Buf[sizeof(struct usb_tmc_bulk_header) + 1], output_buffer, output_buffer_idx);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	330d      	adds	r3, #13
 800a596:	4a18      	ldr	r2, [pc, #96]	; (800a5f8 <CDC_Receive_FS+0x104>)
 800a598:	6812      	ldr	r2, [r2, #0]
 800a59a:	4918      	ldr	r1, [pc, #96]	; (800a5fc <CDC_Receive_FS+0x108>)
 800a59c:	4618      	mov	r0, r3
 800a59e:	f000 fca4 	bl	800aeea <memcpy>
  		Len = sizeof(struct usb_tmc_bulk_header) + output_buffer_idx;
 800a5a2:	4b15      	ldr	r3, [pc, #84]	; (800a5f8 <CDC_Receive_FS+0x104>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	330c      	adds	r3, #12
 800a5a8:	603b      	str	r3, [r7, #0]
  		USBD_CDC_SetTxBuffer(&hUsbDeviceFS, &Buf[sizeof(struct usb_tmc_bulk_header) + 1], Len);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	330d      	adds	r3, #13
 800a5ae:	683a      	ldr	r2, [r7, #0]
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	480c      	ldr	r0, [pc, #48]	; (800a5e4 <CDC_Receive_FS+0xf0>)
 800a5b4:	f7fc fe4b 	bl	800724e <USBD_CDC_SetTxBuffer>
  		USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a5b8:	480a      	ldr	r0, [pc, #40]	; (800a5e4 <CDC_Receive_FS+0xf0>)
 800a5ba:	f7fc fe75 	bl	80072a8 <USBD_CDC_TransmitPacket>
  		output_buffer_idx = 0;
 800a5be:	4b0e      	ldr	r3, [pc, #56]	; (800a5f8 <CDC_Receive_FS+0x104>)
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	601a      	str	r2, [r3, #0]
  		return;
 800a5c4:	e009      	b.n	800a5da <CDC_Receive_FS+0xe6>
  	case USB_TMC_MSGID_OUT_VENDOR_SPECIFIC_OUT:
  		printf("vendor_out (UNHANDLED)\n");
 800a5c6:	480e      	ldr	r0, [pc, #56]	; (800a600 <CDC_Receive_FS+0x10c>)
 800a5c8:	f000 fd5c 	bl	800b084 <puts>
  		return;
 800a5cc:	e005      	b.n	800a5da <CDC_Receive_FS+0xe6>
  	case USB_TMC_MSGID_OUT_REQUEST_VENDOR_SPECIFIC_IN:
  		printf("req_vendor_in (UNHANDLED)\n");
 800a5ce:	480d      	ldr	r0, [pc, #52]	; (800a604 <CDC_Receive_FS+0x110>)
 800a5d0:	f000 fd58 	bl	800b084 <puts>
  		return;
 800a5d4:	e001      	b.n	800a5da <CDC_Receive_FS+0xe6>
  	}
  return (USBD_OK);
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	e7ff      	b.n	800a5da <CDC_Receive_FS+0xe6>
  /* USER CODE END 6 */
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3710      	adds	r7, #16
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}
 800a5e2:	bf00      	nop
 800a5e4:	200012a0 	.word	0x200012a0
 800a5e8:	0800e8a4 	.word	0x0800e8a4
 800a5ec:	0800e8bc 	.word	0x0800e8bc
 800a5f0:	0800e8e0 	.word	0x0800e8e0
 800a5f4:	0800e8f8 	.word	0x0800e8f8
 800a5f8:	20000dd4 	.word	0x20000dd4
 800a5fc:	20001120 	.word	0x20001120
 800a600:	0800e914 	.word	0x0800e914
 800a604:	0800e92c 	.word	0x0800e92c

0800a608 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a608:	b480      	push	{r7}
 800a60a:	b087      	sub	sp, #28
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	60f8      	str	r0, [r7, #12]
 800a610:	60b9      	str	r1, [r7, #8]
 800a612:	4613      	mov	r3, r2
 800a614:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a616:	2300      	movs	r3, #0
 800a618:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a61a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a61e:	4618      	mov	r0, r3
 800a620:	371c      	adds	r7, #28
 800a622:	46bd      	mov	sp, r7
 800a624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a628:	4770      	bx	lr
	...

0800a62c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a62c:	b480      	push	{r7}
 800a62e:	b083      	sub	sp, #12
 800a630:	af00      	add	r7, sp, #0
 800a632:	4603      	mov	r3, r0
 800a634:	6039      	str	r1, [r7, #0]
 800a636:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	2212      	movs	r2, #18
 800a63c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a63e:	4b03      	ldr	r3, [pc, #12]	; (800a64c <USBD_FS_DeviceDescriptor+0x20>)
}
 800a640:	4618      	mov	r0, r3
 800a642:	370c      	adds	r7, #12
 800a644:	46bd      	mov	sp, r7
 800a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64a:	4770      	bx	lr
 800a64c:	20000a48 	.word	0x20000a48

0800a650 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a650:	b480      	push	{r7}
 800a652:	b083      	sub	sp, #12
 800a654:	af00      	add	r7, sp, #0
 800a656:	4603      	mov	r3, r0
 800a658:	6039      	str	r1, [r7, #0]
 800a65a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	2204      	movs	r2, #4
 800a660:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a662:	4b03      	ldr	r3, [pc, #12]	; (800a670 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a664:	4618      	mov	r0, r3
 800a666:	370c      	adds	r7, #12
 800a668:	46bd      	mov	sp, r7
 800a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66e:	4770      	bx	lr
 800a670:	20000a5c 	.word	0x20000a5c

0800a674 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b082      	sub	sp, #8
 800a678:	af00      	add	r7, sp, #0
 800a67a:	4603      	mov	r3, r0
 800a67c:	6039      	str	r1, [r7, #0]
 800a67e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a680:	79fb      	ldrb	r3, [r7, #7]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d105      	bne.n	800a692 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a686:	683a      	ldr	r2, [r7, #0]
 800a688:	4907      	ldr	r1, [pc, #28]	; (800a6a8 <USBD_FS_ProductStrDescriptor+0x34>)
 800a68a:	4808      	ldr	r0, [pc, #32]	; (800a6ac <USBD_FS_ProductStrDescriptor+0x38>)
 800a68c:	f7ff fda7 	bl	800a1de <USBD_GetString>
 800a690:	e004      	b.n	800a69c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a692:	683a      	ldr	r2, [r7, #0]
 800a694:	4904      	ldr	r1, [pc, #16]	; (800a6a8 <USBD_FS_ProductStrDescriptor+0x34>)
 800a696:	4805      	ldr	r0, [pc, #20]	; (800a6ac <USBD_FS_ProductStrDescriptor+0x38>)
 800a698:	f7ff fda1 	bl	800a1de <USBD_GetString>
  }
  return USBD_StrDesc;
 800a69c:	4b02      	ldr	r3, [pc, #8]	; (800a6a8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	3708      	adds	r7, #8
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}
 800a6a6:	bf00      	nop
 800a6a8:	20002570 	.word	0x20002570
 800a6ac:	0800e948 	.word	0x0800e948

0800a6b0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b082      	sub	sp, #8
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	6039      	str	r1, [r7, #0]
 800a6ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a6bc:	683a      	ldr	r2, [r7, #0]
 800a6be:	4904      	ldr	r1, [pc, #16]	; (800a6d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a6c0:	4804      	ldr	r0, [pc, #16]	; (800a6d4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a6c2:	f7ff fd8c 	bl	800a1de <USBD_GetString>
  return USBD_StrDesc;
 800a6c6:	4b02      	ldr	r3, [pc, #8]	; (800a6d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	3708      	adds	r7, #8
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}
 800a6d0:	20002570 	.word	0x20002570
 800a6d4:	0800e958 	.word	0x0800e958

0800a6d8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b082      	sub	sp, #8
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	4603      	mov	r3, r0
 800a6e0:	6039      	str	r1, [r7, #0]
 800a6e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	221a      	movs	r2, #26
 800a6e8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a6ea:	f000 f843 	bl	800a774 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a6ee:	4b02      	ldr	r3, [pc, #8]	; (800a6f8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3708      	adds	r7, #8
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}
 800a6f8:	20000a60 	.word	0x20000a60

0800a6fc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b082      	sub	sp, #8
 800a700:	af00      	add	r7, sp, #0
 800a702:	4603      	mov	r3, r0
 800a704:	6039      	str	r1, [r7, #0]
 800a706:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a708:	79fb      	ldrb	r3, [r7, #7]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d105      	bne.n	800a71a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a70e:	683a      	ldr	r2, [r7, #0]
 800a710:	4907      	ldr	r1, [pc, #28]	; (800a730 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a712:	4808      	ldr	r0, [pc, #32]	; (800a734 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a714:	f7ff fd63 	bl	800a1de <USBD_GetString>
 800a718:	e004      	b.n	800a724 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a71a:	683a      	ldr	r2, [r7, #0]
 800a71c:	4904      	ldr	r1, [pc, #16]	; (800a730 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a71e:	4805      	ldr	r0, [pc, #20]	; (800a734 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a720:	f7ff fd5d 	bl	800a1de <USBD_GetString>
  }
  return USBD_StrDesc;
 800a724:	4b02      	ldr	r3, [pc, #8]	; (800a730 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a726:	4618      	mov	r0, r3
 800a728:	3708      	adds	r7, #8
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}
 800a72e:	bf00      	nop
 800a730:	20002570 	.word	0x20002570
 800a734:	0800e96c 	.word	0x0800e96c

0800a738 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b082      	sub	sp, #8
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	4603      	mov	r3, r0
 800a740:	6039      	str	r1, [r7, #0]
 800a742:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a744:	79fb      	ldrb	r3, [r7, #7]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d105      	bne.n	800a756 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a74a:	683a      	ldr	r2, [r7, #0]
 800a74c:	4907      	ldr	r1, [pc, #28]	; (800a76c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a74e:	4808      	ldr	r0, [pc, #32]	; (800a770 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a750:	f7ff fd45 	bl	800a1de <USBD_GetString>
 800a754:	e004      	b.n	800a760 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a756:	683a      	ldr	r2, [r7, #0]
 800a758:	4904      	ldr	r1, [pc, #16]	; (800a76c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a75a:	4805      	ldr	r0, [pc, #20]	; (800a770 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a75c:	f7ff fd3f 	bl	800a1de <USBD_GetString>
  }
  return USBD_StrDesc;
 800a760:	4b02      	ldr	r3, [pc, #8]	; (800a76c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a762:	4618      	mov	r0, r3
 800a764:	3708      	adds	r7, #8
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}
 800a76a:	bf00      	nop
 800a76c:	20002570 	.word	0x20002570
 800a770:	0800e978 	.word	0x0800e978

0800a774 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b084      	sub	sp, #16
 800a778:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a77a:	4b0f      	ldr	r3, [pc, #60]	; (800a7b8 <Get_SerialNum+0x44>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a780:	4b0e      	ldr	r3, [pc, #56]	; (800a7bc <Get_SerialNum+0x48>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a786:	4b0e      	ldr	r3, [pc, #56]	; (800a7c0 <Get_SerialNum+0x4c>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a78c:	68fa      	ldr	r2, [r7, #12]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	4413      	add	r3, r2
 800a792:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d009      	beq.n	800a7ae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a79a:	2208      	movs	r2, #8
 800a79c:	4909      	ldr	r1, [pc, #36]	; (800a7c4 <Get_SerialNum+0x50>)
 800a79e:	68f8      	ldr	r0, [r7, #12]
 800a7a0:	f000 f814 	bl	800a7cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a7a4:	2204      	movs	r2, #4
 800a7a6:	4908      	ldr	r1, [pc, #32]	; (800a7c8 <Get_SerialNum+0x54>)
 800a7a8:	68b8      	ldr	r0, [r7, #8]
 800a7aa:	f000 f80f 	bl	800a7cc <IntToUnicode>
  }
}
 800a7ae:	bf00      	nop
 800a7b0:	3710      	adds	r7, #16
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}
 800a7b6:	bf00      	nop
 800a7b8:	1fff7a10 	.word	0x1fff7a10
 800a7bc:	1fff7a14 	.word	0x1fff7a14
 800a7c0:	1fff7a18 	.word	0x1fff7a18
 800a7c4:	20000a62 	.word	0x20000a62
 800a7c8:	20000a72 	.word	0x20000a72

0800a7cc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b087      	sub	sp, #28
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	60f8      	str	r0, [r7, #12]
 800a7d4:	60b9      	str	r1, [r7, #8]
 800a7d6:	4613      	mov	r3, r2
 800a7d8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a7de:	2300      	movs	r3, #0
 800a7e0:	75fb      	strb	r3, [r7, #23]
 800a7e2:	e027      	b.n	800a834 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	0f1b      	lsrs	r3, r3, #28
 800a7e8:	2b09      	cmp	r3, #9
 800a7ea:	d80b      	bhi.n	800a804 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	0f1b      	lsrs	r3, r3, #28
 800a7f0:	b2da      	uxtb	r2, r3
 800a7f2:	7dfb      	ldrb	r3, [r7, #23]
 800a7f4:	005b      	lsls	r3, r3, #1
 800a7f6:	4619      	mov	r1, r3
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	440b      	add	r3, r1
 800a7fc:	3230      	adds	r2, #48	; 0x30
 800a7fe:	b2d2      	uxtb	r2, r2
 800a800:	701a      	strb	r2, [r3, #0]
 800a802:	e00a      	b.n	800a81a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	0f1b      	lsrs	r3, r3, #28
 800a808:	b2da      	uxtb	r2, r3
 800a80a:	7dfb      	ldrb	r3, [r7, #23]
 800a80c:	005b      	lsls	r3, r3, #1
 800a80e:	4619      	mov	r1, r3
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	440b      	add	r3, r1
 800a814:	3237      	adds	r2, #55	; 0x37
 800a816:	b2d2      	uxtb	r2, r2
 800a818:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	011b      	lsls	r3, r3, #4
 800a81e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a820:	7dfb      	ldrb	r3, [r7, #23]
 800a822:	005b      	lsls	r3, r3, #1
 800a824:	3301      	adds	r3, #1
 800a826:	68ba      	ldr	r2, [r7, #8]
 800a828:	4413      	add	r3, r2
 800a82a:	2200      	movs	r2, #0
 800a82c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a82e:	7dfb      	ldrb	r3, [r7, #23]
 800a830:	3301      	adds	r3, #1
 800a832:	75fb      	strb	r3, [r7, #23]
 800a834:	7dfa      	ldrb	r2, [r7, #23]
 800a836:	79fb      	ldrb	r3, [r7, #7]
 800a838:	429a      	cmp	r2, r3
 800a83a:	d3d3      	bcc.n	800a7e4 <IntToUnicode+0x18>
  }
}
 800a83c:	bf00      	nop
 800a83e:	bf00      	nop
 800a840:	371c      	adds	r7, #28
 800a842:	46bd      	mov	sp, r7
 800a844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a848:	4770      	bx	lr
	...

0800a84c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b08a      	sub	sp, #40	; 0x28
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a854:	f107 0314 	add.w	r3, r7, #20
 800a858:	2200      	movs	r2, #0
 800a85a:	601a      	str	r2, [r3, #0]
 800a85c:	605a      	str	r2, [r3, #4]
 800a85e:	609a      	str	r2, [r3, #8]
 800a860:	60da      	str	r2, [r3, #12]
 800a862:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a86c:	d147      	bne.n	800a8fe <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a86e:	2300      	movs	r3, #0
 800a870:	613b      	str	r3, [r7, #16]
 800a872:	4b25      	ldr	r3, [pc, #148]	; (800a908 <HAL_PCD_MspInit+0xbc>)
 800a874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a876:	4a24      	ldr	r2, [pc, #144]	; (800a908 <HAL_PCD_MspInit+0xbc>)
 800a878:	f043 0301 	orr.w	r3, r3, #1
 800a87c:	6313      	str	r3, [r2, #48]	; 0x30
 800a87e:	4b22      	ldr	r3, [pc, #136]	; (800a908 <HAL_PCD_MspInit+0xbc>)
 800a880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a882:	f003 0301 	and.w	r3, r3, #1
 800a886:	613b      	str	r3, [r7, #16]
 800a888:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a88a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a88e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a890:	2300      	movs	r3, #0
 800a892:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a894:	2300      	movs	r3, #0
 800a896:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a898:	f107 0314 	add.w	r3, r7, #20
 800a89c:	4619      	mov	r1, r3
 800a89e:	481b      	ldr	r0, [pc, #108]	; (800a90c <HAL_PCD_MspInit+0xc0>)
 800a8a0:	f7f7 ffbe 	bl	8002820 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a8a4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800a8a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a8aa:	2302      	movs	r3, #2
 800a8ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a8b6:	230a      	movs	r3, #10
 800a8b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a8ba:	f107 0314 	add.w	r3, r7, #20
 800a8be:	4619      	mov	r1, r3
 800a8c0:	4812      	ldr	r0, [pc, #72]	; (800a90c <HAL_PCD_MspInit+0xc0>)
 800a8c2:	f7f7 ffad 	bl	8002820 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a8c6:	4b10      	ldr	r3, [pc, #64]	; (800a908 <HAL_PCD_MspInit+0xbc>)
 800a8c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8ca:	4a0f      	ldr	r2, [pc, #60]	; (800a908 <HAL_PCD_MspInit+0xbc>)
 800a8cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8d0:	6353      	str	r3, [r2, #52]	; 0x34
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	60fb      	str	r3, [r7, #12]
 800a8d6:	4b0c      	ldr	r3, [pc, #48]	; (800a908 <HAL_PCD_MspInit+0xbc>)
 800a8d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8da:	4a0b      	ldr	r2, [pc, #44]	; (800a908 <HAL_PCD_MspInit+0xbc>)
 800a8dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a8e0:	6453      	str	r3, [r2, #68]	; 0x44
 800a8e2:	4b09      	ldr	r3, [pc, #36]	; (800a908 <HAL_PCD_MspInit+0xbc>)
 800a8e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a8ea:	60fb      	str	r3, [r7, #12]
 800a8ec:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	2100      	movs	r1, #0
 800a8f2:	2043      	movs	r0, #67	; 0x43
 800a8f4:	f7f7 ff5d 	bl	80027b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a8f8:	2043      	movs	r0, #67	; 0x43
 800a8fa:	f7f7 ff76 	bl	80027ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a8fe:	bf00      	nop
 800a900:	3728      	adds	r7, #40	; 0x28
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}
 800a906:	bf00      	nop
 800a908:	40023800 	.word	0x40023800
 800a90c:	40020000 	.word	0x40020000

0800a910 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b082      	sub	sp, #8
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a924:	4619      	mov	r1, r3
 800a926:	4610      	mov	r0, r2
 800a928:	f7fe fc72 	bl	8009210 <USBD_LL_SetupStage>
}
 800a92c:	bf00      	nop
 800a92e:	3708      	adds	r7, #8
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}

0800a934 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b082      	sub	sp, #8
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	460b      	mov	r3, r1
 800a93e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a946:	78fa      	ldrb	r2, [r7, #3]
 800a948:	6879      	ldr	r1, [r7, #4]
 800a94a:	4613      	mov	r3, r2
 800a94c:	00db      	lsls	r3, r3, #3
 800a94e:	1a9b      	subs	r3, r3, r2
 800a950:	009b      	lsls	r3, r3, #2
 800a952:	440b      	add	r3, r1
 800a954:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a958:	681a      	ldr	r2, [r3, #0]
 800a95a:	78fb      	ldrb	r3, [r7, #3]
 800a95c:	4619      	mov	r1, r3
 800a95e:	f7fe fcac 	bl	80092ba <USBD_LL_DataOutStage>
}
 800a962:	bf00      	nop
 800a964:	3708      	adds	r7, #8
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}

0800a96a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a96a:	b580      	push	{r7, lr}
 800a96c:	b082      	sub	sp, #8
 800a96e:	af00      	add	r7, sp, #0
 800a970:	6078      	str	r0, [r7, #4]
 800a972:	460b      	mov	r3, r1
 800a974:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a97c:	78fa      	ldrb	r2, [r7, #3]
 800a97e:	6879      	ldr	r1, [r7, #4]
 800a980:	4613      	mov	r3, r2
 800a982:	00db      	lsls	r3, r3, #3
 800a984:	1a9b      	subs	r3, r3, r2
 800a986:	009b      	lsls	r3, r3, #2
 800a988:	440b      	add	r3, r1
 800a98a:	3348      	adds	r3, #72	; 0x48
 800a98c:	681a      	ldr	r2, [r3, #0]
 800a98e:	78fb      	ldrb	r3, [r7, #3]
 800a990:	4619      	mov	r1, r3
 800a992:	f7fe fcf5 	bl	8009380 <USBD_LL_DataInStage>
}
 800a996:	bf00      	nop
 800a998:	3708      	adds	r7, #8
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}

0800a99e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a99e:	b580      	push	{r7, lr}
 800a9a0:	b082      	sub	sp, #8
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f7fe fe09 	bl	80095c4 <USBD_LL_SOF>
}
 800a9b2:	bf00      	nop
 800a9b4:	3708      	adds	r7, #8
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}

0800a9ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9ba:	b580      	push	{r7, lr}
 800a9bc:	b084      	sub	sp, #16
 800a9be:	af00      	add	r7, sp, #0
 800a9c0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	68db      	ldr	r3, [r3, #12]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d102      	bne.n	800a9d4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	73fb      	strb	r3, [r7, #15]
 800a9d2:	e008      	b.n	800a9e6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	68db      	ldr	r3, [r3, #12]
 800a9d8:	2b02      	cmp	r3, #2
 800a9da:	d102      	bne.n	800a9e2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a9dc:	2301      	movs	r3, #1
 800a9de:	73fb      	strb	r3, [r7, #15]
 800a9e0:	e001      	b.n	800a9e6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a9e2:	f7f7 facd 	bl	8001f80 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a9ec:	7bfa      	ldrb	r2, [r7, #15]
 800a9ee:	4611      	mov	r1, r2
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	f7fe fda9 	bl	8009548 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f7fe fd55 	bl	80094ac <USBD_LL_Reset>
}
 800aa02:	bf00      	nop
 800aa04:	3710      	adds	r7, #16
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}
	...

0800aa0c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b082      	sub	sp, #8
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f7fe fda4 	bl	8009568 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	687a      	ldr	r2, [r7, #4]
 800aa2c:	6812      	ldr	r2, [r2, #0]
 800aa2e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800aa32:	f043 0301 	orr.w	r3, r3, #1
 800aa36:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6a1b      	ldr	r3, [r3, #32]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d005      	beq.n	800aa4c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aa40:	4b04      	ldr	r3, [pc, #16]	; (800aa54 <HAL_PCD_SuspendCallback+0x48>)
 800aa42:	691b      	ldr	r3, [r3, #16]
 800aa44:	4a03      	ldr	r2, [pc, #12]	; (800aa54 <HAL_PCD_SuspendCallback+0x48>)
 800aa46:	f043 0306 	orr.w	r3, r3, #6
 800aa4a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800aa4c:	bf00      	nop
 800aa4e:	3708      	adds	r7, #8
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}
 800aa54:	e000ed00 	.word	0xe000ed00

0800aa58 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b082      	sub	sp, #8
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aa66:	4618      	mov	r0, r3
 800aa68:	f7fe fd94 	bl	8009594 <USBD_LL_Resume>
}
 800aa6c:	bf00      	nop
 800aa6e:	3708      	adds	r7, #8
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}

0800aa74 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b082      	sub	sp, #8
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
 800aa7c:	460b      	mov	r3, r1
 800aa7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aa86:	78fa      	ldrb	r2, [r7, #3]
 800aa88:	4611      	mov	r1, r2
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f7fe fde2 	bl	8009654 <USBD_LL_IsoOUTIncomplete>
}
 800aa90:	bf00      	nop
 800aa92:	3708      	adds	r7, #8
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}

0800aa98 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b082      	sub	sp, #8
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
 800aaa0:	460b      	mov	r3, r1
 800aaa2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aaaa:	78fa      	ldrb	r2, [r7, #3]
 800aaac:	4611      	mov	r1, r2
 800aaae:	4618      	mov	r0, r3
 800aab0:	f7fe fdaa 	bl	8009608 <USBD_LL_IsoINIncomplete>
}
 800aab4:	bf00      	nop
 800aab6:	3708      	adds	r7, #8
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}

0800aabc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b082      	sub	sp, #8
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aaca:	4618      	mov	r0, r3
 800aacc:	f7fe fde8 	bl	80096a0 <USBD_LL_DevConnected>
}
 800aad0:	bf00      	nop
 800aad2:	3708      	adds	r7, #8
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}

0800aad8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b082      	sub	sp, #8
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aae6:	4618      	mov	r0, r3
 800aae8:	f7fe fde5 	bl	80096b6 <USBD_LL_DevDisconnected>
}
 800aaec:	bf00      	nop
 800aaee:	3708      	adds	r7, #8
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd80      	pop	{r7, pc}

0800aaf4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b082      	sub	sp, #8
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	781b      	ldrb	r3, [r3, #0]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d13c      	bne.n	800ab7e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ab04:	4a20      	ldr	r2, [pc, #128]	; (800ab88 <USBD_LL_Init+0x94>)
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	4a1e      	ldr	r2, [pc, #120]	; (800ab88 <USBD_LL_Init+0x94>)
 800ab10:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ab14:	4b1c      	ldr	r3, [pc, #112]	; (800ab88 <USBD_LL_Init+0x94>)
 800ab16:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ab1a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ab1c:	4b1a      	ldr	r3, [pc, #104]	; (800ab88 <USBD_LL_Init+0x94>)
 800ab1e:	2204      	movs	r2, #4
 800ab20:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ab22:	4b19      	ldr	r3, [pc, #100]	; (800ab88 <USBD_LL_Init+0x94>)
 800ab24:	2202      	movs	r2, #2
 800ab26:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ab28:	4b17      	ldr	r3, [pc, #92]	; (800ab88 <USBD_LL_Init+0x94>)
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ab2e:	4b16      	ldr	r3, [pc, #88]	; (800ab88 <USBD_LL_Init+0x94>)
 800ab30:	2202      	movs	r2, #2
 800ab32:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ab34:	4b14      	ldr	r3, [pc, #80]	; (800ab88 <USBD_LL_Init+0x94>)
 800ab36:	2200      	movs	r2, #0
 800ab38:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ab3a:	4b13      	ldr	r3, [pc, #76]	; (800ab88 <USBD_LL_Init+0x94>)
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ab40:	4b11      	ldr	r3, [pc, #68]	; (800ab88 <USBD_LL_Init+0x94>)
 800ab42:	2200      	movs	r2, #0
 800ab44:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800ab46:	4b10      	ldr	r3, [pc, #64]	; (800ab88 <USBD_LL_Init+0x94>)
 800ab48:	2201      	movs	r2, #1
 800ab4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ab4c:	4b0e      	ldr	r3, [pc, #56]	; (800ab88 <USBD_LL_Init+0x94>)
 800ab4e:	2200      	movs	r2, #0
 800ab50:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ab52:	480d      	ldr	r0, [pc, #52]	; (800ab88 <USBD_LL_Init+0x94>)
 800ab54:	f7f8 fdfe 	bl	8003754 <HAL_PCD_Init>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d001      	beq.n	800ab62 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ab5e:	f7f7 fa0f 	bl	8001f80 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ab62:	2180      	movs	r1, #128	; 0x80
 800ab64:	4808      	ldr	r0, [pc, #32]	; (800ab88 <USBD_LL_Init+0x94>)
 800ab66:	f7f9 ff5c 	bl	8004a22 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ab6a:	2240      	movs	r2, #64	; 0x40
 800ab6c:	2100      	movs	r1, #0
 800ab6e:	4806      	ldr	r0, [pc, #24]	; (800ab88 <USBD_LL_Init+0x94>)
 800ab70:	f7f9 ff10 	bl	8004994 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ab74:	2280      	movs	r2, #128	; 0x80
 800ab76:	2101      	movs	r1, #1
 800ab78:	4803      	ldr	r0, [pc, #12]	; (800ab88 <USBD_LL_Init+0x94>)
 800ab7a:	f7f9 ff0b 	bl	8004994 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ab7e:	2300      	movs	r3, #0
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	3708      	adds	r7, #8
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}
 800ab88:	20002770 	.word	0x20002770

0800ab8c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b084      	sub	sp, #16
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab94:	2300      	movs	r3, #0
 800ab96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800aba2:	4618      	mov	r0, r3
 800aba4:	f7f8 fef3 	bl	800398e <HAL_PCD_Start>
 800aba8:	4603      	mov	r3, r0
 800abaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abac:	7bfb      	ldrb	r3, [r7, #15]
 800abae:	4618      	mov	r0, r3
 800abb0:	f000 f942 	bl	800ae38 <USBD_Get_USB_Status>
 800abb4:	4603      	mov	r3, r0
 800abb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abb8:	7bbb      	ldrb	r3, [r7, #14]
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3710      	adds	r7, #16
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}

0800abc2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800abc2:	b580      	push	{r7, lr}
 800abc4:	b084      	sub	sp, #16
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	6078      	str	r0, [r7, #4]
 800abca:	4608      	mov	r0, r1
 800abcc:	4611      	mov	r1, r2
 800abce:	461a      	mov	r2, r3
 800abd0:	4603      	mov	r3, r0
 800abd2:	70fb      	strb	r3, [r7, #3]
 800abd4:	460b      	mov	r3, r1
 800abd6:	70bb      	strb	r3, [r7, #2]
 800abd8:	4613      	mov	r3, r2
 800abda:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abdc:	2300      	movs	r3, #0
 800abde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abe0:	2300      	movs	r3, #0
 800abe2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800abea:	78bb      	ldrb	r3, [r7, #2]
 800abec:	883a      	ldrh	r2, [r7, #0]
 800abee:	78f9      	ldrb	r1, [r7, #3]
 800abf0:	f7f9 fad7 	bl	80041a2 <HAL_PCD_EP_Open>
 800abf4:	4603      	mov	r3, r0
 800abf6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abf8:	7bfb      	ldrb	r3, [r7, #15]
 800abfa:	4618      	mov	r0, r3
 800abfc:	f000 f91c 	bl	800ae38 <USBD_Get_USB_Status>
 800ac00:	4603      	mov	r3, r0
 800ac02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac04:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3710      	adds	r7, #16
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}

0800ac0e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac0e:	b580      	push	{r7, lr}
 800ac10:	b084      	sub	sp, #16
 800ac12:	af00      	add	r7, sp, #0
 800ac14:	6078      	str	r0, [r7, #4]
 800ac16:	460b      	mov	r3, r1
 800ac18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ac28:	78fa      	ldrb	r2, [r7, #3]
 800ac2a:	4611      	mov	r1, r2
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f7f9 fb20 	bl	8004272 <HAL_PCD_EP_Close>
 800ac32:	4603      	mov	r3, r0
 800ac34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac36:	7bfb      	ldrb	r3, [r7, #15]
 800ac38:	4618      	mov	r0, r3
 800ac3a:	f000 f8fd 	bl	800ae38 <USBD_Get_USB_Status>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac42:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac44:	4618      	mov	r0, r3
 800ac46:	3710      	adds	r7, #16
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}

0800ac4c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b084      	sub	sp, #16
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
 800ac54:	460b      	mov	r3, r1
 800ac56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac58:	2300      	movs	r3, #0
 800ac5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ac66:	78fa      	ldrb	r2, [r7, #3]
 800ac68:	4611      	mov	r1, r2
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f7f9 fbf8 	bl	8004460 <HAL_PCD_EP_SetStall>
 800ac70:	4603      	mov	r3, r0
 800ac72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac74:	7bfb      	ldrb	r3, [r7, #15]
 800ac76:	4618      	mov	r0, r3
 800ac78:	f000 f8de 	bl	800ae38 <USBD_Get_USB_Status>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac80:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3710      	adds	r7, #16
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}

0800ac8a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac8a:	b580      	push	{r7, lr}
 800ac8c:	b084      	sub	sp, #16
 800ac8e:	af00      	add	r7, sp, #0
 800ac90:	6078      	str	r0, [r7, #4]
 800ac92:	460b      	mov	r3, r1
 800ac94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac96:	2300      	movs	r3, #0
 800ac98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800aca4:	78fa      	ldrb	r2, [r7, #3]
 800aca6:	4611      	mov	r1, r2
 800aca8:	4618      	mov	r0, r3
 800acaa:	f7f9 fc3d 	bl	8004528 <HAL_PCD_EP_ClrStall>
 800acae:	4603      	mov	r3, r0
 800acb0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acb2:	7bfb      	ldrb	r3, [r7, #15]
 800acb4:	4618      	mov	r0, r3
 800acb6:	f000 f8bf 	bl	800ae38 <USBD_Get_USB_Status>
 800acba:	4603      	mov	r3, r0
 800acbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acbe:	7bbb      	ldrb	r3, [r7, #14]
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	3710      	adds	r7, #16
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}

0800acc8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800acc8:	b480      	push	{r7}
 800acca:	b085      	sub	sp, #20
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
 800acd0:	460b      	mov	r3, r1
 800acd2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800acda:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800acdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	da0b      	bge.n	800acfc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ace4:	78fb      	ldrb	r3, [r7, #3]
 800ace6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800acea:	68f9      	ldr	r1, [r7, #12]
 800acec:	4613      	mov	r3, r2
 800acee:	00db      	lsls	r3, r3, #3
 800acf0:	1a9b      	subs	r3, r3, r2
 800acf2:	009b      	lsls	r3, r3, #2
 800acf4:	440b      	add	r3, r1
 800acf6:	333e      	adds	r3, #62	; 0x3e
 800acf8:	781b      	ldrb	r3, [r3, #0]
 800acfa:	e00b      	b.n	800ad14 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800acfc:	78fb      	ldrb	r3, [r7, #3]
 800acfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad02:	68f9      	ldr	r1, [r7, #12]
 800ad04:	4613      	mov	r3, r2
 800ad06:	00db      	lsls	r3, r3, #3
 800ad08:	1a9b      	subs	r3, r3, r2
 800ad0a:	009b      	lsls	r3, r3, #2
 800ad0c:	440b      	add	r3, r1
 800ad0e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ad12:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ad14:	4618      	mov	r0, r3
 800ad16:	3714      	adds	r7, #20
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1e:	4770      	bx	lr

0800ad20 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b084      	sub	sp, #16
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
 800ad28:	460b      	mov	r3, r1
 800ad2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad30:	2300      	movs	r3, #0
 800ad32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ad3a:	78fa      	ldrb	r2, [r7, #3]
 800ad3c:	4611      	mov	r1, r2
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f7f9 fa0a 	bl	8004158 <HAL_PCD_SetAddress>
 800ad44:	4603      	mov	r3, r0
 800ad46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad48:	7bfb      	ldrb	r3, [r7, #15]
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f000 f874 	bl	800ae38 <USBD_Get_USB_Status>
 800ad50:	4603      	mov	r3, r0
 800ad52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad54:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	3710      	adds	r7, #16
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}

0800ad5e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ad5e:	b580      	push	{r7, lr}
 800ad60:	b086      	sub	sp, #24
 800ad62:	af00      	add	r7, sp, #0
 800ad64:	60f8      	str	r0, [r7, #12]
 800ad66:	607a      	str	r2, [r7, #4]
 800ad68:	603b      	str	r3, [r7, #0]
 800ad6a:	460b      	mov	r3, r1
 800ad6c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad72:	2300      	movs	r3, #0
 800ad74:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ad7c:	7af9      	ldrb	r1, [r7, #11]
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	687a      	ldr	r2, [r7, #4]
 800ad82:	f7f9 fb23 	bl	80043cc <HAL_PCD_EP_Transmit>
 800ad86:	4603      	mov	r3, r0
 800ad88:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad8a:	7dfb      	ldrb	r3, [r7, #23]
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f000 f853 	bl	800ae38 <USBD_Get_USB_Status>
 800ad92:	4603      	mov	r3, r0
 800ad94:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ad96:	7dbb      	ldrb	r3, [r7, #22]
}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	3718      	adds	r7, #24
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bd80      	pop	{r7, pc}

0800ada0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b086      	sub	sp, #24
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	60f8      	str	r0, [r7, #12]
 800ada8:	607a      	str	r2, [r7, #4]
 800adaa:	603b      	str	r3, [r7, #0]
 800adac:	460b      	mov	r3, r1
 800adae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adb0:	2300      	movs	r3, #0
 800adb2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adb4:	2300      	movs	r3, #0
 800adb6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800adbe:	7af9      	ldrb	r1, [r7, #11]
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	687a      	ldr	r2, [r7, #4]
 800adc4:	f7f9 fa9f 	bl	8004306 <HAL_PCD_EP_Receive>
 800adc8:	4603      	mov	r3, r0
 800adca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adcc:	7dfb      	ldrb	r3, [r7, #23]
 800adce:	4618      	mov	r0, r3
 800add0:	f000 f832 	bl	800ae38 <USBD_Get_USB_Status>
 800add4:	4603      	mov	r3, r0
 800add6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800add8:	7dbb      	ldrb	r3, [r7, #22]
}
 800adda:	4618      	mov	r0, r3
 800addc:	3718      	adds	r7, #24
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}

0800ade2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ade2:	b580      	push	{r7, lr}
 800ade4:	b082      	sub	sp, #8
 800ade6:	af00      	add	r7, sp, #0
 800ade8:	6078      	str	r0, [r7, #4]
 800adea:	460b      	mov	r3, r1
 800adec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800adf4:	78fa      	ldrb	r2, [r7, #3]
 800adf6:	4611      	mov	r1, r2
 800adf8:	4618      	mov	r0, r3
 800adfa:	f7f9 facf 	bl	800439c <HAL_PCD_EP_GetRxCount>
 800adfe:	4603      	mov	r3, r0
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	3708      	adds	r7, #8
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}

0800ae08 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b083      	sub	sp, #12
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ae10:	4b03      	ldr	r3, [pc, #12]	; (800ae20 <USBD_static_malloc+0x18>)
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	370c      	adds	r7, #12
 800ae16:	46bd      	mov	sp, r7
 800ae18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1c:	4770      	bx	lr
 800ae1e:	bf00      	nop
 800ae20:	20000e00 	.word	0x20000e00

0800ae24 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ae24:	b480      	push	{r7}
 800ae26:	b083      	sub	sp, #12
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]

}
 800ae2c:	bf00      	nop
 800ae2e:	370c      	adds	r7, #12
 800ae30:	46bd      	mov	sp, r7
 800ae32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae36:	4770      	bx	lr

0800ae38 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ae38:	b480      	push	{r7}
 800ae3a:	b085      	sub	sp, #20
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	4603      	mov	r3, r0
 800ae40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae42:	2300      	movs	r3, #0
 800ae44:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ae46:	79fb      	ldrb	r3, [r7, #7]
 800ae48:	2b03      	cmp	r3, #3
 800ae4a:	d817      	bhi.n	800ae7c <USBD_Get_USB_Status+0x44>
 800ae4c:	a201      	add	r2, pc, #4	; (adr r2, 800ae54 <USBD_Get_USB_Status+0x1c>)
 800ae4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae52:	bf00      	nop
 800ae54:	0800ae65 	.word	0x0800ae65
 800ae58:	0800ae6b 	.word	0x0800ae6b
 800ae5c:	0800ae71 	.word	0x0800ae71
 800ae60:	0800ae77 	.word	0x0800ae77
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ae64:	2300      	movs	r3, #0
 800ae66:	73fb      	strb	r3, [r7, #15]
    break;
 800ae68:	e00b      	b.n	800ae82 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ae6a:	2303      	movs	r3, #3
 800ae6c:	73fb      	strb	r3, [r7, #15]
    break;
 800ae6e:	e008      	b.n	800ae82 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ae70:	2301      	movs	r3, #1
 800ae72:	73fb      	strb	r3, [r7, #15]
    break;
 800ae74:	e005      	b.n	800ae82 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ae76:	2303      	movs	r3, #3
 800ae78:	73fb      	strb	r3, [r7, #15]
    break;
 800ae7a:	e002      	b.n	800ae82 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ae7c:	2303      	movs	r3, #3
 800ae7e:	73fb      	strb	r3, [r7, #15]
    break;
 800ae80:	bf00      	nop
  }
  return usb_status;
 800ae82:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	3714      	adds	r7, #20
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8e:	4770      	bx	lr

0800ae90 <__errno>:
 800ae90:	4b01      	ldr	r3, [pc, #4]	; (800ae98 <__errno+0x8>)
 800ae92:	6818      	ldr	r0, [r3, #0]
 800ae94:	4770      	bx	lr
 800ae96:	bf00      	nop
 800ae98:	20000a7c 	.word	0x20000a7c

0800ae9c <__libc_init_array>:
 800ae9c:	b570      	push	{r4, r5, r6, lr}
 800ae9e:	4d0d      	ldr	r5, [pc, #52]	; (800aed4 <__libc_init_array+0x38>)
 800aea0:	4c0d      	ldr	r4, [pc, #52]	; (800aed8 <__libc_init_array+0x3c>)
 800aea2:	1b64      	subs	r4, r4, r5
 800aea4:	10a4      	asrs	r4, r4, #2
 800aea6:	2600      	movs	r6, #0
 800aea8:	42a6      	cmp	r6, r4
 800aeaa:	d109      	bne.n	800aec0 <__libc_init_array+0x24>
 800aeac:	4d0b      	ldr	r5, [pc, #44]	; (800aedc <__libc_init_array+0x40>)
 800aeae:	4c0c      	ldr	r4, [pc, #48]	; (800aee0 <__libc_init_array+0x44>)
 800aeb0:	f003 fae2 	bl	800e478 <_init>
 800aeb4:	1b64      	subs	r4, r4, r5
 800aeb6:	10a4      	asrs	r4, r4, #2
 800aeb8:	2600      	movs	r6, #0
 800aeba:	42a6      	cmp	r6, r4
 800aebc:	d105      	bne.n	800aeca <__libc_init_array+0x2e>
 800aebe:	bd70      	pop	{r4, r5, r6, pc}
 800aec0:	f855 3b04 	ldr.w	r3, [r5], #4
 800aec4:	4798      	blx	r3
 800aec6:	3601      	adds	r6, #1
 800aec8:	e7ee      	b.n	800aea8 <__libc_init_array+0xc>
 800aeca:	f855 3b04 	ldr.w	r3, [r5], #4
 800aece:	4798      	blx	r3
 800aed0:	3601      	adds	r6, #1
 800aed2:	e7f2      	b.n	800aeba <__libc_init_array+0x1e>
 800aed4:	0800f04c 	.word	0x0800f04c
 800aed8:	0800f04c 	.word	0x0800f04c
 800aedc:	0800f04c 	.word	0x0800f04c
 800aee0:	0800f050 	.word	0x0800f050

0800aee4 <__retarget_lock_init_recursive>:
 800aee4:	4770      	bx	lr

0800aee6 <__retarget_lock_acquire_recursive>:
 800aee6:	4770      	bx	lr

0800aee8 <__retarget_lock_release_recursive>:
 800aee8:	4770      	bx	lr

0800aeea <memcpy>:
 800aeea:	440a      	add	r2, r1
 800aeec:	4291      	cmp	r1, r2
 800aeee:	f100 33ff 	add.w	r3, r0, #4294967295
 800aef2:	d100      	bne.n	800aef6 <memcpy+0xc>
 800aef4:	4770      	bx	lr
 800aef6:	b510      	push	{r4, lr}
 800aef8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aefc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af00:	4291      	cmp	r1, r2
 800af02:	d1f9      	bne.n	800aef8 <memcpy+0xe>
 800af04:	bd10      	pop	{r4, pc}

0800af06 <memmove>:
 800af06:	4288      	cmp	r0, r1
 800af08:	b510      	push	{r4, lr}
 800af0a:	eb01 0402 	add.w	r4, r1, r2
 800af0e:	d902      	bls.n	800af16 <memmove+0x10>
 800af10:	4284      	cmp	r4, r0
 800af12:	4623      	mov	r3, r4
 800af14:	d807      	bhi.n	800af26 <memmove+0x20>
 800af16:	1e43      	subs	r3, r0, #1
 800af18:	42a1      	cmp	r1, r4
 800af1a:	d008      	beq.n	800af2e <memmove+0x28>
 800af1c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af20:	f803 2f01 	strb.w	r2, [r3, #1]!
 800af24:	e7f8      	b.n	800af18 <memmove+0x12>
 800af26:	4402      	add	r2, r0
 800af28:	4601      	mov	r1, r0
 800af2a:	428a      	cmp	r2, r1
 800af2c:	d100      	bne.n	800af30 <memmove+0x2a>
 800af2e:	bd10      	pop	{r4, pc}
 800af30:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800af34:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800af38:	e7f7      	b.n	800af2a <memmove+0x24>

0800af3a <memset>:
 800af3a:	4402      	add	r2, r0
 800af3c:	4603      	mov	r3, r0
 800af3e:	4293      	cmp	r3, r2
 800af40:	d100      	bne.n	800af44 <memset+0xa>
 800af42:	4770      	bx	lr
 800af44:	f803 1b01 	strb.w	r1, [r3], #1
 800af48:	e7f9      	b.n	800af3e <memset+0x4>
	...

0800af4c <iprintf>:
 800af4c:	b40f      	push	{r0, r1, r2, r3}
 800af4e:	4b0a      	ldr	r3, [pc, #40]	; (800af78 <iprintf+0x2c>)
 800af50:	b513      	push	{r0, r1, r4, lr}
 800af52:	681c      	ldr	r4, [r3, #0]
 800af54:	b124      	cbz	r4, 800af60 <iprintf+0x14>
 800af56:	69a3      	ldr	r3, [r4, #24]
 800af58:	b913      	cbnz	r3, 800af60 <iprintf+0x14>
 800af5a:	4620      	mov	r0, r4
 800af5c:	f001 f9de 	bl	800c31c <__sinit>
 800af60:	ab05      	add	r3, sp, #20
 800af62:	9a04      	ldr	r2, [sp, #16]
 800af64:	68a1      	ldr	r1, [r4, #8]
 800af66:	9301      	str	r3, [sp, #4]
 800af68:	4620      	mov	r0, r4
 800af6a:	f002 fd53 	bl	800da14 <_vfiprintf_r>
 800af6e:	b002      	add	sp, #8
 800af70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af74:	b004      	add	sp, #16
 800af76:	4770      	bx	lr
 800af78:	20000a7c 	.word	0x20000a7c

0800af7c <putchar>:
 800af7c:	4b09      	ldr	r3, [pc, #36]	; (800afa4 <putchar+0x28>)
 800af7e:	b513      	push	{r0, r1, r4, lr}
 800af80:	681c      	ldr	r4, [r3, #0]
 800af82:	4601      	mov	r1, r0
 800af84:	b134      	cbz	r4, 800af94 <putchar+0x18>
 800af86:	69a3      	ldr	r3, [r4, #24]
 800af88:	b923      	cbnz	r3, 800af94 <putchar+0x18>
 800af8a:	9001      	str	r0, [sp, #4]
 800af8c:	4620      	mov	r0, r4
 800af8e:	f001 f9c5 	bl	800c31c <__sinit>
 800af92:	9901      	ldr	r1, [sp, #4]
 800af94:	68a2      	ldr	r2, [r4, #8]
 800af96:	4620      	mov	r0, r4
 800af98:	b002      	add	sp, #8
 800af9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af9e:	f002 bffd 	b.w	800df9c <_putc_r>
 800afa2:	bf00      	nop
 800afa4:	20000a7c 	.word	0x20000a7c

0800afa8 <_puts_r>:
 800afa8:	b570      	push	{r4, r5, r6, lr}
 800afaa:	460e      	mov	r6, r1
 800afac:	4605      	mov	r5, r0
 800afae:	b118      	cbz	r0, 800afb8 <_puts_r+0x10>
 800afb0:	6983      	ldr	r3, [r0, #24]
 800afb2:	b90b      	cbnz	r3, 800afb8 <_puts_r+0x10>
 800afb4:	f001 f9b2 	bl	800c31c <__sinit>
 800afb8:	69ab      	ldr	r3, [r5, #24]
 800afba:	68ac      	ldr	r4, [r5, #8]
 800afbc:	b913      	cbnz	r3, 800afc4 <_puts_r+0x1c>
 800afbe:	4628      	mov	r0, r5
 800afc0:	f001 f9ac 	bl	800c31c <__sinit>
 800afc4:	4b2c      	ldr	r3, [pc, #176]	; (800b078 <_puts_r+0xd0>)
 800afc6:	429c      	cmp	r4, r3
 800afc8:	d120      	bne.n	800b00c <_puts_r+0x64>
 800afca:	686c      	ldr	r4, [r5, #4]
 800afcc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800afce:	07db      	lsls	r3, r3, #31
 800afd0:	d405      	bmi.n	800afde <_puts_r+0x36>
 800afd2:	89a3      	ldrh	r3, [r4, #12]
 800afd4:	0598      	lsls	r0, r3, #22
 800afd6:	d402      	bmi.n	800afde <_puts_r+0x36>
 800afd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800afda:	f7ff ff84 	bl	800aee6 <__retarget_lock_acquire_recursive>
 800afde:	89a3      	ldrh	r3, [r4, #12]
 800afe0:	0719      	lsls	r1, r3, #28
 800afe2:	d51d      	bpl.n	800b020 <_puts_r+0x78>
 800afe4:	6923      	ldr	r3, [r4, #16]
 800afe6:	b1db      	cbz	r3, 800b020 <_puts_r+0x78>
 800afe8:	3e01      	subs	r6, #1
 800afea:	68a3      	ldr	r3, [r4, #8]
 800afec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800aff0:	3b01      	subs	r3, #1
 800aff2:	60a3      	str	r3, [r4, #8]
 800aff4:	bb39      	cbnz	r1, 800b046 <_puts_r+0x9e>
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	da38      	bge.n	800b06c <_puts_r+0xc4>
 800affa:	4622      	mov	r2, r4
 800affc:	210a      	movs	r1, #10
 800affe:	4628      	mov	r0, r5
 800b000:	f000 ffb2 	bl	800bf68 <__swbuf_r>
 800b004:	3001      	adds	r0, #1
 800b006:	d011      	beq.n	800b02c <_puts_r+0x84>
 800b008:	250a      	movs	r5, #10
 800b00a:	e011      	b.n	800b030 <_puts_r+0x88>
 800b00c:	4b1b      	ldr	r3, [pc, #108]	; (800b07c <_puts_r+0xd4>)
 800b00e:	429c      	cmp	r4, r3
 800b010:	d101      	bne.n	800b016 <_puts_r+0x6e>
 800b012:	68ac      	ldr	r4, [r5, #8]
 800b014:	e7da      	b.n	800afcc <_puts_r+0x24>
 800b016:	4b1a      	ldr	r3, [pc, #104]	; (800b080 <_puts_r+0xd8>)
 800b018:	429c      	cmp	r4, r3
 800b01a:	bf08      	it	eq
 800b01c:	68ec      	ldreq	r4, [r5, #12]
 800b01e:	e7d5      	b.n	800afcc <_puts_r+0x24>
 800b020:	4621      	mov	r1, r4
 800b022:	4628      	mov	r0, r5
 800b024:	f000 fff2 	bl	800c00c <__swsetup_r>
 800b028:	2800      	cmp	r0, #0
 800b02a:	d0dd      	beq.n	800afe8 <_puts_r+0x40>
 800b02c:	f04f 35ff 	mov.w	r5, #4294967295
 800b030:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b032:	07da      	lsls	r2, r3, #31
 800b034:	d405      	bmi.n	800b042 <_puts_r+0x9a>
 800b036:	89a3      	ldrh	r3, [r4, #12]
 800b038:	059b      	lsls	r3, r3, #22
 800b03a:	d402      	bmi.n	800b042 <_puts_r+0x9a>
 800b03c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b03e:	f7ff ff53 	bl	800aee8 <__retarget_lock_release_recursive>
 800b042:	4628      	mov	r0, r5
 800b044:	bd70      	pop	{r4, r5, r6, pc}
 800b046:	2b00      	cmp	r3, #0
 800b048:	da04      	bge.n	800b054 <_puts_r+0xac>
 800b04a:	69a2      	ldr	r2, [r4, #24]
 800b04c:	429a      	cmp	r2, r3
 800b04e:	dc06      	bgt.n	800b05e <_puts_r+0xb6>
 800b050:	290a      	cmp	r1, #10
 800b052:	d004      	beq.n	800b05e <_puts_r+0xb6>
 800b054:	6823      	ldr	r3, [r4, #0]
 800b056:	1c5a      	adds	r2, r3, #1
 800b058:	6022      	str	r2, [r4, #0]
 800b05a:	7019      	strb	r1, [r3, #0]
 800b05c:	e7c5      	b.n	800afea <_puts_r+0x42>
 800b05e:	4622      	mov	r2, r4
 800b060:	4628      	mov	r0, r5
 800b062:	f000 ff81 	bl	800bf68 <__swbuf_r>
 800b066:	3001      	adds	r0, #1
 800b068:	d1bf      	bne.n	800afea <_puts_r+0x42>
 800b06a:	e7df      	b.n	800b02c <_puts_r+0x84>
 800b06c:	6823      	ldr	r3, [r4, #0]
 800b06e:	250a      	movs	r5, #10
 800b070:	1c5a      	adds	r2, r3, #1
 800b072:	6022      	str	r2, [r4, #0]
 800b074:	701d      	strb	r5, [r3, #0]
 800b076:	e7db      	b.n	800b030 <_puts_r+0x88>
 800b078:	0800ed90 	.word	0x0800ed90
 800b07c:	0800edb0 	.word	0x0800edb0
 800b080:	0800ed70 	.word	0x0800ed70

0800b084 <puts>:
 800b084:	4b02      	ldr	r3, [pc, #8]	; (800b090 <puts+0xc>)
 800b086:	4601      	mov	r1, r0
 800b088:	6818      	ldr	r0, [r3, #0]
 800b08a:	f7ff bf8d 	b.w	800afa8 <_puts_r>
 800b08e:	bf00      	nop
 800b090:	20000a7c 	.word	0x20000a7c

0800b094 <sniprintf>:
 800b094:	b40c      	push	{r2, r3}
 800b096:	b530      	push	{r4, r5, lr}
 800b098:	4b17      	ldr	r3, [pc, #92]	; (800b0f8 <sniprintf+0x64>)
 800b09a:	1e0c      	subs	r4, r1, #0
 800b09c:	681d      	ldr	r5, [r3, #0]
 800b09e:	b09d      	sub	sp, #116	; 0x74
 800b0a0:	da08      	bge.n	800b0b4 <sniprintf+0x20>
 800b0a2:	238b      	movs	r3, #139	; 0x8b
 800b0a4:	602b      	str	r3, [r5, #0]
 800b0a6:	f04f 30ff 	mov.w	r0, #4294967295
 800b0aa:	b01d      	add	sp, #116	; 0x74
 800b0ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b0b0:	b002      	add	sp, #8
 800b0b2:	4770      	bx	lr
 800b0b4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b0b8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b0bc:	bf14      	ite	ne
 800b0be:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b0c2:	4623      	moveq	r3, r4
 800b0c4:	9304      	str	r3, [sp, #16]
 800b0c6:	9307      	str	r3, [sp, #28]
 800b0c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b0cc:	9002      	str	r0, [sp, #8]
 800b0ce:	9006      	str	r0, [sp, #24]
 800b0d0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b0d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b0d6:	ab21      	add	r3, sp, #132	; 0x84
 800b0d8:	a902      	add	r1, sp, #8
 800b0da:	4628      	mov	r0, r5
 800b0dc:	9301      	str	r3, [sp, #4]
 800b0de:	f002 fb6f 	bl	800d7c0 <_svfiprintf_r>
 800b0e2:	1c43      	adds	r3, r0, #1
 800b0e4:	bfbc      	itt	lt
 800b0e6:	238b      	movlt	r3, #139	; 0x8b
 800b0e8:	602b      	strlt	r3, [r5, #0]
 800b0ea:	2c00      	cmp	r4, #0
 800b0ec:	d0dd      	beq.n	800b0aa <sniprintf+0x16>
 800b0ee:	9b02      	ldr	r3, [sp, #8]
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	701a      	strb	r2, [r3, #0]
 800b0f4:	e7d9      	b.n	800b0aa <sniprintf+0x16>
 800b0f6:	bf00      	nop
 800b0f8:	20000a7c 	.word	0x20000a7c

0800b0fc <siprintf>:
 800b0fc:	b40e      	push	{r1, r2, r3}
 800b0fe:	b500      	push	{lr}
 800b100:	b09c      	sub	sp, #112	; 0x70
 800b102:	ab1d      	add	r3, sp, #116	; 0x74
 800b104:	9002      	str	r0, [sp, #8]
 800b106:	9006      	str	r0, [sp, #24]
 800b108:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b10c:	4809      	ldr	r0, [pc, #36]	; (800b134 <siprintf+0x38>)
 800b10e:	9107      	str	r1, [sp, #28]
 800b110:	9104      	str	r1, [sp, #16]
 800b112:	4909      	ldr	r1, [pc, #36]	; (800b138 <siprintf+0x3c>)
 800b114:	f853 2b04 	ldr.w	r2, [r3], #4
 800b118:	9105      	str	r1, [sp, #20]
 800b11a:	6800      	ldr	r0, [r0, #0]
 800b11c:	9301      	str	r3, [sp, #4]
 800b11e:	a902      	add	r1, sp, #8
 800b120:	f002 fb4e 	bl	800d7c0 <_svfiprintf_r>
 800b124:	9b02      	ldr	r3, [sp, #8]
 800b126:	2200      	movs	r2, #0
 800b128:	701a      	strb	r2, [r3, #0]
 800b12a:	b01c      	add	sp, #112	; 0x70
 800b12c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b130:	b003      	add	sp, #12
 800b132:	4770      	bx	lr
 800b134:	20000a7c 	.word	0x20000a7c
 800b138:	ffff0208 	.word	0xffff0208

0800b13c <strncasecmp>:
 800b13c:	b570      	push	{r4, r5, r6, lr}
 800b13e:	4e0f      	ldr	r6, [pc, #60]	; (800b17c <strncasecmp+0x40>)
 800b140:	4604      	mov	r4, r0
 800b142:	440a      	add	r2, r1
 800b144:	428a      	cmp	r2, r1
 800b146:	d101      	bne.n	800b14c <strncasecmp+0x10>
 800b148:	2000      	movs	r0, #0
 800b14a:	e013      	b.n	800b174 <strncasecmp+0x38>
 800b14c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b150:	5d98      	ldrb	r0, [r3, r6]
 800b152:	f000 0003 	and.w	r0, r0, #3
 800b156:	2801      	cmp	r0, #1
 800b158:	f811 0b01 	ldrb.w	r0, [r1], #1
 800b15c:	5c35      	ldrb	r5, [r6, r0]
 800b15e:	f005 0503 	and.w	r5, r5, #3
 800b162:	bf08      	it	eq
 800b164:	3320      	addeq	r3, #32
 800b166:	2d01      	cmp	r5, #1
 800b168:	bf08      	it	eq
 800b16a:	3020      	addeq	r0, #32
 800b16c:	1a1b      	subs	r3, r3, r0
 800b16e:	d102      	bne.n	800b176 <strncasecmp+0x3a>
 800b170:	2800      	cmp	r0, #0
 800b172:	d1e7      	bne.n	800b144 <strncasecmp+0x8>
 800b174:	bd70      	pop	{r4, r5, r6, pc}
 800b176:	4618      	mov	r0, r3
 800b178:	e7fc      	b.n	800b174 <strncasecmp+0x38>
 800b17a:	bf00      	nop
 800b17c:	0800ec09 	.word	0x0800ec09

0800b180 <strncat>:
 800b180:	b530      	push	{r4, r5, lr}
 800b182:	4604      	mov	r4, r0
 800b184:	7825      	ldrb	r5, [r4, #0]
 800b186:	4623      	mov	r3, r4
 800b188:	3401      	adds	r4, #1
 800b18a:	2d00      	cmp	r5, #0
 800b18c:	d1fa      	bne.n	800b184 <strncat+0x4>
 800b18e:	3a01      	subs	r2, #1
 800b190:	d304      	bcc.n	800b19c <strncat+0x1c>
 800b192:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b196:	f803 4b01 	strb.w	r4, [r3], #1
 800b19a:	b904      	cbnz	r4, 800b19e <strncat+0x1e>
 800b19c:	bd30      	pop	{r4, r5, pc}
 800b19e:	2a00      	cmp	r2, #0
 800b1a0:	d1f5      	bne.n	800b18e <strncat+0xe>
 800b1a2:	701a      	strb	r2, [r3, #0]
 800b1a4:	e7f3      	b.n	800b18e <strncat+0xe>

0800b1a6 <strncpy>:
 800b1a6:	b510      	push	{r4, lr}
 800b1a8:	3901      	subs	r1, #1
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	b132      	cbz	r2, 800b1bc <strncpy+0x16>
 800b1ae:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b1b2:	f803 4b01 	strb.w	r4, [r3], #1
 800b1b6:	3a01      	subs	r2, #1
 800b1b8:	2c00      	cmp	r4, #0
 800b1ba:	d1f7      	bne.n	800b1ac <strncpy+0x6>
 800b1bc:	441a      	add	r2, r3
 800b1be:	2100      	movs	r1, #0
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	d100      	bne.n	800b1c6 <strncpy+0x20>
 800b1c4:	bd10      	pop	{r4, pc}
 800b1c6:	f803 1b01 	strb.w	r1, [r3], #1
 800b1ca:	e7f9      	b.n	800b1c0 <strncpy+0x1a>

0800b1cc <strnlen>:
 800b1cc:	b510      	push	{r4, lr}
 800b1ce:	4602      	mov	r2, r0
 800b1d0:	4401      	add	r1, r0
 800b1d2:	428a      	cmp	r2, r1
 800b1d4:	4613      	mov	r3, r2
 800b1d6:	d101      	bne.n	800b1dc <strnlen+0x10>
 800b1d8:	1a18      	subs	r0, r3, r0
 800b1da:	bd10      	pop	{r4, pc}
 800b1dc:	781c      	ldrb	r4, [r3, #0]
 800b1de:	3201      	adds	r2, #1
 800b1e0:	2c00      	cmp	r4, #0
 800b1e2:	d1f6      	bne.n	800b1d2 <strnlen+0x6>
 800b1e4:	e7f8      	b.n	800b1d8 <strnlen+0xc>

0800b1e6 <sulp>:
 800b1e6:	b570      	push	{r4, r5, r6, lr}
 800b1e8:	4604      	mov	r4, r0
 800b1ea:	460d      	mov	r5, r1
 800b1ec:	ec45 4b10 	vmov	d0, r4, r5
 800b1f0:	4616      	mov	r6, r2
 800b1f2:	f002 f881 	bl	800d2f8 <__ulp>
 800b1f6:	ec51 0b10 	vmov	r0, r1, d0
 800b1fa:	b17e      	cbz	r6, 800b21c <sulp+0x36>
 800b1fc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b200:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b204:	2b00      	cmp	r3, #0
 800b206:	dd09      	ble.n	800b21c <sulp+0x36>
 800b208:	051b      	lsls	r3, r3, #20
 800b20a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b20e:	2400      	movs	r4, #0
 800b210:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b214:	4622      	mov	r2, r4
 800b216:	462b      	mov	r3, r5
 800b218:	f7f5 f9ee 	bl	80005f8 <__aeabi_dmul>
 800b21c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b220 <_strtod_l>:
 800b220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b224:	b0a3      	sub	sp, #140	; 0x8c
 800b226:	461f      	mov	r7, r3
 800b228:	2300      	movs	r3, #0
 800b22a:	931e      	str	r3, [sp, #120]	; 0x78
 800b22c:	4ba4      	ldr	r3, [pc, #656]	; (800b4c0 <_strtod_l+0x2a0>)
 800b22e:	9219      	str	r2, [sp, #100]	; 0x64
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	9307      	str	r3, [sp, #28]
 800b234:	4604      	mov	r4, r0
 800b236:	4618      	mov	r0, r3
 800b238:	4688      	mov	r8, r1
 800b23a:	f7f4 ffc9 	bl	80001d0 <strlen>
 800b23e:	f04f 0a00 	mov.w	sl, #0
 800b242:	4605      	mov	r5, r0
 800b244:	f04f 0b00 	mov.w	fp, #0
 800b248:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800b24c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b24e:	781a      	ldrb	r2, [r3, #0]
 800b250:	2a2b      	cmp	r2, #43	; 0x2b
 800b252:	d04c      	beq.n	800b2ee <_strtod_l+0xce>
 800b254:	d839      	bhi.n	800b2ca <_strtod_l+0xaa>
 800b256:	2a0d      	cmp	r2, #13
 800b258:	d832      	bhi.n	800b2c0 <_strtod_l+0xa0>
 800b25a:	2a08      	cmp	r2, #8
 800b25c:	d832      	bhi.n	800b2c4 <_strtod_l+0xa4>
 800b25e:	2a00      	cmp	r2, #0
 800b260:	d03c      	beq.n	800b2dc <_strtod_l+0xbc>
 800b262:	2300      	movs	r3, #0
 800b264:	930e      	str	r3, [sp, #56]	; 0x38
 800b266:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800b268:	7833      	ldrb	r3, [r6, #0]
 800b26a:	2b30      	cmp	r3, #48	; 0x30
 800b26c:	f040 80b4 	bne.w	800b3d8 <_strtod_l+0x1b8>
 800b270:	7873      	ldrb	r3, [r6, #1]
 800b272:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b276:	2b58      	cmp	r3, #88	; 0x58
 800b278:	d16c      	bne.n	800b354 <_strtod_l+0x134>
 800b27a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b27c:	9301      	str	r3, [sp, #4]
 800b27e:	ab1e      	add	r3, sp, #120	; 0x78
 800b280:	9702      	str	r7, [sp, #8]
 800b282:	9300      	str	r3, [sp, #0]
 800b284:	4a8f      	ldr	r2, [pc, #572]	; (800b4c4 <_strtod_l+0x2a4>)
 800b286:	ab1f      	add	r3, sp, #124	; 0x7c
 800b288:	a91d      	add	r1, sp, #116	; 0x74
 800b28a:	4620      	mov	r0, r4
 800b28c:	f001 f94a 	bl	800c524 <__gethex>
 800b290:	f010 0707 	ands.w	r7, r0, #7
 800b294:	4605      	mov	r5, r0
 800b296:	d005      	beq.n	800b2a4 <_strtod_l+0x84>
 800b298:	2f06      	cmp	r7, #6
 800b29a:	d12a      	bne.n	800b2f2 <_strtod_l+0xd2>
 800b29c:	3601      	adds	r6, #1
 800b29e:	2300      	movs	r3, #0
 800b2a0:	961d      	str	r6, [sp, #116]	; 0x74
 800b2a2:	930e      	str	r3, [sp, #56]	; 0x38
 800b2a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	f040 8596 	bne.w	800bdd8 <_strtod_l+0xbb8>
 800b2ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b2ae:	b1db      	cbz	r3, 800b2e8 <_strtod_l+0xc8>
 800b2b0:	4652      	mov	r2, sl
 800b2b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b2b6:	ec43 2b10 	vmov	d0, r2, r3
 800b2ba:	b023      	add	sp, #140	; 0x8c
 800b2bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2c0:	2a20      	cmp	r2, #32
 800b2c2:	d1ce      	bne.n	800b262 <_strtod_l+0x42>
 800b2c4:	3301      	adds	r3, #1
 800b2c6:	931d      	str	r3, [sp, #116]	; 0x74
 800b2c8:	e7c0      	b.n	800b24c <_strtod_l+0x2c>
 800b2ca:	2a2d      	cmp	r2, #45	; 0x2d
 800b2cc:	d1c9      	bne.n	800b262 <_strtod_l+0x42>
 800b2ce:	2201      	movs	r2, #1
 800b2d0:	920e      	str	r2, [sp, #56]	; 0x38
 800b2d2:	1c5a      	adds	r2, r3, #1
 800b2d4:	921d      	str	r2, [sp, #116]	; 0x74
 800b2d6:	785b      	ldrb	r3, [r3, #1]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d1c4      	bne.n	800b266 <_strtod_l+0x46>
 800b2dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b2de:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	f040 8576 	bne.w	800bdd4 <_strtod_l+0xbb4>
 800b2e8:	4652      	mov	r2, sl
 800b2ea:	465b      	mov	r3, fp
 800b2ec:	e7e3      	b.n	800b2b6 <_strtod_l+0x96>
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	e7ee      	b.n	800b2d0 <_strtod_l+0xb0>
 800b2f2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b2f4:	b13a      	cbz	r2, 800b306 <_strtod_l+0xe6>
 800b2f6:	2135      	movs	r1, #53	; 0x35
 800b2f8:	a820      	add	r0, sp, #128	; 0x80
 800b2fa:	f002 f908 	bl	800d50e <__copybits>
 800b2fe:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b300:	4620      	mov	r0, r4
 800b302:	f001 fccd 	bl	800cca0 <_Bfree>
 800b306:	3f01      	subs	r7, #1
 800b308:	2f05      	cmp	r7, #5
 800b30a:	d807      	bhi.n	800b31c <_strtod_l+0xfc>
 800b30c:	e8df f007 	tbb	[pc, r7]
 800b310:	1d180b0e 	.word	0x1d180b0e
 800b314:	030e      	.short	0x030e
 800b316:	f04f 0b00 	mov.w	fp, #0
 800b31a:	46da      	mov	sl, fp
 800b31c:	0728      	lsls	r0, r5, #28
 800b31e:	d5c1      	bpl.n	800b2a4 <_strtod_l+0x84>
 800b320:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800b324:	e7be      	b.n	800b2a4 <_strtod_l+0x84>
 800b326:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800b32a:	e7f7      	b.n	800b31c <_strtod_l+0xfc>
 800b32c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800b330:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b332:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b336:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b33a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b33e:	e7ed      	b.n	800b31c <_strtod_l+0xfc>
 800b340:	f8df b184 	ldr.w	fp, [pc, #388]	; 800b4c8 <_strtod_l+0x2a8>
 800b344:	f04f 0a00 	mov.w	sl, #0
 800b348:	e7e8      	b.n	800b31c <_strtod_l+0xfc>
 800b34a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b34e:	f04f 3aff 	mov.w	sl, #4294967295
 800b352:	e7e3      	b.n	800b31c <_strtod_l+0xfc>
 800b354:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b356:	1c5a      	adds	r2, r3, #1
 800b358:	921d      	str	r2, [sp, #116]	; 0x74
 800b35a:	785b      	ldrb	r3, [r3, #1]
 800b35c:	2b30      	cmp	r3, #48	; 0x30
 800b35e:	d0f9      	beq.n	800b354 <_strtod_l+0x134>
 800b360:	2b00      	cmp	r3, #0
 800b362:	d09f      	beq.n	800b2a4 <_strtod_l+0x84>
 800b364:	2301      	movs	r3, #1
 800b366:	f04f 0900 	mov.w	r9, #0
 800b36a:	9304      	str	r3, [sp, #16]
 800b36c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b36e:	930a      	str	r3, [sp, #40]	; 0x28
 800b370:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b374:	464f      	mov	r7, r9
 800b376:	220a      	movs	r2, #10
 800b378:	981d      	ldr	r0, [sp, #116]	; 0x74
 800b37a:	7806      	ldrb	r6, [r0, #0]
 800b37c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b380:	b2d9      	uxtb	r1, r3
 800b382:	2909      	cmp	r1, #9
 800b384:	d92a      	bls.n	800b3dc <_strtod_l+0x1bc>
 800b386:	9907      	ldr	r1, [sp, #28]
 800b388:	462a      	mov	r2, r5
 800b38a:	f002 feac 	bl	800e0e6 <strncmp>
 800b38e:	b398      	cbz	r0, 800b3f8 <_strtod_l+0x1d8>
 800b390:	2000      	movs	r0, #0
 800b392:	4633      	mov	r3, r6
 800b394:	463d      	mov	r5, r7
 800b396:	9007      	str	r0, [sp, #28]
 800b398:	4602      	mov	r2, r0
 800b39a:	2b65      	cmp	r3, #101	; 0x65
 800b39c:	d001      	beq.n	800b3a2 <_strtod_l+0x182>
 800b39e:	2b45      	cmp	r3, #69	; 0x45
 800b3a0:	d118      	bne.n	800b3d4 <_strtod_l+0x1b4>
 800b3a2:	b91d      	cbnz	r5, 800b3ac <_strtod_l+0x18c>
 800b3a4:	9b04      	ldr	r3, [sp, #16]
 800b3a6:	4303      	orrs	r3, r0
 800b3a8:	d098      	beq.n	800b2dc <_strtod_l+0xbc>
 800b3aa:	2500      	movs	r5, #0
 800b3ac:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800b3b0:	f108 0301 	add.w	r3, r8, #1
 800b3b4:	931d      	str	r3, [sp, #116]	; 0x74
 800b3b6:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b3ba:	2b2b      	cmp	r3, #43	; 0x2b
 800b3bc:	d075      	beq.n	800b4aa <_strtod_l+0x28a>
 800b3be:	2b2d      	cmp	r3, #45	; 0x2d
 800b3c0:	d07b      	beq.n	800b4ba <_strtod_l+0x29a>
 800b3c2:	f04f 0c00 	mov.w	ip, #0
 800b3c6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800b3ca:	2909      	cmp	r1, #9
 800b3cc:	f240 8082 	bls.w	800b4d4 <_strtod_l+0x2b4>
 800b3d0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800b3d4:	2600      	movs	r6, #0
 800b3d6:	e09d      	b.n	800b514 <_strtod_l+0x2f4>
 800b3d8:	2300      	movs	r3, #0
 800b3da:	e7c4      	b.n	800b366 <_strtod_l+0x146>
 800b3dc:	2f08      	cmp	r7, #8
 800b3de:	bfd8      	it	le
 800b3e0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800b3e2:	f100 0001 	add.w	r0, r0, #1
 800b3e6:	bfda      	itte	le
 800b3e8:	fb02 3301 	mlale	r3, r2, r1, r3
 800b3ec:	9309      	strle	r3, [sp, #36]	; 0x24
 800b3ee:	fb02 3909 	mlagt	r9, r2, r9, r3
 800b3f2:	3701      	adds	r7, #1
 800b3f4:	901d      	str	r0, [sp, #116]	; 0x74
 800b3f6:	e7bf      	b.n	800b378 <_strtod_l+0x158>
 800b3f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b3fa:	195a      	adds	r2, r3, r5
 800b3fc:	921d      	str	r2, [sp, #116]	; 0x74
 800b3fe:	5d5b      	ldrb	r3, [r3, r5]
 800b400:	2f00      	cmp	r7, #0
 800b402:	d037      	beq.n	800b474 <_strtod_l+0x254>
 800b404:	9007      	str	r0, [sp, #28]
 800b406:	463d      	mov	r5, r7
 800b408:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800b40c:	2a09      	cmp	r2, #9
 800b40e:	d912      	bls.n	800b436 <_strtod_l+0x216>
 800b410:	2201      	movs	r2, #1
 800b412:	e7c2      	b.n	800b39a <_strtod_l+0x17a>
 800b414:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b416:	1c5a      	adds	r2, r3, #1
 800b418:	921d      	str	r2, [sp, #116]	; 0x74
 800b41a:	785b      	ldrb	r3, [r3, #1]
 800b41c:	3001      	adds	r0, #1
 800b41e:	2b30      	cmp	r3, #48	; 0x30
 800b420:	d0f8      	beq.n	800b414 <_strtod_l+0x1f4>
 800b422:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800b426:	2a08      	cmp	r2, #8
 800b428:	f200 84db 	bhi.w	800bde2 <_strtod_l+0xbc2>
 800b42c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b42e:	9007      	str	r0, [sp, #28]
 800b430:	2000      	movs	r0, #0
 800b432:	920a      	str	r2, [sp, #40]	; 0x28
 800b434:	4605      	mov	r5, r0
 800b436:	3b30      	subs	r3, #48	; 0x30
 800b438:	f100 0201 	add.w	r2, r0, #1
 800b43c:	d014      	beq.n	800b468 <_strtod_l+0x248>
 800b43e:	9907      	ldr	r1, [sp, #28]
 800b440:	4411      	add	r1, r2
 800b442:	9107      	str	r1, [sp, #28]
 800b444:	462a      	mov	r2, r5
 800b446:	eb00 0e05 	add.w	lr, r0, r5
 800b44a:	210a      	movs	r1, #10
 800b44c:	4572      	cmp	r2, lr
 800b44e:	d113      	bne.n	800b478 <_strtod_l+0x258>
 800b450:	182a      	adds	r2, r5, r0
 800b452:	2a08      	cmp	r2, #8
 800b454:	f105 0501 	add.w	r5, r5, #1
 800b458:	4405      	add	r5, r0
 800b45a:	dc1c      	bgt.n	800b496 <_strtod_l+0x276>
 800b45c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b45e:	220a      	movs	r2, #10
 800b460:	fb02 3301 	mla	r3, r2, r1, r3
 800b464:	9309      	str	r3, [sp, #36]	; 0x24
 800b466:	2200      	movs	r2, #0
 800b468:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b46a:	1c59      	adds	r1, r3, #1
 800b46c:	911d      	str	r1, [sp, #116]	; 0x74
 800b46e:	785b      	ldrb	r3, [r3, #1]
 800b470:	4610      	mov	r0, r2
 800b472:	e7c9      	b.n	800b408 <_strtod_l+0x1e8>
 800b474:	4638      	mov	r0, r7
 800b476:	e7d2      	b.n	800b41e <_strtod_l+0x1fe>
 800b478:	2a08      	cmp	r2, #8
 800b47a:	dc04      	bgt.n	800b486 <_strtod_l+0x266>
 800b47c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b47e:	434e      	muls	r6, r1
 800b480:	9609      	str	r6, [sp, #36]	; 0x24
 800b482:	3201      	adds	r2, #1
 800b484:	e7e2      	b.n	800b44c <_strtod_l+0x22c>
 800b486:	f102 0c01 	add.w	ip, r2, #1
 800b48a:	f1bc 0f10 	cmp.w	ip, #16
 800b48e:	bfd8      	it	le
 800b490:	fb01 f909 	mulle.w	r9, r1, r9
 800b494:	e7f5      	b.n	800b482 <_strtod_l+0x262>
 800b496:	2d10      	cmp	r5, #16
 800b498:	bfdc      	itt	le
 800b49a:	220a      	movle	r2, #10
 800b49c:	fb02 3909 	mlale	r9, r2, r9, r3
 800b4a0:	e7e1      	b.n	800b466 <_strtod_l+0x246>
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	9307      	str	r3, [sp, #28]
 800b4a6:	2201      	movs	r2, #1
 800b4a8:	e77c      	b.n	800b3a4 <_strtod_l+0x184>
 800b4aa:	f04f 0c00 	mov.w	ip, #0
 800b4ae:	f108 0302 	add.w	r3, r8, #2
 800b4b2:	931d      	str	r3, [sp, #116]	; 0x74
 800b4b4:	f898 3002 	ldrb.w	r3, [r8, #2]
 800b4b8:	e785      	b.n	800b3c6 <_strtod_l+0x1a6>
 800b4ba:	f04f 0c01 	mov.w	ip, #1
 800b4be:	e7f6      	b.n	800b4ae <_strtod_l+0x28e>
 800b4c0:	0800ee4c 	.word	0x0800ee4c
 800b4c4:	0800ed1c 	.word	0x0800ed1c
 800b4c8:	7ff00000 	.word	0x7ff00000
 800b4cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b4ce:	1c59      	adds	r1, r3, #1
 800b4d0:	911d      	str	r1, [sp, #116]	; 0x74
 800b4d2:	785b      	ldrb	r3, [r3, #1]
 800b4d4:	2b30      	cmp	r3, #48	; 0x30
 800b4d6:	d0f9      	beq.n	800b4cc <_strtod_l+0x2ac>
 800b4d8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800b4dc:	2908      	cmp	r1, #8
 800b4de:	f63f af79 	bhi.w	800b3d4 <_strtod_l+0x1b4>
 800b4e2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800b4e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b4e8:	9308      	str	r3, [sp, #32]
 800b4ea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b4ec:	1c59      	adds	r1, r3, #1
 800b4ee:	911d      	str	r1, [sp, #116]	; 0x74
 800b4f0:	785b      	ldrb	r3, [r3, #1]
 800b4f2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800b4f6:	2e09      	cmp	r6, #9
 800b4f8:	d937      	bls.n	800b56a <_strtod_l+0x34a>
 800b4fa:	9e08      	ldr	r6, [sp, #32]
 800b4fc:	1b89      	subs	r1, r1, r6
 800b4fe:	2908      	cmp	r1, #8
 800b500:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800b504:	dc02      	bgt.n	800b50c <_strtod_l+0x2ec>
 800b506:	4576      	cmp	r6, lr
 800b508:	bfa8      	it	ge
 800b50a:	4676      	movge	r6, lr
 800b50c:	f1bc 0f00 	cmp.w	ip, #0
 800b510:	d000      	beq.n	800b514 <_strtod_l+0x2f4>
 800b512:	4276      	negs	r6, r6
 800b514:	2d00      	cmp	r5, #0
 800b516:	d14f      	bne.n	800b5b8 <_strtod_l+0x398>
 800b518:	9904      	ldr	r1, [sp, #16]
 800b51a:	4301      	orrs	r1, r0
 800b51c:	f47f aec2 	bne.w	800b2a4 <_strtod_l+0x84>
 800b520:	2a00      	cmp	r2, #0
 800b522:	f47f aedb 	bne.w	800b2dc <_strtod_l+0xbc>
 800b526:	2b69      	cmp	r3, #105	; 0x69
 800b528:	d027      	beq.n	800b57a <_strtod_l+0x35a>
 800b52a:	dc24      	bgt.n	800b576 <_strtod_l+0x356>
 800b52c:	2b49      	cmp	r3, #73	; 0x49
 800b52e:	d024      	beq.n	800b57a <_strtod_l+0x35a>
 800b530:	2b4e      	cmp	r3, #78	; 0x4e
 800b532:	f47f aed3 	bne.w	800b2dc <_strtod_l+0xbc>
 800b536:	499e      	ldr	r1, [pc, #632]	; (800b7b0 <_strtod_l+0x590>)
 800b538:	a81d      	add	r0, sp, #116	; 0x74
 800b53a:	f001 fa4b 	bl	800c9d4 <__match>
 800b53e:	2800      	cmp	r0, #0
 800b540:	f43f aecc 	beq.w	800b2dc <_strtod_l+0xbc>
 800b544:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b546:	781b      	ldrb	r3, [r3, #0]
 800b548:	2b28      	cmp	r3, #40	; 0x28
 800b54a:	d12d      	bne.n	800b5a8 <_strtod_l+0x388>
 800b54c:	4999      	ldr	r1, [pc, #612]	; (800b7b4 <_strtod_l+0x594>)
 800b54e:	aa20      	add	r2, sp, #128	; 0x80
 800b550:	a81d      	add	r0, sp, #116	; 0x74
 800b552:	f001 fa53 	bl	800c9fc <__hexnan>
 800b556:	2805      	cmp	r0, #5
 800b558:	d126      	bne.n	800b5a8 <_strtod_l+0x388>
 800b55a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b55c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800b560:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b564:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b568:	e69c      	b.n	800b2a4 <_strtod_l+0x84>
 800b56a:	210a      	movs	r1, #10
 800b56c:	fb01 3e0e 	mla	lr, r1, lr, r3
 800b570:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b574:	e7b9      	b.n	800b4ea <_strtod_l+0x2ca>
 800b576:	2b6e      	cmp	r3, #110	; 0x6e
 800b578:	e7db      	b.n	800b532 <_strtod_l+0x312>
 800b57a:	498f      	ldr	r1, [pc, #572]	; (800b7b8 <_strtod_l+0x598>)
 800b57c:	a81d      	add	r0, sp, #116	; 0x74
 800b57e:	f001 fa29 	bl	800c9d4 <__match>
 800b582:	2800      	cmp	r0, #0
 800b584:	f43f aeaa 	beq.w	800b2dc <_strtod_l+0xbc>
 800b588:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b58a:	498c      	ldr	r1, [pc, #560]	; (800b7bc <_strtod_l+0x59c>)
 800b58c:	3b01      	subs	r3, #1
 800b58e:	a81d      	add	r0, sp, #116	; 0x74
 800b590:	931d      	str	r3, [sp, #116]	; 0x74
 800b592:	f001 fa1f 	bl	800c9d4 <__match>
 800b596:	b910      	cbnz	r0, 800b59e <_strtod_l+0x37e>
 800b598:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b59a:	3301      	adds	r3, #1
 800b59c:	931d      	str	r3, [sp, #116]	; 0x74
 800b59e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800b7cc <_strtod_l+0x5ac>
 800b5a2:	f04f 0a00 	mov.w	sl, #0
 800b5a6:	e67d      	b.n	800b2a4 <_strtod_l+0x84>
 800b5a8:	4885      	ldr	r0, [pc, #532]	; (800b7c0 <_strtod_l+0x5a0>)
 800b5aa:	f002 fd41 	bl	800e030 <nan>
 800b5ae:	ed8d 0b04 	vstr	d0, [sp, #16]
 800b5b2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800b5b6:	e675      	b.n	800b2a4 <_strtod_l+0x84>
 800b5b8:	9b07      	ldr	r3, [sp, #28]
 800b5ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5bc:	1af3      	subs	r3, r6, r3
 800b5be:	2f00      	cmp	r7, #0
 800b5c0:	bf08      	it	eq
 800b5c2:	462f      	moveq	r7, r5
 800b5c4:	2d10      	cmp	r5, #16
 800b5c6:	9308      	str	r3, [sp, #32]
 800b5c8:	46a8      	mov	r8, r5
 800b5ca:	bfa8      	it	ge
 800b5cc:	f04f 0810 	movge.w	r8, #16
 800b5d0:	f7f4 ff98 	bl	8000504 <__aeabi_ui2d>
 800b5d4:	2d09      	cmp	r5, #9
 800b5d6:	4682      	mov	sl, r0
 800b5d8:	468b      	mov	fp, r1
 800b5da:	dd13      	ble.n	800b604 <_strtod_l+0x3e4>
 800b5dc:	4b79      	ldr	r3, [pc, #484]	; (800b7c4 <_strtod_l+0x5a4>)
 800b5de:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b5e2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b5e6:	f7f5 f807 	bl	80005f8 <__aeabi_dmul>
 800b5ea:	4682      	mov	sl, r0
 800b5ec:	4648      	mov	r0, r9
 800b5ee:	468b      	mov	fp, r1
 800b5f0:	f7f4 ff88 	bl	8000504 <__aeabi_ui2d>
 800b5f4:	4602      	mov	r2, r0
 800b5f6:	460b      	mov	r3, r1
 800b5f8:	4650      	mov	r0, sl
 800b5fa:	4659      	mov	r1, fp
 800b5fc:	f7f4 fe46 	bl	800028c <__adddf3>
 800b600:	4682      	mov	sl, r0
 800b602:	468b      	mov	fp, r1
 800b604:	2d0f      	cmp	r5, #15
 800b606:	dc38      	bgt.n	800b67a <_strtod_l+0x45a>
 800b608:	9b08      	ldr	r3, [sp, #32]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	f43f ae4a 	beq.w	800b2a4 <_strtod_l+0x84>
 800b610:	dd24      	ble.n	800b65c <_strtod_l+0x43c>
 800b612:	2b16      	cmp	r3, #22
 800b614:	dc0b      	bgt.n	800b62e <_strtod_l+0x40e>
 800b616:	4d6b      	ldr	r5, [pc, #428]	; (800b7c4 <_strtod_l+0x5a4>)
 800b618:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800b61c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800b620:	4652      	mov	r2, sl
 800b622:	465b      	mov	r3, fp
 800b624:	f7f4 ffe8 	bl	80005f8 <__aeabi_dmul>
 800b628:	4682      	mov	sl, r0
 800b62a:	468b      	mov	fp, r1
 800b62c:	e63a      	b.n	800b2a4 <_strtod_l+0x84>
 800b62e:	9a08      	ldr	r2, [sp, #32]
 800b630:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800b634:	4293      	cmp	r3, r2
 800b636:	db20      	blt.n	800b67a <_strtod_l+0x45a>
 800b638:	4c62      	ldr	r4, [pc, #392]	; (800b7c4 <_strtod_l+0x5a4>)
 800b63a:	f1c5 050f 	rsb	r5, r5, #15
 800b63e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b642:	4652      	mov	r2, sl
 800b644:	465b      	mov	r3, fp
 800b646:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b64a:	f7f4 ffd5 	bl	80005f8 <__aeabi_dmul>
 800b64e:	9b08      	ldr	r3, [sp, #32]
 800b650:	1b5d      	subs	r5, r3, r5
 800b652:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b656:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b65a:	e7e3      	b.n	800b624 <_strtod_l+0x404>
 800b65c:	9b08      	ldr	r3, [sp, #32]
 800b65e:	3316      	adds	r3, #22
 800b660:	db0b      	blt.n	800b67a <_strtod_l+0x45a>
 800b662:	9b07      	ldr	r3, [sp, #28]
 800b664:	4a57      	ldr	r2, [pc, #348]	; (800b7c4 <_strtod_l+0x5a4>)
 800b666:	1b9e      	subs	r6, r3, r6
 800b668:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800b66c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b670:	4650      	mov	r0, sl
 800b672:	4659      	mov	r1, fp
 800b674:	f7f5 f8ea 	bl	800084c <__aeabi_ddiv>
 800b678:	e7d6      	b.n	800b628 <_strtod_l+0x408>
 800b67a:	9b08      	ldr	r3, [sp, #32]
 800b67c:	eba5 0808 	sub.w	r8, r5, r8
 800b680:	4498      	add	r8, r3
 800b682:	f1b8 0f00 	cmp.w	r8, #0
 800b686:	dd71      	ble.n	800b76c <_strtod_l+0x54c>
 800b688:	f018 030f 	ands.w	r3, r8, #15
 800b68c:	d00a      	beq.n	800b6a4 <_strtod_l+0x484>
 800b68e:	494d      	ldr	r1, [pc, #308]	; (800b7c4 <_strtod_l+0x5a4>)
 800b690:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b694:	4652      	mov	r2, sl
 800b696:	465b      	mov	r3, fp
 800b698:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b69c:	f7f4 ffac 	bl	80005f8 <__aeabi_dmul>
 800b6a0:	4682      	mov	sl, r0
 800b6a2:	468b      	mov	fp, r1
 800b6a4:	f038 080f 	bics.w	r8, r8, #15
 800b6a8:	d04d      	beq.n	800b746 <_strtod_l+0x526>
 800b6aa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b6ae:	dd22      	ble.n	800b6f6 <_strtod_l+0x4d6>
 800b6b0:	2500      	movs	r5, #0
 800b6b2:	462e      	mov	r6, r5
 800b6b4:	9509      	str	r5, [sp, #36]	; 0x24
 800b6b6:	9507      	str	r5, [sp, #28]
 800b6b8:	2322      	movs	r3, #34	; 0x22
 800b6ba:	f8df b110 	ldr.w	fp, [pc, #272]	; 800b7cc <_strtod_l+0x5ac>
 800b6be:	6023      	str	r3, [r4, #0]
 800b6c0:	f04f 0a00 	mov.w	sl, #0
 800b6c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	f43f adec 	beq.w	800b2a4 <_strtod_l+0x84>
 800b6cc:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b6ce:	4620      	mov	r0, r4
 800b6d0:	f001 fae6 	bl	800cca0 <_Bfree>
 800b6d4:	9907      	ldr	r1, [sp, #28]
 800b6d6:	4620      	mov	r0, r4
 800b6d8:	f001 fae2 	bl	800cca0 <_Bfree>
 800b6dc:	4631      	mov	r1, r6
 800b6de:	4620      	mov	r0, r4
 800b6e0:	f001 fade 	bl	800cca0 <_Bfree>
 800b6e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b6e6:	4620      	mov	r0, r4
 800b6e8:	f001 fada 	bl	800cca0 <_Bfree>
 800b6ec:	4629      	mov	r1, r5
 800b6ee:	4620      	mov	r0, r4
 800b6f0:	f001 fad6 	bl	800cca0 <_Bfree>
 800b6f4:	e5d6      	b.n	800b2a4 <_strtod_l+0x84>
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b6fc:	4650      	mov	r0, sl
 800b6fe:	4659      	mov	r1, fp
 800b700:	4699      	mov	r9, r3
 800b702:	f1b8 0f01 	cmp.w	r8, #1
 800b706:	dc21      	bgt.n	800b74c <_strtod_l+0x52c>
 800b708:	b10b      	cbz	r3, 800b70e <_strtod_l+0x4ee>
 800b70a:	4682      	mov	sl, r0
 800b70c:	468b      	mov	fp, r1
 800b70e:	4b2e      	ldr	r3, [pc, #184]	; (800b7c8 <_strtod_l+0x5a8>)
 800b710:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b714:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800b718:	4652      	mov	r2, sl
 800b71a:	465b      	mov	r3, fp
 800b71c:	e9d9 0100 	ldrd	r0, r1, [r9]
 800b720:	f7f4 ff6a 	bl	80005f8 <__aeabi_dmul>
 800b724:	4b29      	ldr	r3, [pc, #164]	; (800b7cc <_strtod_l+0x5ac>)
 800b726:	460a      	mov	r2, r1
 800b728:	400b      	ands	r3, r1
 800b72a:	4929      	ldr	r1, [pc, #164]	; (800b7d0 <_strtod_l+0x5b0>)
 800b72c:	428b      	cmp	r3, r1
 800b72e:	4682      	mov	sl, r0
 800b730:	d8be      	bhi.n	800b6b0 <_strtod_l+0x490>
 800b732:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b736:	428b      	cmp	r3, r1
 800b738:	bf86      	itte	hi
 800b73a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800b7d4 <_strtod_l+0x5b4>
 800b73e:	f04f 3aff 	movhi.w	sl, #4294967295
 800b742:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b746:	2300      	movs	r3, #0
 800b748:	9304      	str	r3, [sp, #16]
 800b74a:	e081      	b.n	800b850 <_strtod_l+0x630>
 800b74c:	f018 0f01 	tst.w	r8, #1
 800b750:	d007      	beq.n	800b762 <_strtod_l+0x542>
 800b752:	4b1d      	ldr	r3, [pc, #116]	; (800b7c8 <_strtod_l+0x5a8>)
 800b754:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800b758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b75c:	f7f4 ff4c 	bl	80005f8 <__aeabi_dmul>
 800b760:	2301      	movs	r3, #1
 800b762:	f109 0901 	add.w	r9, r9, #1
 800b766:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b76a:	e7ca      	b.n	800b702 <_strtod_l+0x4e2>
 800b76c:	d0eb      	beq.n	800b746 <_strtod_l+0x526>
 800b76e:	f1c8 0800 	rsb	r8, r8, #0
 800b772:	f018 020f 	ands.w	r2, r8, #15
 800b776:	d00a      	beq.n	800b78e <_strtod_l+0x56e>
 800b778:	4b12      	ldr	r3, [pc, #72]	; (800b7c4 <_strtod_l+0x5a4>)
 800b77a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b77e:	4650      	mov	r0, sl
 800b780:	4659      	mov	r1, fp
 800b782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b786:	f7f5 f861 	bl	800084c <__aeabi_ddiv>
 800b78a:	4682      	mov	sl, r0
 800b78c:	468b      	mov	fp, r1
 800b78e:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b792:	d0d8      	beq.n	800b746 <_strtod_l+0x526>
 800b794:	f1b8 0f1f 	cmp.w	r8, #31
 800b798:	dd1e      	ble.n	800b7d8 <_strtod_l+0x5b8>
 800b79a:	2500      	movs	r5, #0
 800b79c:	462e      	mov	r6, r5
 800b79e:	9509      	str	r5, [sp, #36]	; 0x24
 800b7a0:	9507      	str	r5, [sp, #28]
 800b7a2:	2322      	movs	r3, #34	; 0x22
 800b7a4:	f04f 0a00 	mov.w	sl, #0
 800b7a8:	f04f 0b00 	mov.w	fp, #0
 800b7ac:	6023      	str	r3, [r4, #0]
 800b7ae:	e789      	b.n	800b6c4 <_strtod_l+0x4a4>
 800b7b0:	0800ed19 	.word	0x0800ed19
 800b7b4:	0800ed30 	.word	0x0800ed30
 800b7b8:	0800ed10 	.word	0x0800ed10
 800b7bc:	0800ed13 	.word	0x0800ed13
 800b7c0:	0800f042 	.word	0x0800f042
 800b7c4:	0800ef00 	.word	0x0800ef00
 800b7c8:	0800eed8 	.word	0x0800eed8
 800b7cc:	7ff00000 	.word	0x7ff00000
 800b7d0:	7ca00000 	.word	0x7ca00000
 800b7d4:	7fefffff 	.word	0x7fefffff
 800b7d8:	f018 0310 	ands.w	r3, r8, #16
 800b7dc:	bf18      	it	ne
 800b7de:	236a      	movne	r3, #106	; 0x6a
 800b7e0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800bb98 <_strtod_l+0x978>
 800b7e4:	9304      	str	r3, [sp, #16]
 800b7e6:	4650      	mov	r0, sl
 800b7e8:	4659      	mov	r1, fp
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	f018 0f01 	tst.w	r8, #1
 800b7f0:	d004      	beq.n	800b7fc <_strtod_l+0x5dc>
 800b7f2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b7f6:	f7f4 feff 	bl	80005f8 <__aeabi_dmul>
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800b800:	f109 0908 	add.w	r9, r9, #8
 800b804:	d1f2      	bne.n	800b7ec <_strtod_l+0x5cc>
 800b806:	b10b      	cbz	r3, 800b80c <_strtod_l+0x5ec>
 800b808:	4682      	mov	sl, r0
 800b80a:	468b      	mov	fp, r1
 800b80c:	9b04      	ldr	r3, [sp, #16]
 800b80e:	b1bb      	cbz	r3, 800b840 <_strtod_l+0x620>
 800b810:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800b814:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b818:	2b00      	cmp	r3, #0
 800b81a:	4659      	mov	r1, fp
 800b81c:	dd10      	ble.n	800b840 <_strtod_l+0x620>
 800b81e:	2b1f      	cmp	r3, #31
 800b820:	f340 8128 	ble.w	800ba74 <_strtod_l+0x854>
 800b824:	2b34      	cmp	r3, #52	; 0x34
 800b826:	bfde      	ittt	le
 800b828:	3b20      	suble	r3, #32
 800b82a:	f04f 32ff 	movle.w	r2, #4294967295
 800b82e:	fa02 f303 	lslle.w	r3, r2, r3
 800b832:	f04f 0a00 	mov.w	sl, #0
 800b836:	bfcc      	ite	gt
 800b838:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b83c:	ea03 0b01 	andle.w	fp, r3, r1
 800b840:	2200      	movs	r2, #0
 800b842:	2300      	movs	r3, #0
 800b844:	4650      	mov	r0, sl
 800b846:	4659      	mov	r1, fp
 800b848:	f7f5 f93e 	bl	8000ac8 <__aeabi_dcmpeq>
 800b84c:	2800      	cmp	r0, #0
 800b84e:	d1a4      	bne.n	800b79a <_strtod_l+0x57a>
 800b850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b852:	9300      	str	r3, [sp, #0]
 800b854:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b856:	462b      	mov	r3, r5
 800b858:	463a      	mov	r2, r7
 800b85a:	4620      	mov	r0, r4
 800b85c:	f001 fa8c 	bl	800cd78 <__s2b>
 800b860:	9009      	str	r0, [sp, #36]	; 0x24
 800b862:	2800      	cmp	r0, #0
 800b864:	f43f af24 	beq.w	800b6b0 <_strtod_l+0x490>
 800b868:	9b07      	ldr	r3, [sp, #28]
 800b86a:	1b9e      	subs	r6, r3, r6
 800b86c:	9b08      	ldr	r3, [sp, #32]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	bfb4      	ite	lt
 800b872:	4633      	movlt	r3, r6
 800b874:	2300      	movge	r3, #0
 800b876:	9310      	str	r3, [sp, #64]	; 0x40
 800b878:	9b08      	ldr	r3, [sp, #32]
 800b87a:	2500      	movs	r5, #0
 800b87c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b880:	9318      	str	r3, [sp, #96]	; 0x60
 800b882:	462e      	mov	r6, r5
 800b884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b886:	4620      	mov	r0, r4
 800b888:	6859      	ldr	r1, [r3, #4]
 800b88a:	f001 f9c9 	bl	800cc20 <_Balloc>
 800b88e:	9007      	str	r0, [sp, #28]
 800b890:	2800      	cmp	r0, #0
 800b892:	f43f af11 	beq.w	800b6b8 <_strtod_l+0x498>
 800b896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b898:	691a      	ldr	r2, [r3, #16]
 800b89a:	3202      	adds	r2, #2
 800b89c:	f103 010c 	add.w	r1, r3, #12
 800b8a0:	0092      	lsls	r2, r2, #2
 800b8a2:	300c      	adds	r0, #12
 800b8a4:	f7ff fb21 	bl	800aeea <memcpy>
 800b8a8:	ec4b ab10 	vmov	d0, sl, fp
 800b8ac:	aa20      	add	r2, sp, #128	; 0x80
 800b8ae:	a91f      	add	r1, sp, #124	; 0x7c
 800b8b0:	4620      	mov	r0, r4
 800b8b2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800b8b6:	f001 fd9b 	bl	800d3f0 <__d2b>
 800b8ba:	901e      	str	r0, [sp, #120]	; 0x78
 800b8bc:	2800      	cmp	r0, #0
 800b8be:	f43f aefb 	beq.w	800b6b8 <_strtod_l+0x498>
 800b8c2:	2101      	movs	r1, #1
 800b8c4:	4620      	mov	r0, r4
 800b8c6:	f001 faf1 	bl	800ceac <__i2b>
 800b8ca:	4606      	mov	r6, r0
 800b8cc:	2800      	cmp	r0, #0
 800b8ce:	f43f aef3 	beq.w	800b6b8 <_strtod_l+0x498>
 800b8d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b8d4:	9904      	ldr	r1, [sp, #16]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	bfab      	itete	ge
 800b8da:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800b8dc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800b8de:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800b8e0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800b8e4:	bfac      	ite	ge
 800b8e6:	eb03 0902 	addge.w	r9, r3, r2
 800b8ea:	1ad7      	sublt	r7, r2, r3
 800b8ec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b8ee:	eba3 0801 	sub.w	r8, r3, r1
 800b8f2:	4490      	add	r8, r2
 800b8f4:	4ba3      	ldr	r3, [pc, #652]	; (800bb84 <_strtod_l+0x964>)
 800b8f6:	f108 38ff 	add.w	r8, r8, #4294967295
 800b8fa:	4598      	cmp	r8, r3
 800b8fc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b900:	f280 80cc 	bge.w	800ba9c <_strtod_l+0x87c>
 800b904:	eba3 0308 	sub.w	r3, r3, r8
 800b908:	2b1f      	cmp	r3, #31
 800b90a:	eba2 0203 	sub.w	r2, r2, r3
 800b90e:	f04f 0101 	mov.w	r1, #1
 800b912:	f300 80b6 	bgt.w	800ba82 <_strtod_l+0x862>
 800b916:	fa01 f303 	lsl.w	r3, r1, r3
 800b91a:	9311      	str	r3, [sp, #68]	; 0x44
 800b91c:	2300      	movs	r3, #0
 800b91e:	930c      	str	r3, [sp, #48]	; 0x30
 800b920:	eb09 0802 	add.w	r8, r9, r2
 800b924:	9b04      	ldr	r3, [sp, #16]
 800b926:	45c1      	cmp	r9, r8
 800b928:	4417      	add	r7, r2
 800b92a:	441f      	add	r7, r3
 800b92c:	464b      	mov	r3, r9
 800b92e:	bfa8      	it	ge
 800b930:	4643      	movge	r3, r8
 800b932:	42bb      	cmp	r3, r7
 800b934:	bfa8      	it	ge
 800b936:	463b      	movge	r3, r7
 800b938:	2b00      	cmp	r3, #0
 800b93a:	bfc2      	ittt	gt
 800b93c:	eba8 0803 	subgt.w	r8, r8, r3
 800b940:	1aff      	subgt	r7, r7, r3
 800b942:	eba9 0903 	subgt.w	r9, r9, r3
 800b946:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b948:	2b00      	cmp	r3, #0
 800b94a:	dd17      	ble.n	800b97c <_strtod_l+0x75c>
 800b94c:	4631      	mov	r1, r6
 800b94e:	461a      	mov	r2, r3
 800b950:	4620      	mov	r0, r4
 800b952:	f001 fb67 	bl	800d024 <__pow5mult>
 800b956:	4606      	mov	r6, r0
 800b958:	2800      	cmp	r0, #0
 800b95a:	f43f aead 	beq.w	800b6b8 <_strtod_l+0x498>
 800b95e:	4601      	mov	r1, r0
 800b960:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b962:	4620      	mov	r0, r4
 800b964:	f001 fab8 	bl	800ced8 <__multiply>
 800b968:	900f      	str	r0, [sp, #60]	; 0x3c
 800b96a:	2800      	cmp	r0, #0
 800b96c:	f43f aea4 	beq.w	800b6b8 <_strtod_l+0x498>
 800b970:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b972:	4620      	mov	r0, r4
 800b974:	f001 f994 	bl	800cca0 <_Bfree>
 800b978:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b97a:	931e      	str	r3, [sp, #120]	; 0x78
 800b97c:	f1b8 0f00 	cmp.w	r8, #0
 800b980:	f300 8091 	bgt.w	800baa6 <_strtod_l+0x886>
 800b984:	9b08      	ldr	r3, [sp, #32]
 800b986:	2b00      	cmp	r3, #0
 800b988:	dd08      	ble.n	800b99c <_strtod_l+0x77c>
 800b98a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b98c:	9907      	ldr	r1, [sp, #28]
 800b98e:	4620      	mov	r0, r4
 800b990:	f001 fb48 	bl	800d024 <__pow5mult>
 800b994:	9007      	str	r0, [sp, #28]
 800b996:	2800      	cmp	r0, #0
 800b998:	f43f ae8e 	beq.w	800b6b8 <_strtod_l+0x498>
 800b99c:	2f00      	cmp	r7, #0
 800b99e:	dd08      	ble.n	800b9b2 <_strtod_l+0x792>
 800b9a0:	9907      	ldr	r1, [sp, #28]
 800b9a2:	463a      	mov	r2, r7
 800b9a4:	4620      	mov	r0, r4
 800b9a6:	f001 fb97 	bl	800d0d8 <__lshift>
 800b9aa:	9007      	str	r0, [sp, #28]
 800b9ac:	2800      	cmp	r0, #0
 800b9ae:	f43f ae83 	beq.w	800b6b8 <_strtod_l+0x498>
 800b9b2:	f1b9 0f00 	cmp.w	r9, #0
 800b9b6:	dd08      	ble.n	800b9ca <_strtod_l+0x7aa>
 800b9b8:	4631      	mov	r1, r6
 800b9ba:	464a      	mov	r2, r9
 800b9bc:	4620      	mov	r0, r4
 800b9be:	f001 fb8b 	bl	800d0d8 <__lshift>
 800b9c2:	4606      	mov	r6, r0
 800b9c4:	2800      	cmp	r0, #0
 800b9c6:	f43f ae77 	beq.w	800b6b8 <_strtod_l+0x498>
 800b9ca:	9a07      	ldr	r2, [sp, #28]
 800b9cc:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b9ce:	4620      	mov	r0, r4
 800b9d0:	f001 fc0a 	bl	800d1e8 <__mdiff>
 800b9d4:	4605      	mov	r5, r0
 800b9d6:	2800      	cmp	r0, #0
 800b9d8:	f43f ae6e 	beq.w	800b6b8 <_strtod_l+0x498>
 800b9dc:	68c3      	ldr	r3, [r0, #12]
 800b9de:	930f      	str	r3, [sp, #60]	; 0x3c
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	60c3      	str	r3, [r0, #12]
 800b9e4:	4631      	mov	r1, r6
 800b9e6:	f001 fbe3 	bl	800d1b0 <__mcmp>
 800b9ea:	2800      	cmp	r0, #0
 800b9ec:	da65      	bge.n	800baba <_strtod_l+0x89a>
 800b9ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b9f0:	ea53 030a 	orrs.w	r3, r3, sl
 800b9f4:	f040 8087 	bne.w	800bb06 <_strtod_l+0x8e6>
 800b9f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	f040 8082 	bne.w	800bb06 <_strtod_l+0x8e6>
 800ba02:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ba06:	0d1b      	lsrs	r3, r3, #20
 800ba08:	051b      	lsls	r3, r3, #20
 800ba0a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ba0e:	d97a      	bls.n	800bb06 <_strtod_l+0x8e6>
 800ba10:	696b      	ldr	r3, [r5, #20]
 800ba12:	b913      	cbnz	r3, 800ba1a <_strtod_l+0x7fa>
 800ba14:	692b      	ldr	r3, [r5, #16]
 800ba16:	2b01      	cmp	r3, #1
 800ba18:	dd75      	ble.n	800bb06 <_strtod_l+0x8e6>
 800ba1a:	4629      	mov	r1, r5
 800ba1c:	2201      	movs	r2, #1
 800ba1e:	4620      	mov	r0, r4
 800ba20:	f001 fb5a 	bl	800d0d8 <__lshift>
 800ba24:	4631      	mov	r1, r6
 800ba26:	4605      	mov	r5, r0
 800ba28:	f001 fbc2 	bl	800d1b0 <__mcmp>
 800ba2c:	2800      	cmp	r0, #0
 800ba2e:	dd6a      	ble.n	800bb06 <_strtod_l+0x8e6>
 800ba30:	9904      	ldr	r1, [sp, #16]
 800ba32:	4a55      	ldr	r2, [pc, #340]	; (800bb88 <_strtod_l+0x968>)
 800ba34:	465b      	mov	r3, fp
 800ba36:	2900      	cmp	r1, #0
 800ba38:	f000 8085 	beq.w	800bb46 <_strtod_l+0x926>
 800ba3c:	ea02 010b 	and.w	r1, r2, fp
 800ba40:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ba44:	dc7f      	bgt.n	800bb46 <_strtod_l+0x926>
 800ba46:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ba4a:	f77f aeaa 	ble.w	800b7a2 <_strtod_l+0x582>
 800ba4e:	4a4f      	ldr	r2, [pc, #316]	; (800bb8c <_strtod_l+0x96c>)
 800ba50:	2300      	movs	r3, #0
 800ba52:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800ba56:	4650      	mov	r0, sl
 800ba58:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800ba5c:	4659      	mov	r1, fp
 800ba5e:	f7f4 fdcb 	bl	80005f8 <__aeabi_dmul>
 800ba62:	460b      	mov	r3, r1
 800ba64:	4303      	orrs	r3, r0
 800ba66:	bf08      	it	eq
 800ba68:	2322      	moveq	r3, #34	; 0x22
 800ba6a:	4682      	mov	sl, r0
 800ba6c:	468b      	mov	fp, r1
 800ba6e:	bf08      	it	eq
 800ba70:	6023      	streq	r3, [r4, #0]
 800ba72:	e62b      	b.n	800b6cc <_strtod_l+0x4ac>
 800ba74:	f04f 32ff 	mov.w	r2, #4294967295
 800ba78:	fa02 f303 	lsl.w	r3, r2, r3
 800ba7c:	ea03 0a0a 	and.w	sl, r3, sl
 800ba80:	e6de      	b.n	800b840 <_strtod_l+0x620>
 800ba82:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800ba86:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800ba8a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800ba8e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800ba92:	fa01 f308 	lsl.w	r3, r1, r8
 800ba96:	930c      	str	r3, [sp, #48]	; 0x30
 800ba98:	9111      	str	r1, [sp, #68]	; 0x44
 800ba9a:	e741      	b.n	800b920 <_strtod_l+0x700>
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	930c      	str	r3, [sp, #48]	; 0x30
 800baa0:	2301      	movs	r3, #1
 800baa2:	9311      	str	r3, [sp, #68]	; 0x44
 800baa4:	e73c      	b.n	800b920 <_strtod_l+0x700>
 800baa6:	991e      	ldr	r1, [sp, #120]	; 0x78
 800baa8:	4642      	mov	r2, r8
 800baaa:	4620      	mov	r0, r4
 800baac:	f001 fb14 	bl	800d0d8 <__lshift>
 800bab0:	901e      	str	r0, [sp, #120]	; 0x78
 800bab2:	2800      	cmp	r0, #0
 800bab4:	f47f af66 	bne.w	800b984 <_strtod_l+0x764>
 800bab8:	e5fe      	b.n	800b6b8 <_strtod_l+0x498>
 800baba:	465f      	mov	r7, fp
 800babc:	d16e      	bne.n	800bb9c <_strtod_l+0x97c>
 800babe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bac0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bac4:	b342      	cbz	r2, 800bb18 <_strtod_l+0x8f8>
 800bac6:	4a32      	ldr	r2, [pc, #200]	; (800bb90 <_strtod_l+0x970>)
 800bac8:	4293      	cmp	r3, r2
 800baca:	d128      	bne.n	800bb1e <_strtod_l+0x8fe>
 800bacc:	9b04      	ldr	r3, [sp, #16]
 800bace:	4650      	mov	r0, sl
 800bad0:	b1eb      	cbz	r3, 800bb0e <_strtod_l+0x8ee>
 800bad2:	4a2d      	ldr	r2, [pc, #180]	; (800bb88 <_strtod_l+0x968>)
 800bad4:	403a      	ands	r2, r7
 800bad6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800bada:	f04f 31ff 	mov.w	r1, #4294967295
 800bade:	d819      	bhi.n	800bb14 <_strtod_l+0x8f4>
 800bae0:	0d12      	lsrs	r2, r2, #20
 800bae2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800bae6:	fa01 f303 	lsl.w	r3, r1, r3
 800baea:	4298      	cmp	r0, r3
 800baec:	d117      	bne.n	800bb1e <_strtod_l+0x8fe>
 800baee:	4b29      	ldr	r3, [pc, #164]	; (800bb94 <_strtod_l+0x974>)
 800baf0:	429f      	cmp	r7, r3
 800baf2:	d102      	bne.n	800bafa <_strtod_l+0x8da>
 800baf4:	3001      	adds	r0, #1
 800baf6:	f43f addf 	beq.w	800b6b8 <_strtod_l+0x498>
 800bafa:	4b23      	ldr	r3, [pc, #140]	; (800bb88 <_strtod_l+0x968>)
 800bafc:	403b      	ands	r3, r7
 800bafe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800bb02:	f04f 0a00 	mov.w	sl, #0
 800bb06:	9b04      	ldr	r3, [sp, #16]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d1a0      	bne.n	800ba4e <_strtod_l+0x82e>
 800bb0c:	e5de      	b.n	800b6cc <_strtod_l+0x4ac>
 800bb0e:	f04f 33ff 	mov.w	r3, #4294967295
 800bb12:	e7ea      	b.n	800baea <_strtod_l+0x8ca>
 800bb14:	460b      	mov	r3, r1
 800bb16:	e7e8      	b.n	800baea <_strtod_l+0x8ca>
 800bb18:	ea53 030a 	orrs.w	r3, r3, sl
 800bb1c:	d088      	beq.n	800ba30 <_strtod_l+0x810>
 800bb1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb20:	b1db      	cbz	r3, 800bb5a <_strtod_l+0x93a>
 800bb22:	423b      	tst	r3, r7
 800bb24:	d0ef      	beq.n	800bb06 <_strtod_l+0x8e6>
 800bb26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bb28:	9a04      	ldr	r2, [sp, #16]
 800bb2a:	4650      	mov	r0, sl
 800bb2c:	4659      	mov	r1, fp
 800bb2e:	b1c3      	cbz	r3, 800bb62 <_strtod_l+0x942>
 800bb30:	f7ff fb59 	bl	800b1e6 <sulp>
 800bb34:	4602      	mov	r2, r0
 800bb36:	460b      	mov	r3, r1
 800bb38:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bb3c:	f7f4 fba6 	bl	800028c <__adddf3>
 800bb40:	4682      	mov	sl, r0
 800bb42:	468b      	mov	fp, r1
 800bb44:	e7df      	b.n	800bb06 <_strtod_l+0x8e6>
 800bb46:	4013      	ands	r3, r2
 800bb48:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800bb4c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bb50:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bb54:	f04f 3aff 	mov.w	sl, #4294967295
 800bb58:	e7d5      	b.n	800bb06 <_strtod_l+0x8e6>
 800bb5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bb5c:	ea13 0f0a 	tst.w	r3, sl
 800bb60:	e7e0      	b.n	800bb24 <_strtod_l+0x904>
 800bb62:	f7ff fb40 	bl	800b1e6 <sulp>
 800bb66:	4602      	mov	r2, r0
 800bb68:	460b      	mov	r3, r1
 800bb6a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bb6e:	f7f4 fb8b 	bl	8000288 <__aeabi_dsub>
 800bb72:	2200      	movs	r2, #0
 800bb74:	2300      	movs	r3, #0
 800bb76:	4682      	mov	sl, r0
 800bb78:	468b      	mov	fp, r1
 800bb7a:	f7f4 ffa5 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb7e:	2800      	cmp	r0, #0
 800bb80:	d0c1      	beq.n	800bb06 <_strtod_l+0x8e6>
 800bb82:	e60e      	b.n	800b7a2 <_strtod_l+0x582>
 800bb84:	fffffc02 	.word	0xfffffc02
 800bb88:	7ff00000 	.word	0x7ff00000
 800bb8c:	39500000 	.word	0x39500000
 800bb90:	000fffff 	.word	0x000fffff
 800bb94:	7fefffff 	.word	0x7fefffff
 800bb98:	0800ed48 	.word	0x0800ed48
 800bb9c:	4631      	mov	r1, r6
 800bb9e:	4628      	mov	r0, r5
 800bba0:	f001 fc82 	bl	800d4a8 <__ratio>
 800bba4:	ec59 8b10 	vmov	r8, r9, d0
 800bba8:	ee10 0a10 	vmov	r0, s0
 800bbac:	2200      	movs	r2, #0
 800bbae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bbb2:	4649      	mov	r1, r9
 800bbb4:	f7f4 ff9c 	bl	8000af0 <__aeabi_dcmple>
 800bbb8:	2800      	cmp	r0, #0
 800bbba:	d07c      	beq.n	800bcb6 <_strtod_l+0xa96>
 800bbbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d04c      	beq.n	800bc5c <_strtod_l+0xa3c>
 800bbc2:	4b95      	ldr	r3, [pc, #596]	; (800be18 <_strtod_l+0xbf8>)
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800bbca:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800be18 <_strtod_l+0xbf8>
 800bbce:	f04f 0800 	mov.w	r8, #0
 800bbd2:	4b92      	ldr	r3, [pc, #584]	; (800be1c <_strtod_l+0xbfc>)
 800bbd4:	403b      	ands	r3, r7
 800bbd6:	9311      	str	r3, [sp, #68]	; 0x44
 800bbd8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bbda:	4b91      	ldr	r3, [pc, #580]	; (800be20 <_strtod_l+0xc00>)
 800bbdc:	429a      	cmp	r2, r3
 800bbde:	f040 80b2 	bne.w	800bd46 <_strtod_l+0xb26>
 800bbe2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bbe6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bbea:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800bbee:	ec4b ab10 	vmov	d0, sl, fp
 800bbf2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800bbf6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bbfa:	f001 fb7d 	bl	800d2f8 <__ulp>
 800bbfe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bc02:	ec53 2b10 	vmov	r2, r3, d0
 800bc06:	f7f4 fcf7 	bl	80005f8 <__aeabi_dmul>
 800bc0a:	4652      	mov	r2, sl
 800bc0c:	465b      	mov	r3, fp
 800bc0e:	f7f4 fb3d 	bl	800028c <__adddf3>
 800bc12:	460b      	mov	r3, r1
 800bc14:	4981      	ldr	r1, [pc, #516]	; (800be1c <_strtod_l+0xbfc>)
 800bc16:	4a83      	ldr	r2, [pc, #524]	; (800be24 <_strtod_l+0xc04>)
 800bc18:	4019      	ands	r1, r3
 800bc1a:	4291      	cmp	r1, r2
 800bc1c:	4682      	mov	sl, r0
 800bc1e:	d95e      	bls.n	800bcde <_strtod_l+0xabe>
 800bc20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc22:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800bc26:	4293      	cmp	r3, r2
 800bc28:	d103      	bne.n	800bc32 <_strtod_l+0xa12>
 800bc2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc2c:	3301      	adds	r3, #1
 800bc2e:	f43f ad43 	beq.w	800b6b8 <_strtod_l+0x498>
 800bc32:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800be30 <_strtod_l+0xc10>
 800bc36:	f04f 3aff 	mov.w	sl, #4294967295
 800bc3a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800bc3c:	4620      	mov	r0, r4
 800bc3e:	f001 f82f 	bl	800cca0 <_Bfree>
 800bc42:	9907      	ldr	r1, [sp, #28]
 800bc44:	4620      	mov	r0, r4
 800bc46:	f001 f82b 	bl	800cca0 <_Bfree>
 800bc4a:	4631      	mov	r1, r6
 800bc4c:	4620      	mov	r0, r4
 800bc4e:	f001 f827 	bl	800cca0 <_Bfree>
 800bc52:	4629      	mov	r1, r5
 800bc54:	4620      	mov	r0, r4
 800bc56:	f001 f823 	bl	800cca0 <_Bfree>
 800bc5a:	e613      	b.n	800b884 <_strtod_l+0x664>
 800bc5c:	f1ba 0f00 	cmp.w	sl, #0
 800bc60:	d11b      	bne.n	800bc9a <_strtod_l+0xa7a>
 800bc62:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bc66:	b9f3      	cbnz	r3, 800bca6 <_strtod_l+0xa86>
 800bc68:	4b6b      	ldr	r3, [pc, #428]	; (800be18 <_strtod_l+0xbf8>)
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	4640      	mov	r0, r8
 800bc6e:	4649      	mov	r1, r9
 800bc70:	f7f4 ff34 	bl	8000adc <__aeabi_dcmplt>
 800bc74:	b9d0      	cbnz	r0, 800bcac <_strtod_l+0xa8c>
 800bc76:	4640      	mov	r0, r8
 800bc78:	4649      	mov	r1, r9
 800bc7a:	4b6b      	ldr	r3, [pc, #428]	; (800be28 <_strtod_l+0xc08>)
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	f7f4 fcbb 	bl	80005f8 <__aeabi_dmul>
 800bc82:	4680      	mov	r8, r0
 800bc84:	4689      	mov	r9, r1
 800bc86:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bc8a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800bc8e:	931b      	str	r3, [sp, #108]	; 0x6c
 800bc90:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800bc94:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800bc98:	e79b      	b.n	800bbd2 <_strtod_l+0x9b2>
 800bc9a:	f1ba 0f01 	cmp.w	sl, #1
 800bc9e:	d102      	bne.n	800bca6 <_strtod_l+0xa86>
 800bca0:	2f00      	cmp	r7, #0
 800bca2:	f43f ad7e 	beq.w	800b7a2 <_strtod_l+0x582>
 800bca6:	4b61      	ldr	r3, [pc, #388]	; (800be2c <_strtod_l+0xc0c>)
 800bca8:	2200      	movs	r2, #0
 800bcaa:	e78c      	b.n	800bbc6 <_strtod_l+0x9a6>
 800bcac:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800be28 <_strtod_l+0xc08>
 800bcb0:	f04f 0800 	mov.w	r8, #0
 800bcb4:	e7e7      	b.n	800bc86 <_strtod_l+0xa66>
 800bcb6:	4b5c      	ldr	r3, [pc, #368]	; (800be28 <_strtod_l+0xc08>)
 800bcb8:	4640      	mov	r0, r8
 800bcba:	4649      	mov	r1, r9
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	f7f4 fc9b 	bl	80005f8 <__aeabi_dmul>
 800bcc2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bcc4:	4680      	mov	r8, r0
 800bcc6:	4689      	mov	r9, r1
 800bcc8:	b933      	cbnz	r3, 800bcd8 <_strtod_l+0xab8>
 800bcca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bcce:	9012      	str	r0, [sp, #72]	; 0x48
 800bcd0:	9313      	str	r3, [sp, #76]	; 0x4c
 800bcd2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800bcd6:	e7dd      	b.n	800bc94 <_strtod_l+0xa74>
 800bcd8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800bcdc:	e7f9      	b.n	800bcd2 <_strtod_l+0xab2>
 800bcde:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800bce2:	9b04      	ldr	r3, [sp, #16]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d1a8      	bne.n	800bc3a <_strtod_l+0xa1a>
 800bce8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bcec:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bcee:	0d1b      	lsrs	r3, r3, #20
 800bcf0:	051b      	lsls	r3, r3, #20
 800bcf2:	429a      	cmp	r2, r3
 800bcf4:	d1a1      	bne.n	800bc3a <_strtod_l+0xa1a>
 800bcf6:	4640      	mov	r0, r8
 800bcf8:	4649      	mov	r1, r9
 800bcfa:	f7f4 ffc7 	bl	8000c8c <__aeabi_d2lz>
 800bcfe:	f7f4 fc4d 	bl	800059c <__aeabi_l2d>
 800bd02:	4602      	mov	r2, r0
 800bd04:	460b      	mov	r3, r1
 800bd06:	4640      	mov	r0, r8
 800bd08:	4649      	mov	r1, r9
 800bd0a:	f7f4 fabd 	bl	8000288 <__aeabi_dsub>
 800bd0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bd10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bd14:	ea43 030a 	orr.w	r3, r3, sl
 800bd18:	4313      	orrs	r3, r2
 800bd1a:	4680      	mov	r8, r0
 800bd1c:	4689      	mov	r9, r1
 800bd1e:	d053      	beq.n	800bdc8 <_strtod_l+0xba8>
 800bd20:	a335      	add	r3, pc, #212	; (adr r3, 800bdf8 <_strtod_l+0xbd8>)
 800bd22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd26:	f7f4 fed9 	bl	8000adc <__aeabi_dcmplt>
 800bd2a:	2800      	cmp	r0, #0
 800bd2c:	f47f acce 	bne.w	800b6cc <_strtod_l+0x4ac>
 800bd30:	a333      	add	r3, pc, #204	; (adr r3, 800be00 <_strtod_l+0xbe0>)
 800bd32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd36:	4640      	mov	r0, r8
 800bd38:	4649      	mov	r1, r9
 800bd3a:	f7f4 feed 	bl	8000b18 <__aeabi_dcmpgt>
 800bd3e:	2800      	cmp	r0, #0
 800bd40:	f43f af7b 	beq.w	800bc3a <_strtod_l+0xa1a>
 800bd44:	e4c2      	b.n	800b6cc <_strtod_l+0x4ac>
 800bd46:	9b04      	ldr	r3, [sp, #16]
 800bd48:	b333      	cbz	r3, 800bd98 <_strtod_l+0xb78>
 800bd4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bd4c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bd50:	d822      	bhi.n	800bd98 <_strtod_l+0xb78>
 800bd52:	a32d      	add	r3, pc, #180	; (adr r3, 800be08 <_strtod_l+0xbe8>)
 800bd54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd58:	4640      	mov	r0, r8
 800bd5a:	4649      	mov	r1, r9
 800bd5c:	f7f4 fec8 	bl	8000af0 <__aeabi_dcmple>
 800bd60:	b1a0      	cbz	r0, 800bd8c <_strtod_l+0xb6c>
 800bd62:	4649      	mov	r1, r9
 800bd64:	4640      	mov	r0, r8
 800bd66:	f7f4 ff09 	bl	8000b7c <__aeabi_d2uiz>
 800bd6a:	2801      	cmp	r0, #1
 800bd6c:	bf38      	it	cc
 800bd6e:	2001      	movcc	r0, #1
 800bd70:	f7f4 fbc8 	bl	8000504 <__aeabi_ui2d>
 800bd74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bd76:	4680      	mov	r8, r0
 800bd78:	4689      	mov	r9, r1
 800bd7a:	bb13      	cbnz	r3, 800bdc2 <_strtod_l+0xba2>
 800bd7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bd80:	9014      	str	r0, [sp, #80]	; 0x50
 800bd82:	9315      	str	r3, [sp, #84]	; 0x54
 800bd84:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800bd88:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800bd8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd8e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bd90:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800bd94:	1a9b      	subs	r3, r3, r2
 800bd96:	930d      	str	r3, [sp, #52]	; 0x34
 800bd98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bd9c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800bda0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bda4:	f001 faa8 	bl	800d2f8 <__ulp>
 800bda8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bdac:	ec53 2b10 	vmov	r2, r3, d0
 800bdb0:	f7f4 fc22 	bl	80005f8 <__aeabi_dmul>
 800bdb4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bdb8:	f7f4 fa68 	bl	800028c <__adddf3>
 800bdbc:	4682      	mov	sl, r0
 800bdbe:	468b      	mov	fp, r1
 800bdc0:	e78f      	b.n	800bce2 <_strtod_l+0xac2>
 800bdc2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800bdc6:	e7dd      	b.n	800bd84 <_strtod_l+0xb64>
 800bdc8:	a311      	add	r3, pc, #68	; (adr r3, 800be10 <_strtod_l+0xbf0>)
 800bdca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdce:	f7f4 fe85 	bl	8000adc <__aeabi_dcmplt>
 800bdd2:	e7b4      	b.n	800bd3e <_strtod_l+0xb1e>
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	930e      	str	r3, [sp, #56]	; 0x38
 800bdd8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800bdda:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bddc:	6013      	str	r3, [r2, #0]
 800bdde:	f7ff ba65 	b.w	800b2ac <_strtod_l+0x8c>
 800bde2:	2b65      	cmp	r3, #101	; 0x65
 800bde4:	f43f ab5d 	beq.w	800b4a2 <_strtod_l+0x282>
 800bde8:	2b45      	cmp	r3, #69	; 0x45
 800bdea:	f43f ab5a 	beq.w	800b4a2 <_strtod_l+0x282>
 800bdee:	2201      	movs	r2, #1
 800bdf0:	f7ff bb92 	b.w	800b518 <_strtod_l+0x2f8>
 800bdf4:	f3af 8000 	nop.w
 800bdf8:	94a03595 	.word	0x94a03595
 800bdfc:	3fdfffff 	.word	0x3fdfffff
 800be00:	35afe535 	.word	0x35afe535
 800be04:	3fe00000 	.word	0x3fe00000
 800be08:	ffc00000 	.word	0xffc00000
 800be0c:	41dfffff 	.word	0x41dfffff
 800be10:	94a03595 	.word	0x94a03595
 800be14:	3fcfffff 	.word	0x3fcfffff
 800be18:	3ff00000 	.word	0x3ff00000
 800be1c:	7ff00000 	.word	0x7ff00000
 800be20:	7fe00000 	.word	0x7fe00000
 800be24:	7c9fffff 	.word	0x7c9fffff
 800be28:	3fe00000 	.word	0x3fe00000
 800be2c:	bff00000 	.word	0xbff00000
 800be30:	7fefffff 	.word	0x7fefffff

0800be34 <strtod>:
 800be34:	460a      	mov	r2, r1
 800be36:	4601      	mov	r1, r0
 800be38:	4802      	ldr	r0, [pc, #8]	; (800be44 <strtod+0x10>)
 800be3a:	4b03      	ldr	r3, [pc, #12]	; (800be48 <strtod+0x14>)
 800be3c:	6800      	ldr	r0, [r0, #0]
 800be3e:	f7ff b9ef 	b.w	800b220 <_strtod_l>
 800be42:	bf00      	nop
 800be44:	20000a7c 	.word	0x20000a7c
 800be48:	20000ae4 	.word	0x20000ae4

0800be4c <_strtol_l.isra.0>:
 800be4c:	2b01      	cmp	r3, #1
 800be4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be52:	d001      	beq.n	800be58 <_strtol_l.isra.0+0xc>
 800be54:	2b24      	cmp	r3, #36	; 0x24
 800be56:	d906      	bls.n	800be66 <_strtol_l.isra.0+0x1a>
 800be58:	f7ff f81a 	bl	800ae90 <__errno>
 800be5c:	2316      	movs	r3, #22
 800be5e:	6003      	str	r3, [r0, #0]
 800be60:	2000      	movs	r0, #0
 800be62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be66:	4f3a      	ldr	r7, [pc, #232]	; (800bf50 <_strtol_l.isra.0+0x104>)
 800be68:	468e      	mov	lr, r1
 800be6a:	4676      	mov	r6, lr
 800be6c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800be70:	5de5      	ldrb	r5, [r4, r7]
 800be72:	f015 0508 	ands.w	r5, r5, #8
 800be76:	d1f8      	bne.n	800be6a <_strtol_l.isra.0+0x1e>
 800be78:	2c2d      	cmp	r4, #45	; 0x2d
 800be7a:	d134      	bne.n	800bee6 <_strtol_l.isra.0+0x9a>
 800be7c:	f89e 4000 	ldrb.w	r4, [lr]
 800be80:	f04f 0801 	mov.w	r8, #1
 800be84:	f106 0e02 	add.w	lr, r6, #2
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d05c      	beq.n	800bf46 <_strtol_l.isra.0+0xfa>
 800be8c:	2b10      	cmp	r3, #16
 800be8e:	d10c      	bne.n	800beaa <_strtol_l.isra.0+0x5e>
 800be90:	2c30      	cmp	r4, #48	; 0x30
 800be92:	d10a      	bne.n	800beaa <_strtol_l.isra.0+0x5e>
 800be94:	f89e 4000 	ldrb.w	r4, [lr]
 800be98:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800be9c:	2c58      	cmp	r4, #88	; 0x58
 800be9e:	d14d      	bne.n	800bf3c <_strtol_l.isra.0+0xf0>
 800bea0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800bea4:	2310      	movs	r3, #16
 800bea6:	f10e 0e02 	add.w	lr, lr, #2
 800beaa:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800beae:	f10c 3cff 	add.w	ip, ip, #4294967295
 800beb2:	2600      	movs	r6, #0
 800beb4:	fbbc f9f3 	udiv	r9, ip, r3
 800beb8:	4635      	mov	r5, r6
 800beba:	fb03 ca19 	mls	sl, r3, r9, ip
 800bebe:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800bec2:	2f09      	cmp	r7, #9
 800bec4:	d818      	bhi.n	800bef8 <_strtol_l.isra.0+0xac>
 800bec6:	463c      	mov	r4, r7
 800bec8:	42a3      	cmp	r3, r4
 800beca:	dd24      	ble.n	800bf16 <_strtol_l.isra.0+0xca>
 800becc:	2e00      	cmp	r6, #0
 800bece:	db1f      	blt.n	800bf10 <_strtol_l.isra.0+0xc4>
 800bed0:	45a9      	cmp	r9, r5
 800bed2:	d31d      	bcc.n	800bf10 <_strtol_l.isra.0+0xc4>
 800bed4:	d101      	bne.n	800beda <_strtol_l.isra.0+0x8e>
 800bed6:	45a2      	cmp	sl, r4
 800bed8:	db1a      	blt.n	800bf10 <_strtol_l.isra.0+0xc4>
 800beda:	fb05 4503 	mla	r5, r5, r3, r4
 800bede:	2601      	movs	r6, #1
 800bee0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800bee4:	e7eb      	b.n	800bebe <_strtol_l.isra.0+0x72>
 800bee6:	2c2b      	cmp	r4, #43	; 0x2b
 800bee8:	bf08      	it	eq
 800beea:	f89e 4000 	ldrbeq.w	r4, [lr]
 800beee:	46a8      	mov	r8, r5
 800bef0:	bf08      	it	eq
 800bef2:	f106 0e02 	addeq.w	lr, r6, #2
 800bef6:	e7c7      	b.n	800be88 <_strtol_l.isra.0+0x3c>
 800bef8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800befc:	2f19      	cmp	r7, #25
 800befe:	d801      	bhi.n	800bf04 <_strtol_l.isra.0+0xb8>
 800bf00:	3c37      	subs	r4, #55	; 0x37
 800bf02:	e7e1      	b.n	800bec8 <_strtol_l.isra.0+0x7c>
 800bf04:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800bf08:	2f19      	cmp	r7, #25
 800bf0a:	d804      	bhi.n	800bf16 <_strtol_l.isra.0+0xca>
 800bf0c:	3c57      	subs	r4, #87	; 0x57
 800bf0e:	e7db      	b.n	800bec8 <_strtol_l.isra.0+0x7c>
 800bf10:	f04f 36ff 	mov.w	r6, #4294967295
 800bf14:	e7e4      	b.n	800bee0 <_strtol_l.isra.0+0x94>
 800bf16:	2e00      	cmp	r6, #0
 800bf18:	da05      	bge.n	800bf26 <_strtol_l.isra.0+0xda>
 800bf1a:	2322      	movs	r3, #34	; 0x22
 800bf1c:	6003      	str	r3, [r0, #0]
 800bf1e:	4665      	mov	r5, ip
 800bf20:	b942      	cbnz	r2, 800bf34 <_strtol_l.isra.0+0xe8>
 800bf22:	4628      	mov	r0, r5
 800bf24:	e79d      	b.n	800be62 <_strtol_l.isra.0+0x16>
 800bf26:	f1b8 0f00 	cmp.w	r8, #0
 800bf2a:	d000      	beq.n	800bf2e <_strtol_l.isra.0+0xe2>
 800bf2c:	426d      	negs	r5, r5
 800bf2e:	2a00      	cmp	r2, #0
 800bf30:	d0f7      	beq.n	800bf22 <_strtol_l.isra.0+0xd6>
 800bf32:	b10e      	cbz	r6, 800bf38 <_strtol_l.isra.0+0xec>
 800bf34:	f10e 31ff 	add.w	r1, lr, #4294967295
 800bf38:	6011      	str	r1, [r2, #0]
 800bf3a:	e7f2      	b.n	800bf22 <_strtol_l.isra.0+0xd6>
 800bf3c:	2430      	movs	r4, #48	; 0x30
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d1b3      	bne.n	800beaa <_strtol_l.isra.0+0x5e>
 800bf42:	2308      	movs	r3, #8
 800bf44:	e7b1      	b.n	800beaa <_strtol_l.isra.0+0x5e>
 800bf46:	2c30      	cmp	r4, #48	; 0x30
 800bf48:	d0a4      	beq.n	800be94 <_strtol_l.isra.0+0x48>
 800bf4a:	230a      	movs	r3, #10
 800bf4c:	e7ad      	b.n	800beaa <_strtol_l.isra.0+0x5e>
 800bf4e:	bf00      	nop
 800bf50:	0800ec09 	.word	0x0800ec09

0800bf54 <strtol>:
 800bf54:	4613      	mov	r3, r2
 800bf56:	460a      	mov	r2, r1
 800bf58:	4601      	mov	r1, r0
 800bf5a:	4802      	ldr	r0, [pc, #8]	; (800bf64 <strtol+0x10>)
 800bf5c:	6800      	ldr	r0, [r0, #0]
 800bf5e:	f7ff bf75 	b.w	800be4c <_strtol_l.isra.0>
 800bf62:	bf00      	nop
 800bf64:	20000a7c 	.word	0x20000a7c

0800bf68 <__swbuf_r>:
 800bf68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf6a:	460e      	mov	r6, r1
 800bf6c:	4614      	mov	r4, r2
 800bf6e:	4605      	mov	r5, r0
 800bf70:	b118      	cbz	r0, 800bf7a <__swbuf_r+0x12>
 800bf72:	6983      	ldr	r3, [r0, #24]
 800bf74:	b90b      	cbnz	r3, 800bf7a <__swbuf_r+0x12>
 800bf76:	f000 f9d1 	bl	800c31c <__sinit>
 800bf7a:	4b21      	ldr	r3, [pc, #132]	; (800c000 <__swbuf_r+0x98>)
 800bf7c:	429c      	cmp	r4, r3
 800bf7e:	d12b      	bne.n	800bfd8 <__swbuf_r+0x70>
 800bf80:	686c      	ldr	r4, [r5, #4]
 800bf82:	69a3      	ldr	r3, [r4, #24]
 800bf84:	60a3      	str	r3, [r4, #8]
 800bf86:	89a3      	ldrh	r3, [r4, #12]
 800bf88:	071a      	lsls	r2, r3, #28
 800bf8a:	d52f      	bpl.n	800bfec <__swbuf_r+0x84>
 800bf8c:	6923      	ldr	r3, [r4, #16]
 800bf8e:	b36b      	cbz	r3, 800bfec <__swbuf_r+0x84>
 800bf90:	6923      	ldr	r3, [r4, #16]
 800bf92:	6820      	ldr	r0, [r4, #0]
 800bf94:	1ac0      	subs	r0, r0, r3
 800bf96:	6963      	ldr	r3, [r4, #20]
 800bf98:	b2f6      	uxtb	r6, r6
 800bf9a:	4283      	cmp	r3, r0
 800bf9c:	4637      	mov	r7, r6
 800bf9e:	dc04      	bgt.n	800bfaa <__swbuf_r+0x42>
 800bfa0:	4621      	mov	r1, r4
 800bfa2:	4628      	mov	r0, r5
 800bfa4:	f000 f926 	bl	800c1f4 <_fflush_r>
 800bfa8:	bb30      	cbnz	r0, 800bff8 <__swbuf_r+0x90>
 800bfaa:	68a3      	ldr	r3, [r4, #8]
 800bfac:	3b01      	subs	r3, #1
 800bfae:	60a3      	str	r3, [r4, #8]
 800bfb0:	6823      	ldr	r3, [r4, #0]
 800bfb2:	1c5a      	adds	r2, r3, #1
 800bfb4:	6022      	str	r2, [r4, #0]
 800bfb6:	701e      	strb	r6, [r3, #0]
 800bfb8:	6963      	ldr	r3, [r4, #20]
 800bfba:	3001      	adds	r0, #1
 800bfbc:	4283      	cmp	r3, r0
 800bfbe:	d004      	beq.n	800bfca <__swbuf_r+0x62>
 800bfc0:	89a3      	ldrh	r3, [r4, #12]
 800bfc2:	07db      	lsls	r3, r3, #31
 800bfc4:	d506      	bpl.n	800bfd4 <__swbuf_r+0x6c>
 800bfc6:	2e0a      	cmp	r6, #10
 800bfc8:	d104      	bne.n	800bfd4 <__swbuf_r+0x6c>
 800bfca:	4621      	mov	r1, r4
 800bfcc:	4628      	mov	r0, r5
 800bfce:	f000 f911 	bl	800c1f4 <_fflush_r>
 800bfd2:	b988      	cbnz	r0, 800bff8 <__swbuf_r+0x90>
 800bfd4:	4638      	mov	r0, r7
 800bfd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfd8:	4b0a      	ldr	r3, [pc, #40]	; (800c004 <__swbuf_r+0x9c>)
 800bfda:	429c      	cmp	r4, r3
 800bfdc:	d101      	bne.n	800bfe2 <__swbuf_r+0x7a>
 800bfde:	68ac      	ldr	r4, [r5, #8]
 800bfe0:	e7cf      	b.n	800bf82 <__swbuf_r+0x1a>
 800bfe2:	4b09      	ldr	r3, [pc, #36]	; (800c008 <__swbuf_r+0xa0>)
 800bfe4:	429c      	cmp	r4, r3
 800bfe6:	bf08      	it	eq
 800bfe8:	68ec      	ldreq	r4, [r5, #12]
 800bfea:	e7ca      	b.n	800bf82 <__swbuf_r+0x1a>
 800bfec:	4621      	mov	r1, r4
 800bfee:	4628      	mov	r0, r5
 800bff0:	f000 f80c 	bl	800c00c <__swsetup_r>
 800bff4:	2800      	cmp	r0, #0
 800bff6:	d0cb      	beq.n	800bf90 <__swbuf_r+0x28>
 800bff8:	f04f 37ff 	mov.w	r7, #4294967295
 800bffc:	e7ea      	b.n	800bfd4 <__swbuf_r+0x6c>
 800bffe:	bf00      	nop
 800c000:	0800ed90 	.word	0x0800ed90
 800c004:	0800edb0 	.word	0x0800edb0
 800c008:	0800ed70 	.word	0x0800ed70

0800c00c <__swsetup_r>:
 800c00c:	4b32      	ldr	r3, [pc, #200]	; (800c0d8 <__swsetup_r+0xcc>)
 800c00e:	b570      	push	{r4, r5, r6, lr}
 800c010:	681d      	ldr	r5, [r3, #0]
 800c012:	4606      	mov	r6, r0
 800c014:	460c      	mov	r4, r1
 800c016:	b125      	cbz	r5, 800c022 <__swsetup_r+0x16>
 800c018:	69ab      	ldr	r3, [r5, #24]
 800c01a:	b913      	cbnz	r3, 800c022 <__swsetup_r+0x16>
 800c01c:	4628      	mov	r0, r5
 800c01e:	f000 f97d 	bl	800c31c <__sinit>
 800c022:	4b2e      	ldr	r3, [pc, #184]	; (800c0dc <__swsetup_r+0xd0>)
 800c024:	429c      	cmp	r4, r3
 800c026:	d10f      	bne.n	800c048 <__swsetup_r+0x3c>
 800c028:	686c      	ldr	r4, [r5, #4]
 800c02a:	89a3      	ldrh	r3, [r4, #12]
 800c02c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c030:	0719      	lsls	r1, r3, #28
 800c032:	d42c      	bmi.n	800c08e <__swsetup_r+0x82>
 800c034:	06dd      	lsls	r5, r3, #27
 800c036:	d411      	bmi.n	800c05c <__swsetup_r+0x50>
 800c038:	2309      	movs	r3, #9
 800c03a:	6033      	str	r3, [r6, #0]
 800c03c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c040:	81a3      	strh	r3, [r4, #12]
 800c042:	f04f 30ff 	mov.w	r0, #4294967295
 800c046:	e03e      	b.n	800c0c6 <__swsetup_r+0xba>
 800c048:	4b25      	ldr	r3, [pc, #148]	; (800c0e0 <__swsetup_r+0xd4>)
 800c04a:	429c      	cmp	r4, r3
 800c04c:	d101      	bne.n	800c052 <__swsetup_r+0x46>
 800c04e:	68ac      	ldr	r4, [r5, #8]
 800c050:	e7eb      	b.n	800c02a <__swsetup_r+0x1e>
 800c052:	4b24      	ldr	r3, [pc, #144]	; (800c0e4 <__swsetup_r+0xd8>)
 800c054:	429c      	cmp	r4, r3
 800c056:	bf08      	it	eq
 800c058:	68ec      	ldreq	r4, [r5, #12]
 800c05a:	e7e6      	b.n	800c02a <__swsetup_r+0x1e>
 800c05c:	0758      	lsls	r0, r3, #29
 800c05e:	d512      	bpl.n	800c086 <__swsetup_r+0x7a>
 800c060:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c062:	b141      	cbz	r1, 800c076 <__swsetup_r+0x6a>
 800c064:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c068:	4299      	cmp	r1, r3
 800c06a:	d002      	beq.n	800c072 <__swsetup_r+0x66>
 800c06c:	4630      	mov	r0, r6
 800c06e:	f001 faa1 	bl	800d5b4 <_free_r>
 800c072:	2300      	movs	r3, #0
 800c074:	6363      	str	r3, [r4, #52]	; 0x34
 800c076:	89a3      	ldrh	r3, [r4, #12]
 800c078:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c07c:	81a3      	strh	r3, [r4, #12]
 800c07e:	2300      	movs	r3, #0
 800c080:	6063      	str	r3, [r4, #4]
 800c082:	6923      	ldr	r3, [r4, #16]
 800c084:	6023      	str	r3, [r4, #0]
 800c086:	89a3      	ldrh	r3, [r4, #12]
 800c088:	f043 0308 	orr.w	r3, r3, #8
 800c08c:	81a3      	strh	r3, [r4, #12]
 800c08e:	6923      	ldr	r3, [r4, #16]
 800c090:	b94b      	cbnz	r3, 800c0a6 <__swsetup_r+0x9a>
 800c092:	89a3      	ldrh	r3, [r4, #12]
 800c094:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c098:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c09c:	d003      	beq.n	800c0a6 <__swsetup_r+0x9a>
 800c09e:	4621      	mov	r1, r4
 800c0a0:	4630      	mov	r0, r6
 800c0a2:	f000 fd6b 	bl	800cb7c <__smakebuf_r>
 800c0a6:	89a0      	ldrh	r0, [r4, #12]
 800c0a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c0ac:	f010 0301 	ands.w	r3, r0, #1
 800c0b0:	d00a      	beq.n	800c0c8 <__swsetup_r+0xbc>
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	60a3      	str	r3, [r4, #8]
 800c0b6:	6963      	ldr	r3, [r4, #20]
 800c0b8:	425b      	negs	r3, r3
 800c0ba:	61a3      	str	r3, [r4, #24]
 800c0bc:	6923      	ldr	r3, [r4, #16]
 800c0be:	b943      	cbnz	r3, 800c0d2 <__swsetup_r+0xc6>
 800c0c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c0c4:	d1ba      	bne.n	800c03c <__swsetup_r+0x30>
 800c0c6:	bd70      	pop	{r4, r5, r6, pc}
 800c0c8:	0781      	lsls	r1, r0, #30
 800c0ca:	bf58      	it	pl
 800c0cc:	6963      	ldrpl	r3, [r4, #20]
 800c0ce:	60a3      	str	r3, [r4, #8]
 800c0d0:	e7f4      	b.n	800c0bc <__swsetup_r+0xb0>
 800c0d2:	2000      	movs	r0, #0
 800c0d4:	e7f7      	b.n	800c0c6 <__swsetup_r+0xba>
 800c0d6:	bf00      	nop
 800c0d8:	20000a7c 	.word	0x20000a7c
 800c0dc:	0800ed90 	.word	0x0800ed90
 800c0e0:	0800edb0 	.word	0x0800edb0
 800c0e4:	0800ed70 	.word	0x0800ed70

0800c0e8 <__sflush_r>:
 800c0e8:	898a      	ldrh	r2, [r1, #12]
 800c0ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0ee:	4605      	mov	r5, r0
 800c0f0:	0710      	lsls	r0, r2, #28
 800c0f2:	460c      	mov	r4, r1
 800c0f4:	d458      	bmi.n	800c1a8 <__sflush_r+0xc0>
 800c0f6:	684b      	ldr	r3, [r1, #4]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	dc05      	bgt.n	800c108 <__sflush_r+0x20>
 800c0fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	dc02      	bgt.n	800c108 <__sflush_r+0x20>
 800c102:	2000      	movs	r0, #0
 800c104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c108:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c10a:	2e00      	cmp	r6, #0
 800c10c:	d0f9      	beq.n	800c102 <__sflush_r+0x1a>
 800c10e:	2300      	movs	r3, #0
 800c110:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c114:	682f      	ldr	r7, [r5, #0]
 800c116:	602b      	str	r3, [r5, #0]
 800c118:	d032      	beq.n	800c180 <__sflush_r+0x98>
 800c11a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c11c:	89a3      	ldrh	r3, [r4, #12]
 800c11e:	075a      	lsls	r2, r3, #29
 800c120:	d505      	bpl.n	800c12e <__sflush_r+0x46>
 800c122:	6863      	ldr	r3, [r4, #4]
 800c124:	1ac0      	subs	r0, r0, r3
 800c126:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c128:	b10b      	cbz	r3, 800c12e <__sflush_r+0x46>
 800c12a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c12c:	1ac0      	subs	r0, r0, r3
 800c12e:	2300      	movs	r3, #0
 800c130:	4602      	mov	r2, r0
 800c132:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c134:	6a21      	ldr	r1, [r4, #32]
 800c136:	4628      	mov	r0, r5
 800c138:	47b0      	blx	r6
 800c13a:	1c43      	adds	r3, r0, #1
 800c13c:	89a3      	ldrh	r3, [r4, #12]
 800c13e:	d106      	bne.n	800c14e <__sflush_r+0x66>
 800c140:	6829      	ldr	r1, [r5, #0]
 800c142:	291d      	cmp	r1, #29
 800c144:	d82c      	bhi.n	800c1a0 <__sflush_r+0xb8>
 800c146:	4a2a      	ldr	r2, [pc, #168]	; (800c1f0 <__sflush_r+0x108>)
 800c148:	40ca      	lsrs	r2, r1
 800c14a:	07d6      	lsls	r6, r2, #31
 800c14c:	d528      	bpl.n	800c1a0 <__sflush_r+0xb8>
 800c14e:	2200      	movs	r2, #0
 800c150:	6062      	str	r2, [r4, #4]
 800c152:	04d9      	lsls	r1, r3, #19
 800c154:	6922      	ldr	r2, [r4, #16]
 800c156:	6022      	str	r2, [r4, #0]
 800c158:	d504      	bpl.n	800c164 <__sflush_r+0x7c>
 800c15a:	1c42      	adds	r2, r0, #1
 800c15c:	d101      	bne.n	800c162 <__sflush_r+0x7a>
 800c15e:	682b      	ldr	r3, [r5, #0]
 800c160:	b903      	cbnz	r3, 800c164 <__sflush_r+0x7c>
 800c162:	6560      	str	r0, [r4, #84]	; 0x54
 800c164:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c166:	602f      	str	r7, [r5, #0]
 800c168:	2900      	cmp	r1, #0
 800c16a:	d0ca      	beq.n	800c102 <__sflush_r+0x1a>
 800c16c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c170:	4299      	cmp	r1, r3
 800c172:	d002      	beq.n	800c17a <__sflush_r+0x92>
 800c174:	4628      	mov	r0, r5
 800c176:	f001 fa1d 	bl	800d5b4 <_free_r>
 800c17a:	2000      	movs	r0, #0
 800c17c:	6360      	str	r0, [r4, #52]	; 0x34
 800c17e:	e7c1      	b.n	800c104 <__sflush_r+0x1c>
 800c180:	6a21      	ldr	r1, [r4, #32]
 800c182:	2301      	movs	r3, #1
 800c184:	4628      	mov	r0, r5
 800c186:	47b0      	blx	r6
 800c188:	1c41      	adds	r1, r0, #1
 800c18a:	d1c7      	bne.n	800c11c <__sflush_r+0x34>
 800c18c:	682b      	ldr	r3, [r5, #0]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d0c4      	beq.n	800c11c <__sflush_r+0x34>
 800c192:	2b1d      	cmp	r3, #29
 800c194:	d001      	beq.n	800c19a <__sflush_r+0xb2>
 800c196:	2b16      	cmp	r3, #22
 800c198:	d101      	bne.n	800c19e <__sflush_r+0xb6>
 800c19a:	602f      	str	r7, [r5, #0]
 800c19c:	e7b1      	b.n	800c102 <__sflush_r+0x1a>
 800c19e:	89a3      	ldrh	r3, [r4, #12]
 800c1a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1a4:	81a3      	strh	r3, [r4, #12]
 800c1a6:	e7ad      	b.n	800c104 <__sflush_r+0x1c>
 800c1a8:	690f      	ldr	r7, [r1, #16]
 800c1aa:	2f00      	cmp	r7, #0
 800c1ac:	d0a9      	beq.n	800c102 <__sflush_r+0x1a>
 800c1ae:	0793      	lsls	r3, r2, #30
 800c1b0:	680e      	ldr	r6, [r1, #0]
 800c1b2:	bf08      	it	eq
 800c1b4:	694b      	ldreq	r3, [r1, #20]
 800c1b6:	600f      	str	r7, [r1, #0]
 800c1b8:	bf18      	it	ne
 800c1ba:	2300      	movne	r3, #0
 800c1bc:	eba6 0807 	sub.w	r8, r6, r7
 800c1c0:	608b      	str	r3, [r1, #8]
 800c1c2:	f1b8 0f00 	cmp.w	r8, #0
 800c1c6:	dd9c      	ble.n	800c102 <__sflush_r+0x1a>
 800c1c8:	6a21      	ldr	r1, [r4, #32]
 800c1ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c1cc:	4643      	mov	r3, r8
 800c1ce:	463a      	mov	r2, r7
 800c1d0:	4628      	mov	r0, r5
 800c1d2:	47b0      	blx	r6
 800c1d4:	2800      	cmp	r0, #0
 800c1d6:	dc06      	bgt.n	800c1e6 <__sflush_r+0xfe>
 800c1d8:	89a3      	ldrh	r3, [r4, #12]
 800c1da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1de:	81a3      	strh	r3, [r4, #12]
 800c1e0:	f04f 30ff 	mov.w	r0, #4294967295
 800c1e4:	e78e      	b.n	800c104 <__sflush_r+0x1c>
 800c1e6:	4407      	add	r7, r0
 800c1e8:	eba8 0800 	sub.w	r8, r8, r0
 800c1ec:	e7e9      	b.n	800c1c2 <__sflush_r+0xda>
 800c1ee:	bf00      	nop
 800c1f0:	20400001 	.word	0x20400001

0800c1f4 <_fflush_r>:
 800c1f4:	b538      	push	{r3, r4, r5, lr}
 800c1f6:	690b      	ldr	r3, [r1, #16]
 800c1f8:	4605      	mov	r5, r0
 800c1fa:	460c      	mov	r4, r1
 800c1fc:	b913      	cbnz	r3, 800c204 <_fflush_r+0x10>
 800c1fe:	2500      	movs	r5, #0
 800c200:	4628      	mov	r0, r5
 800c202:	bd38      	pop	{r3, r4, r5, pc}
 800c204:	b118      	cbz	r0, 800c20e <_fflush_r+0x1a>
 800c206:	6983      	ldr	r3, [r0, #24]
 800c208:	b90b      	cbnz	r3, 800c20e <_fflush_r+0x1a>
 800c20a:	f000 f887 	bl	800c31c <__sinit>
 800c20e:	4b14      	ldr	r3, [pc, #80]	; (800c260 <_fflush_r+0x6c>)
 800c210:	429c      	cmp	r4, r3
 800c212:	d11b      	bne.n	800c24c <_fflush_r+0x58>
 800c214:	686c      	ldr	r4, [r5, #4]
 800c216:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d0ef      	beq.n	800c1fe <_fflush_r+0xa>
 800c21e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c220:	07d0      	lsls	r0, r2, #31
 800c222:	d404      	bmi.n	800c22e <_fflush_r+0x3a>
 800c224:	0599      	lsls	r1, r3, #22
 800c226:	d402      	bmi.n	800c22e <_fflush_r+0x3a>
 800c228:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c22a:	f7fe fe5c 	bl	800aee6 <__retarget_lock_acquire_recursive>
 800c22e:	4628      	mov	r0, r5
 800c230:	4621      	mov	r1, r4
 800c232:	f7ff ff59 	bl	800c0e8 <__sflush_r>
 800c236:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c238:	07da      	lsls	r2, r3, #31
 800c23a:	4605      	mov	r5, r0
 800c23c:	d4e0      	bmi.n	800c200 <_fflush_r+0xc>
 800c23e:	89a3      	ldrh	r3, [r4, #12]
 800c240:	059b      	lsls	r3, r3, #22
 800c242:	d4dd      	bmi.n	800c200 <_fflush_r+0xc>
 800c244:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c246:	f7fe fe4f 	bl	800aee8 <__retarget_lock_release_recursive>
 800c24a:	e7d9      	b.n	800c200 <_fflush_r+0xc>
 800c24c:	4b05      	ldr	r3, [pc, #20]	; (800c264 <_fflush_r+0x70>)
 800c24e:	429c      	cmp	r4, r3
 800c250:	d101      	bne.n	800c256 <_fflush_r+0x62>
 800c252:	68ac      	ldr	r4, [r5, #8]
 800c254:	e7df      	b.n	800c216 <_fflush_r+0x22>
 800c256:	4b04      	ldr	r3, [pc, #16]	; (800c268 <_fflush_r+0x74>)
 800c258:	429c      	cmp	r4, r3
 800c25a:	bf08      	it	eq
 800c25c:	68ec      	ldreq	r4, [r5, #12]
 800c25e:	e7da      	b.n	800c216 <_fflush_r+0x22>
 800c260:	0800ed90 	.word	0x0800ed90
 800c264:	0800edb0 	.word	0x0800edb0
 800c268:	0800ed70 	.word	0x0800ed70

0800c26c <std>:
 800c26c:	2300      	movs	r3, #0
 800c26e:	b510      	push	{r4, lr}
 800c270:	4604      	mov	r4, r0
 800c272:	e9c0 3300 	strd	r3, r3, [r0]
 800c276:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c27a:	6083      	str	r3, [r0, #8]
 800c27c:	8181      	strh	r1, [r0, #12]
 800c27e:	6643      	str	r3, [r0, #100]	; 0x64
 800c280:	81c2      	strh	r2, [r0, #14]
 800c282:	6183      	str	r3, [r0, #24]
 800c284:	4619      	mov	r1, r3
 800c286:	2208      	movs	r2, #8
 800c288:	305c      	adds	r0, #92	; 0x5c
 800c28a:	f7fe fe56 	bl	800af3a <memset>
 800c28e:	4b05      	ldr	r3, [pc, #20]	; (800c2a4 <std+0x38>)
 800c290:	6263      	str	r3, [r4, #36]	; 0x24
 800c292:	4b05      	ldr	r3, [pc, #20]	; (800c2a8 <std+0x3c>)
 800c294:	62a3      	str	r3, [r4, #40]	; 0x28
 800c296:	4b05      	ldr	r3, [pc, #20]	; (800c2ac <std+0x40>)
 800c298:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c29a:	4b05      	ldr	r3, [pc, #20]	; (800c2b0 <std+0x44>)
 800c29c:	6224      	str	r4, [r4, #32]
 800c29e:	6323      	str	r3, [r4, #48]	; 0x30
 800c2a0:	bd10      	pop	{r4, pc}
 800c2a2:	bf00      	nop
 800c2a4:	0800e061 	.word	0x0800e061
 800c2a8:	0800e083 	.word	0x0800e083
 800c2ac:	0800e0bb 	.word	0x0800e0bb
 800c2b0:	0800e0df 	.word	0x0800e0df

0800c2b4 <_cleanup_r>:
 800c2b4:	4901      	ldr	r1, [pc, #4]	; (800c2bc <_cleanup_r+0x8>)
 800c2b6:	f000 b8af 	b.w	800c418 <_fwalk_reent>
 800c2ba:	bf00      	nop
 800c2bc:	0800c1f5 	.word	0x0800c1f5

0800c2c0 <__sfmoreglue>:
 800c2c0:	b570      	push	{r4, r5, r6, lr}
 800c2c2:	1e4a      	subs	r2, r1, #1
 800c2c4:	2568      	movs	r5, #104	; 0x68
 800c2c6:	4355      	muls	r5, r2
 800c2c8:	460e      	mov	r6, r1
 800c2ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c2ce:	f001 f9c1 	bl	800d654 <_malloc_r>
 800c2d2:	4604      	mov	r4, r0
 800c2d4:	b140      	cbz	r0, 800c2e8 <__sfmoreglue+0x28>
 800c2d6:	2100      	movs	r1, #0
 800c2d8:	e9c0 1600 	strd	r1, r6, [r0]
 800c2dc:	300c      	adds	r0, #12
 800c2de:	60a0      	str	r0, [r4, #8]
 800c2e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c2e4:	f7fe fe29 	bl	800af3a <memset>
 800c2e8:	4620      	mov	r0, r4
 800c2ea:	bd70      	pop	{r4, r5, r6, pc}

0800c2ec <__sfp_lock_acquire>:
 800c2ec:	4801      	ldr	r0, [pc, #4]	; (800c2f4 <__sfp_lock_acquire+0x8>)
 800c2ee:	f7fe bdfa 	b.w	800aee6 <__retarget_lock_acquire_recursive>
 800c2f2:	bf00      	nop
 800c2f4:	20002b80 	.word	0x20002b80

0800c2f8 <__sfp_lock_release>:
 800c2f8:	4801      	ldr	r0, [pc, #4]	; (800c300 <__sfp_lock_release+0x8>)
 800c2fa:	f7fe bdf5 	b.w	800aee8 <__retarget_lock_release_recursive>
 800c2fe:	bf00      	nop
 800c300:	20002b80 	.word	0x20002b80

0800c304 <__sinit_lock_acquire>:
 800c304:	4801      	ldr	r0, [pc, #4]	; (800c30c <__sinit_lock_acquire+0x8>)
 800c306:	f7fe bdee 	b.w	800aee6 <__retarget_lock_acquire_recursive>
 800c30a:	bf00      	nop
 800c30c:	20002b7b 	.word	0x20002b7b

0800c310 <__sinit_lock_release>:
 800c310:	4801      	ldr	r0, [pc, #4]	; (800c318 <__sinit_lock_release+0x8>)
 800c312:	f7fe bde9 	b.w	800aee8 <__retarget_lock_release_recursive>
 800c316:	bf00      	nop
 800c318:	20002b7b 	.word	0x20002b7b

0800c31c <__sinit>:
 800c31c:	b510      	push	{r4, lr}
 800c31e:	4604      	mov	r4, r0
 800c320:	f7ff fff0 	bl	800c304 <__sinit_lock_acquire>
 800c324:	69a3      	ldr	r3, [r4, #24]
 800c326:	b11b      	cbz	r3, 800c330 <__sinit+0x14>
 800c328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c32c:	f7ff bff0 	b.w	800c310 <__sinit_lock_release>
 800c330:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c334:	6523      	str	r3, [r4, #80]	; 0x50
 800c336:	4b13      	ldr	r3, [pc, #76]	; (800c384 <__sinit+0x68>)
 800c338:	4a13      	ldr	r2, [pc, #76]	; (800c388 <__sinit+0x6c>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	62a2      	str	r2, [r4, #40]	; 0x28
 800c33e:	42a3      	cmp	r3, r4
 800c340:	bf04      	itt	eq
 800c342:	2301      	moveq	r3, #1
 800c344:	61a3      	streq	r3, [r4, #24]
 800c346:	4620      	mov	r0, r4
 800c348:	f000 f820 	bl	800c38c <__sfp>
 800c34c:	6060      	str	r0, [r4, #4]
 800c34e:	4620      	mov	r0, r4
 800c350:	f000 f81c 	bl	800c38c <__sfp>
 800c354:	60a0      	str	r0, [r4, #8]
 800c356:	4620      	mov	r0, r4
 800c358:	f000 f818 	bl	800c38c <__sfp>
 800c35c:	2200      	movs	r2, #0
 800c35e:	60e0      	str	r0, [r4, #12]
 800c360:	2104      	movs	r1, #4
 800c362:	6860      	ldr	r0, [r4, #4]
 800c364:	f7ff ff82 	bl	800c26c <std>
 800c368:	68a0      	ldr	r0, [r4, #8]
 800c36a:	2201      	movs	r2, #1
 800c36c:	2109      	movs	r1, #9
 800c36e:	f7ff ff7d 	bl	800c26c <std>
 800c372:	68e0      	ldr	r0, [r4, #12]
 800c374:	2202      	movs	r2, #2
 800c376:	2112      	movs	r1, #18
 800c378:	f7ff ff78 	bl	800c26c <std>
 800c37c:	2301      	movs	r3, #1
 800c37e:	61a3      	str	r3, [r4, #24]
 800c380:	e7d2      	b.n	800c328 <__sinit+0xc>
 800c382:	bf00      	nop
 800c384:	0800ed0c 	.word	0x0800ed0c
 800c388:	0800c2b5 	.word	0x0800c2b5

0800c38c <__sfp>:
 800c38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c38e:	4607      	mov	r7, r0
 800c390:	f7ff ffac 	bl	800c2ec <__sfp_lock_acquire>
 800c394:	4b1e      	ldr	r3, [pc, #120]	; (800c410 <__sfp+0x84>)
 800c396:	681e      	ldr	r6, [r3, #0]
 800c398:	69b3      	ldr	r3, [r6, #24]
 800c39a:	b913      	cbnz	r3, 800c3a2 <__sfp+0x16>
 800c39c:	4630      	mov	r0, r6
 800c39e:	f7ff ffbd 	bl	800c31c <__sinit>
 800c3a2:	3648      	adds	r6, #72	; 0x48
 800c3a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c3a8:	3b01      	subs	r3, #1
 800c3aa:	d503      	bpl.n	800c3b4 <__sfp+0x28>
 800c3ac:	6833      	ldr	r3, [r6, #0]
 800c3ae:	b30b      	cbz	r3, 800c3f4 <__sfp+0x68>
 800c3b0:	6836      	ldr	r6, [r6, #0]
 800c3b2:	e7f7      	b.n	800c3a4 <__sfp+0x18>
 800c3b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c3b8:	b9d5      	cbnz	r5, 800c3f0 <__sfp+0x64>
 800c3ba:	4b16      	ldr	r3, [pc, #88]	; (800c414 <__sfp+0x88>)
 800c3bc:	60e3      	str	r3, [r4, #12]
 800c3be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c3c2:	6665      	str	r5, [r4, #100]	; 0x64
 800c3c4:	f7fe fd8e 	bl	800aee4 <__retarget_lock_init_recursive>
 800c3c8:	f7ff ff96 	bl	800c2f8 <__sfp_lock_release>
 800c3cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c3d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c3d4:	6025      	str	r5, [r4, #0]
 800c3d6:	61a5      	str	r5, [r4, #24]
 800c3d8:	2208      	movs	r2, #8
 800c3da:	4629      	mov	r1, r5
 800c3dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c3e0:	f7fe fdab 	bl	800af3a <memset>
 800c3e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c3e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c3ec:	4620      	mov	r0, r4
 800c3ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3f0:	3468      	adds	r4, #104	; 0x68
 800c3f2:	e7d9      	b.n	800c3a8 <__sfp+0x1c>
 800c3f4:	2104      	movs	r1, #4
 800c3f6:	4638      	mov	r0, r7
 800c3f8:	f7ff ff62 	bl	800c2c0 <__sfmoreglue>
 800c3fc:	4604      	mov	r4, r0
 800c3fe:	6030      	str	r0, [r6, #0]
 800c400:	2800      	cmp	r0, #0
 800c402:	d1d5      	bne.n	800c3b0 <__sfp+0x24>
 800c404:	f7ff ff78 	bl	800c2f8 <__sfp_lock_release>
 800c408:	230c      	movs	r3, #12
 800c40a:	603b      	str	r3, [r7, #0]
 800c40c:	e7ee      	b.n	800c3ec <__sfp+0x60>
 800c40e:	bf00      	nop
 800c410:	0800ed0c 	.word	0x0800ed0c
 800c414:	ffff0001 	.word	0xffff0001

0800c418 <_fwalk_reent>:
 800c418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c41c:	4606      	mov	r6, r0
 800c41e:	4688      	mov	r8, r1
 800c420:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c424:	2700      	movs	r7, #0
 800c426:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c42a:	f1b9 0901 	subs.w	r9, r9, #1
 800c42e:	d505      	bpl.n	800c43c <_fwalk_reent+0x24>
 800c430:	6824      	ldr	r4, [r4, #0]
 800c432:	2c00      	cmp	r4, #0
 800c434:	d1f7      	bne.n	800c426 <_fwalk_reent+0xe>
 800c436:	4638      	mov	r0, r7
 800c438:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c43c:	89ab      	ldrh	r3, [r5, #12]
 800c43e:	2b01      	cmp	r3, #1
 800c440:	d907      	bls.n	800c452 <_fwalk_reent+0x3a>
 800c442:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c446:	3301      	adds	r3, #1
 800c448:	d003      	beq.n	800c452 <_fwalk_reent+0x3a>
 800c44a:	4629      	mov	r1, r5
 800c44c:	4630      	mov	r0, r6
 800c44e:	47c0      	blx	r8
 800c450:	4307      	orrs	r7, r0
 800c452:	3568      	adds	r5, #104	; 0x68
 800c454:	e7e9      	b.n	800c42a <_fwalk_reent+0x12>

0800c456 <rshift>:
 800c456:	6903      	ldr	r3, [r0, #16]
 800c458:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c45c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c460:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c464:	f100 0414 	add.w	r4, r0, #20
 800c468:	dd45      	ble.n	800c4f6 <rshift+0xa0>
 800c46a:	f011 011f 	ands.w	r1, r1, #31
 800c46e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c472:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c476:	d10c      	bne.n	800c492 <rshift+0x3c>
 800c478:	f100 0710 	add.w	r7, r0, #16
 800c47c:	4629      	mov	r1, r5
 800c47e:	42b1      	cmp	r1, r6
 800c480:	d334      	bcc.n	800c4ec <rshift+0x96>
 800c482:	1a9b      	subs	r3, r3, r2
 800c484:	009b      	lsls	r3, r3, #2
 800c486:	1eea      	subs	r2, r5, #3
 800c488:	4296      	cmp	r6, r2
 800c48a:	bf38      	it	cc
 800c48c:	2300      	movcc	r3, #0
 800c48e:	4423      	add	r3, r4
 800c490:	e015      	b.n	800c4be <rshift+0x68>
 800c492:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c496:	f1c1 0820 	rsb	r8, r1, #32
 800c49a:	40cf      	lsrs	r7, r1
 800c49c:	f105 0e04 	add.w	lr, r5, #4
 800c4a0:	46a1      	mov	r9, r4
 800c4a2:	4576      	cmp	r6, lr
 800c4a4:	46f4      	mov	ip, lr
 800c4a6:	d815      	bhi.n	800c4d4 <rshift+0x7e>
 800c4a8:	1a9b      	subs	r3, r3, r2
 800c4aa:	009a      	lsls	r2, r3, #2
 800c4ac:	3a04      	subs	r2, #4
 800c4ae:	3501      	adds	r5, #1
 800c4b0:	42ae      	cmp	r6, r5
 800c4b2:	bf38      	it	cc
 800c4b4:	2200      	movcc	r2, #0
 800c4b6:	18a3      	adds	r3, r4, r2
 800c4b8:	50a7      	str	r7, [r4, r2]
 800c4ba:	b107      	cbz	r7, 800c4be <rshift+0x68>
 800c4bc:	3304      	adds	r3, #4
 800c4be:	1b1a      	subs	r2, r3, r4
 800c4c0:	42a3      	cmp	r3, r4
 800c4c2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c4c6:	bf08      	it	eq
 800c4c8:	2300      	moveq	r3, #0
 800c4ca:	6102      	str	r2, [r0, #16]
 800c4cc:	bf08      	it	eq
 800c4ce:	6143      	streq	r3, [r0, #20]
 800c4d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c4d4:	f8dc c000 	ldr.w	ip, [ip]
 800c4d8:	fa0c fc08 	lsl.w	ip, ip, r8
 800c4dc:	ea4c 0707 	orr.w	r7, ip, r7
 800c4e0:	f849 7b04 	str.w	r7, [r9], #4
 800c4e4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c4e8:	40cf      	lsrs	r7, r1
 800c4ea:	e7da      	b.n	800c4a2 <rshift+0x4c>
 800c4ec:	f851 cb04 	ldr.w	ip, [r1], #4
 800c4f0:	f847 cf04 	str.w	ip, [r7, #4]!
 800c4f4:	e7c3      	b.n	800c47e <rshift+0x28>
 800c4f6:	4623      	mov	r3, r4
 800c4f8:	e7e1      	b.n	800c4be <rshift+0x68>

0800c4fa <__hexdig_fun>:
 800c4fa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c4fe:	2b09      	cmp	r3, #9
 800c500:	d802      	bhi.n	800c508 <__hexdig_fun+0xe>
 800c502:	3820      	subs	r0, #32
 800c504:	b2c0      	uxtb	r0, r0
 800c506:	4770      	bx	lr
 800c508:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c50c:	2b05      	cmp	r3, #5
 800c50e:	d801      	bhi.n	800c514 <__hexdig_fun+0x1a>
 800c510:	3847      	subs	r0, #71	; 0x47
 800c512:	e7f7      	b.n	800c504 <__hexdig_fun+0xa>
 800c514:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c518:	2b05      	cmp	r3, #5
 800c51a:	d801      	bhi.n	800c520 <__hexdig_fun+0x26>
 800c51c:	3827      	subs	r0, #39	; 0x27
 800c51e:	e7f1      	b.n	800c504 <__hexdig_fun+0xa>
 800c520:	2000      	movs	r0, #0
 800c522:	4770      	bx	lr

0800c524 <__gethex>:
 800c524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c528:	ed2d 8b02 	vpush	{d8}
 800c52c:	b089      	sub	sp, #36	; 0x24
 800c52e:	ee08 0a10 	vmov	s16, r0
 800c532:	9304      	str	r3, [sp, #16]
 800c534:	4bbc      	ldr	r3, [pc, #752]	; (800c828 <__gethex+0x304>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	9301      	str	r3, [sp, #4]
 800c53a:	4618      	mov	r0, r3
 800c53c:	468b      	mov	fp, r1
 800c53e:	4690      	mov	r8, r2
 800c540:	f7f3 fe46 	bl	80001d0 <strlen>
 800c544:	9b01      	ldr	r3, [sp, #4]
 800c546:	f8db 2000 	ldr.w	r2, [fp]
 800c54a:	4403      	add	r3, r0
 800c54c:	4682      	mov	sl, r0
 800c54e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c552:	9305      	str	r3, [sp, #20]
 800c554:	1c93      	adds	r3, r2, #2
 800c556:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c55a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c55e:	32fe      	adds	r2, #254	; 0xfe
 800c560:	18d1      	adds	r1, r2, r3
 800c562:	461f      	mov	r7, r3
 800c564:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c568:	9100      	str	r1, [sp, #0]
 800c56a:	2830      	cmp	r0, #48	; 0x30
 800c56c:	d0f8      	beq.n	800c560 <__gethex+0x3c>
 800c56e:	f7ff ffc4 	bl	800c4fa <__hexdig_fun>
 800c572:	4604      	mov	r4, r0
 800c574:	2800      	cmp	r0, #0
 800c576:	d13a      	bne.n	800c5ee <__gethex+0xca>
 800c578:	9901      	ldr	r1, [sp, #4]
 800c57a:	4652      	mov	r2, sl
 800c57c:	4638      	mov	r0, r7
 800c57e:	f001 fdb2 	bl	800e0e6 <strncmp>
 800c582:	4605      	mov	r5, r0
 800c584:	2800      	cmp	r0, #0
 800c586:	d168      	bne.n	800c65a <__gethex+0x136>
 800c588:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c58c:	eb07 060a 	add.w	r6, r7, sl
 800c590:	f7ff ffb3 	bl	800c4fa <__hexdig_fun>
 800c594:	2800      	cmp	r0, #0
 800c596:	d062      	beq.n	800c65e <__gethex+0x13a>
 800c598:	4633      	mov	r3, r6
 800c59a:	7818      	ldrb	r0, [r3, #0]
 800c59c:	2830      	cmp	r0, #48	; 0x30
 800c59e:	461f      	mov	r7, r3
 800c5a0:	f103 0301 	add.w	r3, r3, #1
 800c5a4:	d0f9      	beq.n	800c59a <__gethex+0x76>
 800c5a6:	f7ff ffa8 	bl	800c4fa <__hexdig_fun>
 800c5aa:	2301      	movs	r3, #1
 800c5ac:	fab0 f480 	clz	r4, r0
 800c5b0:	0964      	lsrs	r4, r4, #5
 800c5b2:	4635      	mov	r5, r6
 800c5b4:	9300      	str	r3, [sp, #0]
 800c5b6:	463a      	mov	r2, r7
 800c5b8:	4616      	mov	r6, r2
 800c5ba:	3201      	adds	r2, #1
 800c5bc:	7830      	ldrb	r0, [r6, #0]
 800c5be:	f7ff ff9c 	bl	800c4fa <__hexdig_fun>
 800c5c2:	2800      	cmp	r0, #0
 800c5c4:	d1f8      	bne.n	800c5b8 <__gethex+0x94>
 800c5c6:	9901      	ldr	r1, [sp, #4]
 800c5c8:	4652      	mov	r2, sl
 800c5ca:	4630      	mov	r0, r6
 800c5cc:	f001 fd8b 	bl	800e0e6 <strncmp>
 800c5d0:	b980      	cbnz	r0, 800c5f4 <__gethex+0xd0>
 800c5d2:	b94d      	cbnz	r5, 800c5e8 <__gethex+0xc4>
 800c5d4:	eb06 050a 	add.w	r5, r6, sl
 800c5d8:	462a      	mov	r2, r5
 800c5da:	4616      	mov	r6, r2
 800c5dc:	3201      	adds	r2, #1
 800c5de:	7830      	ldrb	r0, [r6, #0]
 800c5e0:	f7ff ff8b 	bl	800c4fa <__hexdig_fun>
 800c5e4:	2800      	cmp	r0, #0
 800c5e6:	d1f8      	bne.n	800c5da <__gethex+0xb6>
 800c5e8:	1bad      	subs	r5, r5, r6
 800c5ea:	00ad      	lsls	r5, r5, #2
 800c5ec:	e004      	b.n	800c5f8 <__gethex+0xd4>
 800c5ee:	2400      	movs	r4, #0
 800c5f0:	4625      	mov	r5, r4
 800c5f2:	e7e0      	b.n	800c5b6 <__gethex+0x92>
 800c5f4:	2d00      	cmp	r5, #0
 800c5f6:	d1f7      	bne.n	800c5e8 <__gethex+0xc4>
 800c5f8:	7833      	ldrb	r3, [r6, #0]
 800c5fa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c5fe:	2b50      	cmp	r3, #80	; 0x50
 800c600:	d13b      	bne.n	800c67a <__gethex+0x156>
 800c602:	7873      	ldrb	r3, [r6, #1]
 800c604:	2b2b      	cmp	r3, #43	; 0x2b
 800c606:	d02c      	beq.n	800c662 <__gethex+0x13e>
 800c608:	2b2d      	cmp	r3, #45	; 0x2d
 800c60a:	d02e      	beq.n	800c66a <__gethex+0x146>
 800c60c:	1c71      	adds	r1, r6, #1
 800c60e:	f04f 0900 	mov.w	r9, #0
 800c612:	7808      	ldrb	r0, [r1, #0]
 800c614:	f7ff ff71 	bl	800c4fa <__hexdig_fun>
 800c618:	1e43      	subs	r3, r0, #1
 800c61a:	b2db      	uxtb	r3, r3
 800c61c:	2b18      	cmp	r3, #24
 800c61e:	d82c      	bhi.n	800c67a <__gethex+0x156>
 800c620:	f1a0 0210 	sub.w	r2, r0, #16
 800c624:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c628:	f7ff ff67 	bl	800c4fa <__hexdig_fun>
 800c62c:	1e43      	subs	r3, r0, #1
 800c62e:	b2db      	uxtb	r3, r3
 800c630:	2b18      	cmp	r3, #24
 800c632:	d91d      	bls.n	800c670 <__gethex+0x14c>
 800c634:	f1b9 0f00 	cmp.w	r9, #0
 800c638:	d000      	beq.n	800c63c <__gethex+0x118>
 800c63a:	4252      	negs	r2, r2
 800c63c:	4415      	add	r5, r2
 800c63e:	f8cb 1000 	str.w	r1, [fp]
 800c642:	b1e4      	cbz	r4, 800c67e <__gethex+0x15a>
 800c644:	9b00      	ldr	r3, [sp, #0]
 800c646:	2b00      	cmp	r3, #0
 800c648:	bf14      	ite	ne
 800c64a:	2700      	movne	r7, #0
 800c64c:	2706      	moveq	r7, #6
 800c64e:	4638      	mov	r0, r7
 800c650:	b009      	add	sp, #36	; 0x24
 800c652:	ecbd 8b02 	vpop	{d8}
 800c656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c65a:	463e      	mov	r6, r7
 800c65c:	4625      	mov	r5, r4
 800c65e:	2401      	movs	r4, #1
 800c660:	e7ca      	b.n	800c5f8 <__gethex+0xd4>
 800c662:	f04f 0900 	mov.w	r9, #0
 800c666:	1cb1      	adds	r1, r6, #2
 800c668:	e7d3      	b.n	800c612 <__gethex+0xee>
 800c66a:	f04f 0901 	mov.w	r9, #1
 800c66e:	e7fa      	b.n	800c666 <__gethex+0x142>
 800c670:	230a      	movs	r3, #10
 800c672:	fb03 0202 	mla	r2, r3, r2, r0
 800c676:	3a10      	subs	r2, #16
 800c678:	e7d4      	b.n	800c624 <__gethex+0x100>
 800c67a:	4631      	mov	r1, r6
 800c67c:	e7df      	b.n	800c63e <__gethex+0x11a>
 800c67e:	1bf3      	subs	r3, r6, r7
 800c680:	3b01      	subs	r3, #1
 800c682:	4621      	mov	r1, r4
 800c684:	2b07      	cmp	r3, #7
 800c686:	dc0b      	bgt.n	800c6a0 <__gethex+0x17c>
 800c688:	ee18 0a10 	vmov	r0, s16
 800c68c:	f000 fac8 	bl	800cc20 <_Balloc>
 800c690:	4604      	mov	r4, r0
 800c692:	b940      	cbnz	r0, 800c6a6 <__gethex+0x182>
 800c694:	4b65      	ldr	r3, [pc, #404]	; (800c82c <__gethex+0x308>)
 800c696:	4602      	mov	r2, r0
 800c698:	21de      	movs	r1, #222	; 0xde
 800c69a:	4865      	ldr	r0, [pc, #404]	; (800c830 <__gethex+0x30c>)
 800c69c:	f001 fd54 	bl	800e148 <__assert_func>
 800c6a0:	3101      	adds	r1, #1
 800c6a2:	105b      	asrs	r3, r3, #1
 800c6a4:	e7ee      	b.n	800c684 <__gethex+0x160>
 800c6a6:	f100 0914 	add.w	r9, r0, #20
 800c6aa:	f04f 0b00 	mov.w	fp, #0
 800c6ae:	f1ca 0301 	rsb	r3, sl, #1
 800c6b2:	f8cd 9008 	str.w	r9, [sp, #8]
 800c6b6:	f8cd b000 	str.w	fp, [sp]
 800c6ba:	9306      	str	r3, [sp, #24]
 800c6bc:	42b7      	cmp	r7, r6
 800c6be:	d340      	bcc.n	800c742 <__gethex+0x21e>
 800c6c0:	9802      	ldr	r0, [sp, #8]
 800c6c2:	9b00      	ldr	r3, [sp, #0]
 800c6c4:	f840 3b04 	str.w	r3, [r0], #4
 800c6c8:	eba0 0009 	sub.w	r0, r0, r9
 800c6cc:	1080      	asrs	r0, r0, #2
 800c6ce:	0146      	lsls	r6, r0, #5
 800c6d0:	6120      	str	r0, [r4, #16]
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f000 fb9a 	bl	800ce0c <__hi0bits>
 800c6d8:	1a30      	subs	r0, r6, r0
 800c6da:	f8d8 6000 	ldr.w	r6, [r8]
 800c6de:	42b0      	cmp	r0, r6
 800c6e0:	dd63      	ble.n	800c7aa <__gethex+0x286>
 800c6e2:	1b87      	subs	r7, r0, r6
 800c6e4:	4639      	mov	r1, r7
 800c6e6:	4620      	mov	r0, r4
 800c6e8:	f000 ff34 	bl	800d554 <__any_on>
 800c6ec:	4682      	mov	sl, r0
 800c6ee:	b1a8      	cbz	r0, 800c71c <__gethex+0x1f8>
 800c6f0:	1e7b      	subs	r3, r7, #1
 800c6f2:	1159      	asrs	r1, r3, #5
 800c6f4:	f003 021f 	and.w	r2, r3, #31
 800c6f8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c6fc:	f04f 0a01 	mov.w	sl, #1
 800c700:	fa0a f202 	lsl.w	r2, sl, r2
 800c704:	420a      	tst	r2, r1
 800c706:	d009      	beq.n	800c71c <__gethex+0x1f8>
 800c708:	4553      	cmp	r3, sl
 800c70a:	dd05      	ble.n	800c718 <__gethex+0x1f4>
 800c70c:	1eb9      	subs	r1, r7, #2
 800c70e:	4620      	mov	r0, r4
 800c710:	f000 ff20 	bl	800d554 <__any_on>
 800c714:	2800      	cmp	r0, #0
 800c716:	d145      	bne.n	800c7a4 <__gethex+0x280>
 800c718:	f04f 0a02 	mov.w	sl, #2
 800c71c:	4639      	mov	r1, r7
 800c71e:	4620      	mov	r0, r4
 800c720:	f7ff fe99 	bl	800c456 <rshift>
 800c724:	443d      	add	r5, r7
 800c726:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c72a:	42ab      	cmp	r3, r5
 800c72c:	da4c      	bge.n	800c7c8 <__gethex+0x2a4>
 800c72e:	ee18 0a10 	vmov	r0, s16
 800c732:	4621      	mov	r1, r4
 800c734:	f000 fab4 	bl	800cca0 <_Bfree>
 800c738:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c73a:	2300      	movs	r3, #0
 800c73c:	6013      	str	r3, [r2, #0]
 800c73e:	27a3      	movs	r7, #163	; 0xa3
 800c740:	e785      	b.n	800c64e <__gethex+0x12a>
 800c742:	1e73      	subs	r3, r6, #1
 800c744:	9a05      	ldr	r2, [sp, #20]
 800c746:	9303      	str	r3, [sp, #12]
 800c748:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c74c:	4293      	cmp	r3, r2
 800c74e:	d019      	beq.n	800c784 <__gethex+0x260>
 800c750:	f1bb 0f20 	cmp.w	fp, #32
 800c754:	d107      	bne.n	800c766 <__gethex+0x242>
 800c756:	9b02      	ldr	r3, [sp, #8]
 800c758:	9a00      	ldr	r2, [sp, #0]
 800c75a:	f843 2b04 	str.w	r2, [r3], #4
 800c75e:	9302      	str	r3, [sp, #8]
 800c760:	2300      	movs	r3, #0
 800c762:	9300      	str	r3, [sp, #0]
 800c764:	469b      	mov	fp, r3
 800c766:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c76a:	f7ff fec6 	bl	800c4fa <__hexdig_fun>
 800c76e:	9b00      	ldr	r3, [sp, #0]
 800c770:	f000 000f 	and.w	r0, r0, #15
 800c774:	fa00 f00b 	lsl.w	r0, r0, fp
 800c778:	4303      	orrs	r3, r0
 800c77a:	9300      	str	r3, [sp, #0]
 800c77c:	f10b 0b04 	add.w	fp, fp, #4
 800c780:	9b03      	ldr	r3, [sp, #12]
 800c782:	e00d      	b.n	800c7a0 <__gethex+0x27c>
 800c784:	9b03      	ldr	r3, [sp, #12]
 800c786:	9a06      	ldr	r2, [sp, #24]
 800c788:	4413      	add	r3, r2
 800c78a:	42bb      	cmp	r3, r7
 800c78c:	d3e0      	bcc.n	800c750 <__gethex+0x22c>
 800c78e:	4618      	mov	r0, r3
 800c790:	9901      	ldr	r1, [sp, #4]
 800c792:	9307      	str	r3, [sp, #28]
 800c794:	4652      	mov	r2, sl
 800c796:	f001 fca6 	bl	800e0e6 <strncmp>
 800c79a:	9b07      	ldr	r3, [sp, #28]
 800c79c:	2800      	cmp	r0, #0
 800c79e:	d1d7      	bne.n	800c750 <__gethex+0x22c>
 800c7a0:	461e      	mov	r6, r3
 800c7a2:	e78b      	b.n	800c6bc <__gethex+0x198>
 800c7a4:	f04f 0a03 	mov.w	sl, #3
 800c7a8:	e7b8      	b.n	800c71c <__gethex+0x1f8>
 800c7aa:	da0a      	bge.n	800c7c2 <__gethex+0x29e>
 800c7ac:	1a37      	subs	r7, r6, r0
 800c7ae:	4621      	mov	r1, r4
 800c7b0:	ee18 0a10 	vmov	r0, s16
 800c7b4:	463a      	mov	r2, r7
 800c7b6:	f000 fc8f 	bl	800d0d8 <__lshift>
 800c7ba:	1bed      	subs	r5, r5, r7
 800c7bc:	4604      	mov	r4, r0
 800c7be:	f100 0914 	add.w	r9, r0, #20
 800c7c2:	f04f 0a00 	mov.w	sl, #0
 800c7c6:	e7ae      	b.n	800c726 <__gethex+0x202>
 800c7c8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c7cc:	42a8      	cmp	r0, r5
 800c7ce:	dd72      	ble.n	800c8b6 <__gethex+0x392>
 800c7d0:	1b45      	subs	r5, r0, r5
 800c7d2:	42ae      	cmp	r6, r5
 800c7d4:	dc36      	bgt.n	800c844 <__gethex+0x320>
 800c7d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c7da:	2b02      	cmp	r3, #2
 800c7dc:	d02a      	beq.n	800c834 <__gethex+0x310>
 800c7de:	2b03      	cmp	r3, #3
 800c7e0:	d02c      	beq.n	800c83c <__gethex+0x318>
 800c7e2:	2b01      	cmp	r3, #1
 800c7e4:	d115      	bne.n	800c812 <__gethex+0x2ee>
 800c7e6:	42ae      	cmp	r6, r5
 800c7e8:	d113      	bne.n	800c812 <__gethex+0x2ee>
 800c7ea:	2e01      	cmp	r6, #1
 800c7ec:	d10b      	bne.n	800c806 <__gethex+0x2e2>
 800c7ee:	9a04      	ldr	r2, [sp, #16]
 800c7f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c7f4:	6013      	str	r3, [r2, #0]
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	6123      	str	r3, [r4, #16]
 800c7fa:	f8c9 3000 	str.w	r3, [r9]
 800c7fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c800:	2762      	movs	r7, #98	; 0x62
 800c802:	601c      	str	r4, [r3, #0]
 800c804:	e723      	b.n	800c64e <__gethex+0x12a>
 800c806:	1e71      	subs	r1, r6, #1
 800c808:	4620      	mov	r0, r4
 800c80a:	f000 fea3 	bl	800d554 <__any_on>
 800c80e:	2800      	cmp	r0, #0
 800c810:	d1ed      	bne.n	800c7ee <__gethex+0x2ca>
 800c812:	ee18 0a10 	vmov	r0, s16
 800c816:	4621      	mov	r1, r4
 800c818:	f000 fa42 	bl	800cca0 <_Bfree>
 800c81c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c81e:	2300      	movs	r3, #0
 800c820:	6013      	str	r3, [r2, #0]
 800c822:	2750      	movs	r7, #80	; 0x50
 800c824:	e713      	b.n	800c64e <__gethex+0x12a>
 800c826:	bf00      	nop
 800c828:	0800ee4c 	.word	0x0800ee4c
 800c82c:	0800edd0 	.word	0x0800edd0
 800c830:	0800ede1 	.word	0x0800ede1
 800c834:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c836:	2b00      	cmp	r3, #0
 800c838:	d1eb      	bne.n	800c812 <__gethex+0x2ee>
 800c83a:	e7d8      	b.n	800c7ee <__gethex+0x2ca>
 800c83c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d1d5      	bne.n	800c7ee <__gethex+0x2ca>
 800c842:	e7e6      	b.n	800c812 <__gethex+0x2ee>
 800c844:	1e6f      	subs	r7, r5, #1
 800c846:	f1ba 0f00 	cmp.w	sl, #0
 800c84a:	d131      	bne.n	800c8b0 <__gethex+0x38c>
 800c84c:	b127      	cbz	r7, 800c858 <__gethex+0x334>
 800c84e:	4639      	mov	r1, r7
 800c850:	4620      	mov	r0, r4
 800c852:	f000 fe7f 	bl	800d554 <__any_on>
 800c856:	4682      	mov	sl, r0
 800c858:	117b      	asrs	r3, r7, #5
 800c85a:	2101      	movs	r1, #1
 800c85c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c860:	f007 071f 	and.w	r7, r7, #31
 800c864:	fa01 f707 	lsl.w	r7, r1, r7
 800c868:	421f      	tst	r7, r3
 800c86a:	4629      	mov	r1, r5
 800c86c:	4620      	mov	r0, r4
 800c86e:	bf18      	it	ne
 800c870:	f04a 0a02 	orrne.w	sl, sl, #2
 800c874:	1b76      	subs	r6, r6, r5
 800c876:	f7ff fdee 	bl	800c456 <rshift>
 800c87a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c87e:	2702      	movs	r7, #2
 800c880:	f1ba 0f00 	cmp.w	sl, #0
 800c884:	d048      	beq.n	800c918 <__gethex+0x3f4>
 800c886:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c88a:	2b02      	cmp	r3, #2
 800c88c:	d015      	beq.n	800c8ba <__gethex+0x396>
 800c88e:	2b03      	cmp	r3, #3
 800c890:	d017      	beq.n	800c8c2 <__gethex+0x39e>
 800c892:	2b01      	cmp	r3, #1
 800c894:	d109      	bne.n	800c8aa <__gethex+0x386>
 800c896:	f01a 0f02 	tst.w	sl, #2
 800c89a:	d006      	beq.n	800c8aa <__gethex+0x386>
 800c89c:	f8d9 0000 	ldr.w	r0, [r9]
 800c8a0:	ea4a 0a00 	orr.w	sl, sl, r0
 800c8a4:	f01a 0f01 	tst.w	sl, #1
 800c8a8:	d10e      	bne.n	800c8c8 <__gethex+0x3a4>
 800c8aa:	f047 0710 	orr.w	r7, r7, #16
 800c8ae:	e033      	b.n	800c918 <__gethex+0x3f4>
 800c8b0:	f04f 0a01 	mov.w	sl, #1
 800c8b4:	e7d0      	b.n	800c858 <__gethex+0x334>
 800c8b6:	2701      	movs	r7, #1
 800c8b8:	e7e2      	b.n	800c880 <__gethex+0x35c>
 800c8ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c8bc:	f1c3 0301 	rsb	r3, r3, #1
 800c8c0:	9315      	str	r3, [sp, #84]	; 0x54
 800c8c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d0f0      	beq.n	800c8aa <__gethex+0x386>
 800c8c8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c8cc:	f104 0314 	add.w	r3, r4, #20
 800c8d0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c8d4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c8d8:	f04f 0c00 	mov.w	ip, #0
 800c8dc:	4618      	mov	r0, r3
 800c8de:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8e2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c8e6:	d01c      	beq.n	800c922 <__gethex+0x3fe>
 800c8e8:	3201      	adds	r2, #1
 800c8ea:	6002      	str	r2, [r0, #0]
 800c8ec:	2f02      	cmp	r7, #2
 800c8ee:	f104 0314 	add.w	r3, r4, #20
 800c8f2:	d13f      	bne.n	800c974 <__gethex+0x450>
 800c8f4:	f8d8 2000 	ldr.w	r2, [r8]
 800c8f8:	3a01      	subs	r2, #1
 800c8fa:	42b2      	cmp	r2, r6
 800c8fc:	d10a      	bne.n	800c914 <__gethex+0x3f0>
 800c8fe:	1171      	asrs	r1, r6, #5
 800c900:	2201      	movs	r2, #1
 800c902:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c906:	f006 061f 	and.w	r6, r6, #31
 800c90a:	fa02 f606 	lsl.w	r6, r2, r6
 800c90e:	421e      	tst	r6, r3
 800c910:	bf18      	it	ne
 800c912:	4617      	movne	r7, r2
 800c914:	f047 0720 	orr.w	r7, r7, #32
 800c918:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c91a:	601c      	str	r4, [r3, #0]
 800c91c:	9b04      	ldr	r3, [sp, #16]
 800c91e:	601d      	str	r5, [r3, #0]
 800c920:	e695      	b.n	800c64e <__gethex+0x12a>
 800c922:	4299      	cmp	r1, r3
 800c924:	f843 cc04 	str.w	ip, [r3, #-4]
 800c928:	d8d8      	bhi.n	800c8dc <__gethex+0x3b8>
 800c92a:	68a3      	ldr	r3, [r4, #8]
 800c92c:	459b      	cmp	fp, r3
 800c92e:	db19      	blt.n	800c964 <__gethex+0x440>
 800c930:	6861      	ldr	r1, [r4, #4]
 800c932:	ee18 0a10 	vmov	r0, s16
 800c936:	3101      	adds	r1, #1
 800c938:	f000 f972 	bl	800cc20 <_Balloc>
 800c93c:	4681      	mov	r9, r0
 800c93e:	b918      	cbnz	r0, 800c948 <__gethex+0x424>
 800c940:	4b1a      	ldr	r3, [pc, #104]	; (800c9ac <__gethex+0x488>)
 800c942:	4602      	mov	r2, r0
 800c944:	2184      	movs	r1, #132	; 0x84
 800c946:	e6a8      	b.n	800c69a <__gethex+0x176>
 800c948:	6922      	ldr	r2, [r4, #16]
 800c94a:	3202      	adds	r2, #2
 800c94c:	f104 010c 	add.w	r1, r4, #12
 800c950:	0092      	lsls	r2, r2, #2
 800c952:	300c      	adds	r0, #12
 800c954:	f7fe fac9 	bl	800aeea <memcpy>
 800c958:	4621      	mov	r1, r4
 800c95a:	ee18 0a10 	vmov	r0, s16
 800c95e:	f000 f99f 	bl	800cca0 <_Bfree>
 800c962:	464c      	mov	r4, r9
 800c964:	6923      	ldr	r3, [r4, #16]
 800c966:	1c5a      	adds	r2, r3, #1
 800c968:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c96c:	6122      	str	r2, [r4, #16]
 800c96e:	2201      	movs	r2, #1
 800c970:	615a      	str	r2, [r3, #20]
 800c972:	e7bb      	b.n	800c8ec <__gethex+0x3c8>
 800c974:	6922      	ldr	r2, [r4, #16]
 800c976:	455a      	cmp	r2, fp
 800c978:	dd0b      	ble.n	800c992 <__gethex+0x46e>
 800c97a:	2101      	movs	r1, #1
 800c97c:	4620      	mov	r0, r4
 800c97e:	f7ff fd6a 	bl	800c456 <rshift>
 800c982:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c986:	3501      	adds	r5, #1
 800c988:	42ab      	cmp	r3, r5
 800c98a:	f6ff aed0 	blt.w	800c72e <__gethex+0x20a>
 800c98e:	2701      	movs	r7, #1
 800c990:	e7c0      	b.n	800c914 <__gethex+0x3f0>
 800c992:	f016 061f 	ands.w	r6, r6, #31
 800c996:	d0fa      	beq.n	800c98e <__gethex+0x46a>
 800c998:	449a      	add	sl, r3
 800c99a:	f1c6 0620 	rsb	r6, r6, #32
 800c99e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800c9a2:	f000 fa33 	bl	800ce0c <__hi0bits>
 800c9a6:	42b0      	cmp	r0, r6
 800c9a8:	dbe7      	blt.n	800c97a <__gethex+0x456>
 800c9aa:	e7f0      	b.n	800c98e <__gethex+0x46a>
 800c9ac:	0800edd0 	.word	0x0800edd0

0800c9b0 <L_shift>:
 800c9b0:	f1c2 0208 	rsb	r2, r2, #8
 800c9b4:	0092      	lsls	r2, r2, #2
 800c9b6:	b570      	push	{r4, r5, r6, lr}
 800c9b8:	f1c2 0620 	rsb	r6, r2, #32
 800c9bc:	6843      	ldr	r3, [r0, #4]
 800c9be:	6804      	ldr	r4, [r0, #0]
 800c9c0:	fa03 f506 	lsl.w	r5, r3, r6
 800c9c4:	432c      	orrs	r4, r5
 800c9c6:	40d3      	lsrs	r3, r2
 800c9c8:	6004      	str	r4, [r0, #0]
 800c9ca:	f840 3f04 	str.w	r3, [r0, #4]!
 800c9ce:	4288      	cmp	r0, r1
 800c9d0:	d3f4      	bcc.n	800c9bc <L_shift+0xc>
 800c9d2:	bd70      	pop	{r4, r5, r6, pc}

0800c9d4 <__match>:
 800c9d4:	b530      	push	{r4, r5, lr}
 800c9d6:	6803      	ldr	r3, [r0, #0]
 800c9d8:	3301      	adds	r3, #1
 800c9da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c9de:	b914      	cbnz	r4, 800c9e6 <__match+0x12>
 800c9e0:	6003      	str	r3, [r0, #0]
 800c9e2:	2001      	movs	r0, #1
 800c9e4:	bd30      	pop	{r4, r5, pc}
 800c9e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9ea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c9ee:	2d19      	cmp	r5, #25
 800c9f0:	bf98      	it	ls
 800c9f2:	3220      	addls	r2, #32
 800c9f4:	42a2      	cmp	r2, r4
 800c9f6:	d0f0      	beq.n	800c9da <__match+0x6>
 800c9f8:	2000      	movs	r0, #0
 800c9fa:	e7f3      	b.n	800c9e4 <__match+0x10>

0800c9fc <__hexnan>:
 800c9fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca00:	680b      	ldr	r3, [r1, #0]
 800ca02:	6801      	ldr	r1, [r0, #0]
 800ca04:	115e      	asrs	r6, r3, #5
 800ca06:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ca0a:	f013 031f 	ands.w	r3, r3, #31
 800ca0e:	b087      	sub	sp, #28
 800ca10:	bf18      	it	ne
 800ca12:	3604      	addne	r6, #4
 800ca14:	2500      	movs	r5, #0
 800ca16:	1f37      	subs	r7, r6, #4
 800ca18:	4682      	mov	sl, r0
 800ca1a:	4690      	mov	r8, r2
 800ca1c:	9301      	str	r3, [sp, #4]
 800ca1e:	f846 5c04 	str.w	r5, [r6, #-4]
 800ca22:	46b9      	mov	r9, r7
 800ca24:	463c      	mov	r4, r7
 800ca26:	9502      	str	r5, [sp, #8]
 800ca28:	46ab      	mov	fp, r5
 800ca2a:	784a      	ldrb	r2, [r1, #1]
 800ca2c:	1c4b      	adds	r3, r1, #1
 800ca2e:	9303      	str	r3, [sp, #12]
 800ca30:	b342      	cbz	r2, 800ca84 <__hexnan+0x88>
 800ca32:	4610      	mov	r0, r2
 800ca34:	9105      	str	r1, [sp, #20]
 800ca36:	9204      	str	r2, [sp, #16]
 800ca38:	f7ff fd5f 	bl	800c4fa <__hexdig_fun>
 800ca3c:	2800      	cmp	r0, #0
 800ca3e:	d14f      	bne.n	800cae0 <__hexnan+0xe4>
 800ca40:	9a04      	ldr	r2, [sp, #16]
 800ca42:	9905      	ldr	r1, [sp, #20]
 800ca44:	2a20      	cmp	r2, #32
 800ca46:	d818      	bhi.n	800ca7a <__hexnan+0x7e>
 800ca48:	9b02      	ldr	r3, [sp, #8]
 800ca4a:	459b      	cmp	fp, r3
 800ca4c:	dd13      	ble.n	800ca76 <__hexnan+0x7a>
 800ca4e:	454c      	cmp	r4, r9
 800ca50:	d206      	bcs.n	800ca60 <__hexnan+0x64>
 800ca52:	2d07      	cmp	r5, #7
 800ca54:	dc04      	bgt.n	800ca60 <__hexnan+0x64>
 800ca56:	462a      	mov	r2, r5
 800ca58:	4649      	mov	r1, r9
 800ca5a:	4620      	mov	r0, r4
 800ca5c:	f7ff ffa8 	bl	800c9b0 <L_shift>
 800ca60:	4544      	cmp	r4, r8
 800ca62:	d950      	bls.n	800cb06 <__hexnan+0x10a>
 800ca64:	2300      	movs	r3, #0
 800ca66:	f1a4 0904 	sub.w	r9, r4, #4
 800ca6a:	f844 3c04 	str.w	r3, [r4, #-4]
 800ca6e:	f8cd b008 	str.w	fp, [sp, #8]
 800ca72:	464c      	mov	r4, r9
 800ca74:	461d      	mov	r5, r3
 800ca76:	9903      	ldr	r1, [sp, #12]
 800ca78:	e7d7      	b.n	800ca2a <__hexnan+0x2e>
 800ca7a:	2a29      	cmp	r2, #41	; 0x29
 800ca7c:	d156      	bne.n	800cb2c <__hexnan+0x130>
 800ca7e:	3102      	adds	r1, #2
 800ca80:	f8ca 1000 	str.w	r1, [sl]
 800ca84:	f1bb 0f00 	cmp.w	fp, #0
 800ca88:	d050      	beq.n	800cb2c <__hexnan+0x130>
 800ca8a:	454c      	cmp	r4, r9
 800ca8c:	d206      	bcs.n	800ca9c <__hexnan+0xa0>
 800ca8e:	2d07      	cmp	r5, #7
 800ca90:	dc04      	bgt.n	800ca9c <__hexnan+0xa0>
 800ca92:	462a      	mov	r2, r5
 800ca94:	4649      	mov	r1, r9
 800ca96:	4620      	mov	r0, r4
 800ca98:	f7ff ff8a 	bl	800c9b0 <L_shift>
 800ca9c:	4544      	cmp	r4, r8
 800ca9e:	d934      	bls.n	800cb0a <__hexnan+0x10e>
 800caa0:	f1a8 0204 	sub.w	r2, r8, #4
 800caa4:	4623      	mov	r3, r4
 800caa6:	f853 1b04 	ldr.w	r1, [r3], #4
 800caaa:	f842 1f04 	str.w	r1, [r2, #4]!
 800caae:	429f      	cmp	r7, r3
 800cab0:	d2f9      	bcs.n	800caa6 <__hexnan+0xaa>
 800cab2:	1b3b      	subs	r3, r7, r4
 800cab4:	f023 0303 	bic.w	r3, r3, #3
 800cab8:	3304      	adds	r3, #4
 800caba:	3401      	adds	r4, #1
 800cabc:	3e03      	subs	r6, #3
 800cabe:	42b4      	cmp	r4, r6
 800cac0:	bf88      	it	hi
 800cac2:	2304      	movhi	r3, #4
 800cac4:	4443      	add	r3, r8
 800cac6:	2200      	movs	r2, #0
 800cac8:	f843 2b04 	str.w	r2, [r3], #4
 800cacc:	429f      	cmp	r7, r3
 800cace:	d2fb      	bcs.n	800cac8 <__hexnan+0xcc>
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	b91b      	cbnz	r3, 800cadc <__hexnan+0xe0>
 800cad4:	4547      	cmp	r7, r8
 800cad6:	d127      	bne.n	800cb28 <__hexnan+0x12c>
 800cad8:	2301      	movs	r3, #1
 800cada:	603b      	str	r3, [r7, #0]
 800cadc:	2005      	movs	r0, #5
 800cade:	e026      	b.n	800cb2e <__hexnan+0x132>
 800cae0:	3501      	adds	r5, #1
 800cae2:	2d08      	cmp	r5, #8
 800cae4:	f10b 0b01 	add.w	fp, fp, #1
 800cae8:	dd06      	ble.n	800caf8 <__hexnan+0xfc>
 800caea:	4544      	cmp	r4, r8
 800caec:	d9c3      	bls.n	800ca76 <__hexnan+0x7a>
 800caee:	2300      	movs	r3, #0
 800caf0:	f844 3c04 	str.w	r3, [r4, #-4]
 800caf4:	2501      	movs	r5, #1
 800caf6:	3c04      	subs	r4, #4
 800caf8:	6822      	ldr	r2, [r4, #0]
 800cafa:	f000 000f 	and.w	r0, r0, #15
 800cafe:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800cb02:	6022      	str	r2, [r4, #0]
 800cb04:	e7b7      	b.n	800ca76 <__hexnan+0x7a>
 800cb06:	2508      	movs	r5, #8
 800cb08:	e7b5      	b.n	800ca76 <__hexnan+0x7a>
 800cb0a:	9b01      	ldr	r3, [sp, #4]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d0df      	beq.n	800cad0 <__hexnan+0xd4>
 800cb10:	f04f 32ff 	mov.w	r2, #4294967295
 800cb14:	f1c3 0320 	rsb	r3, r3, #32
 800cb18:	fa22 f303 	lsr.w	r3, r2, r3
 800cb1c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cb20:	401a      	ands	r2, r3
 800cb22:	f846 2c04 	str.w	r2, [r6, #-4]
 800cb26:	e7d3      	b.n	800cad0 <__hexnan+0xd4>
 800cb28:	3f04      	subs	r7, #4
 800cb2a:	e7d1      	b.n	800cad0 <__hexnan+0xd4>
 800cb2c:	2004      	movs	r0, #4
 800cb2e:	b007      	add	sp, #28
 800cb30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cb34 <__swhatbuf_r>:
 800cb34:	b570      	push	{r4, r5, r6, lr}
 800cb36:	460e      	mov	r6, r1
 800cb38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb3c:	2900      	cmp	r1, #0
 800cb3e:	b096      	sub	sp, #88	; 0x58
 800cb40:	4614      	mov	r4, r2
 800cb42:	461d      	mov	r5, r3
 800cb44:	da07      	bge.n	800cb56 <__swhatbuf_r+0x22>
 800cb46:	2300      	movs	r3, #0
 800cb48:	602b      	str	r3, [r5, #0]
 800cb4a:	89b3      	ldrh	r3, [r6, #12]
 800cb4c:	061a      	lsls	r2, r3, #24
 800cb4e:	d410      	bmi.n	800cb72 <__swhatbuf_r+0x3e>
 800cb50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb54:	e00e      	b.n	800cb74 <__swhatbuf_r+0x40>
 800cb56:	466a      	mov	r2, sp
 800cb58:	f001 fb36 	bl	800e1c8 <_fstat_r>
 800cb5c:	2800      	cmp	r0, #0
 800cb5e:	dbf2      	blt.n	800cb46 <__swhatbuf_r+0x12>
 800cb60:	9a01      	ldr	r2, [sp, #4]
 800cb62:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cb66:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cb6a:	425a      	negs	r2, r3
 800cb6c:	415a      	adcs	r2, r3
 800cb6e:	602a      	str	r2, [r5, #0]
 800cb70:	e7ee      	b.n	800cb50 <__swhatbuf_r+0x1c>
 800cb72:	2340      	movs	r3, #64	; 0x40
 800cb74:	2000      	movs	r0, #0
 800cb76:	6023      	str	r3, [r4, #0]
 800cb78:	b016      	add	sp, #88	; 0x58
 800cb7a:	bd70      	pop	{r4, r5, r6, pc}

0800cb7c <__smakebuf_r>:
 800cb7c:	898b      	ldrh	r3, [r1, #12]
 800cb7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cb80:	079d      	lsls	r5, r3, #30
 800cb82:	4606      	mov	r6, r0
 800cb84:	460c      	mov	r4, r1
 800cb86:	d507      	bpl.n	800cb98 <__smakebuf_r+0x1c>
 800cb88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cb8c:	6023      	str	r3, [r4, #0]
 800cb8e:	6123      	str	r3, [r4, #16]
 800cb90:	2301      	movs	r3, #1
 800cb92:	6163      	str	r3, [r4, #20]
 800cb94:	b002      	add	sp, #8
 800cb96:	bd70      	pop	{r4, r5, r6, pc}
 800cb98:	ab01      	add	r3, sp, #4
 800cb9a:	466a      	mov	r2, sp
 800cb9c:	f7ff ffca 	bl	800cb34 <__swhatbuf_r>
 800cba0:	9900      	ldr	r1, [sp, #0]
 800cba2:	4605      	mov	r5, r0
 800cba4:	4630      	mov	r0, r6
 800cba6:	f000 fd55 	bl	800d654 <_malloc_r>
 800cbaa:	b948      	cbnz	r0, 800cbc0 <__smakebuf_r+0x44>
 800cbac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbb0:	059a      	lsls	r2, r3, #22
 800cbb2:	d4ef      	bmi.n	800cb94 <__smakebuf_r+0x18>
 800cbb4:	f023 0303 	bic.w	r3, r3, #3
 800cbb8:	f043 0302 	orr.w	r3, r3, #2
 800cbbc:	81a3      	strh	r3, [r4, #12]
 800cbbe:	e7e3      	b.n	800cb88 <__smakebuf_r+0xc>
 800cbc0:	4b0d      	ldr	r3, [pc, #52]	; (800cbf8 <__smakebuf_r+0x7c>)
 800cbc2:	62b3      	str	r3, [r6, #40]	; 0x28
 800cbc4:	89a3      	ldrh	r3, [r4, #12]
 800cbc6:	6020      	str	r0, [r4, #0]
 800cbc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbcc:	81a3      	strh	r3, [r4, #12]
 800cbce:	9b00      	ldr	r3, [sp, #0]
 800cbd0:	6163      	str	r3, [r4, #20]
 800cbd2:	9b01      	ldr	r3, [sp, #4]
 800cbd4:	6120      	str	r0, [r4, #16]
 800cbd6:	b15b      	cbz	r3, 800cbf0 <__smakebuf_r+0x74>
 800cbd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cbdc:	4630      	mov	r0, r6
 800cbde:	f001 fb05 	bl	800e1ec <_isatty_r>
 800cbe2:	b128      	cbz	r0, 800cbf0 <__smakebuf_r+0x74>
 800cbe4:	89a3      	ldrh	r3, [r4, #12]
 800cbe6:	f023 0303 	bic.w	r3, r3, #3
 800cbea:	f043 0301 	orr.w	r3, r3, #1
 800cbee:	81a3      	strh	r3, [r4, #12]
 800cbf0:	89a0      	ldrh	r0, [r4, #12]
 800cbf2:	4305      	orrs	r5, r0
 800cbf4:	81a5      	strh	r5, [r4, #12]
 800cbf6:	e7cd      	b.n	800cb94 <__smakebuf_r+0x18>
 800cbf8:	0800c2b5 	.word	0x0800c2b5

0800cbfc <__ascii_mbtowc>:
 800cbfc:	b082      	sub	sp, #8
 800cbfe:	b901      	cbnz	r1, 800cc02 <__ascii_mbtowc+0x6>
 800cc00:	a901      	add	r1, sp, #4
 800cc02:	b142      	cbz	r2, 800cc16 <__ascii_mbtowc+0x1a>
 800cc04:	b14b      	cbz	r3, 800cc1a <__ascii_mbtowc+0x1e>
 800cc06:	7813      	ldrb	r3, [r2, #0]
 800cc08:	600b      	str	r3, [r1, #0]
 800cc0a:	7812      	ldrb	r2, [r2, #0]
 800cc0c:	1e10      	subs	r0, r2, #0
 800cc0e:	bf18      	it	ne
 800cc10:	2001      	movne	r0, #1
 800cc12:	b002      	add	sp, #8
 800cc14:	4770      	bx	lr
 800cc16:	4610      	mov	r0, r2
 800cc18:	e7fb      	b.n	800cc12 <__ascii_mbtowc+0x16>
 800cc1a:	f06f 0001 	mvn.w	r0, #1
 800cc1e:	e7f8      	b.n	800cc12 <__ascii_mbtowc+0x16>

0800cc20 <_Balloc>:
 800cc20:	b570      	push	{r4, r5, r6, lr}
 800cc22:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cc24:	4604      	mov	r4, r0
 800cc26:	460d      	mov	r5, r1
 800cc28:	b976      	cbnz	r6, 800cc48 <_Balloc+0x28>
 800cc2a:	2010      	movs	r0, #16
 800cc2c:	f001 fb00 	bl	800e230 <malloc>
 800cc30:	4602      	mov	r2, r0
 800cc32:	6260      	str	r0, [r4, #36]	; 0x24
 800cc34:	b920      	cbnz	r0, 800cc40 <_Balloc+0x20>
 800cc36:	4b18      	ldr	r3, [pc, #96]	; (800cc98 <_Balloc+0x78>)
 800cc38:	4818      	ldr	r0, [pc, #96]	; (800cc9c <_Balloc+0x7c>)
 800cc3a:	2166      	movs	r1, #102	; 0x66
 800cc3c:	f001 fa84 	bl	800e148 <__assert_func>
 800cc40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cc44:	6006      	str	r6, [r0, #0]
 800cc46:	60c6      	str	r6, [r0, #12]
 800cc48:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cc4a:	68f3      	ldr	r3, [r6, #12]
 800cc4c:	b183      	cbz	r3, 800cc70 <_Balloc+0x50>
 800cc4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc50:	68db      	ldr	r3, [r3, #12]
 800cc52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cc56:	b9b8      	cbnz	r0, 800cc88 <_Balloc+0x68>
 800cc58:	2101      	movs	r1, #1
 800cc5a:	fa01 f605 	lsl.w	r6, r1, r5
 800cc5e:	1d72      	adds	r2, r6, #5
 800cc60:	0092      	lsls	r2, r2, #2
 800cc62:	4620      	mov	r0, r4
 800cc64:	f000 fc97 	bl	800d596 <_calloc_r>
 800cc68:	b160      	cbz	r0, 800cc84 <_Balloc+0x64>
 800cc6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cc6e:	e00e      	b.n	800cc8e <_Balloc+0x6e>
 800cc70:	2221      	movs	r2, #33	; 0x21
 800cc72:	2104      	movs	r1, #4
 800cc74:	4620      	mov	r0, r4
 800cc76:	f000 fc8e 	bl	800d596 <_calloc_r>
 800cc7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc7c:	60f0      	str	r0, [r6, #12]
 800cc7e:	68db      	ldr	r3, [r3, #12]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d1e4      	bne.n	800cc4e <_Balloc+0x2e>
 800cc84:	2000      	movs	r0, #0
 800cc86:	bd70      	pop	{r4, r5, r6, pc}
 800cc88:	6802      	ldr	r2, [r0, #0]
 800cc8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cc8e:	2300      	movs	r3, #0
 800cc90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cc94:	e7f7      	b.n	800cc86 <_Balloc+0x66>
 800cc96:	bf00      	nop
 800cc98:	0800ee60 	.word	0x0800ee60
 800cc9c:	0800ee77 	.word	0x0800ee77

0800cca0 <_Bfree>:
 800cca0:	b570      	push	{r4, r5, r6, lr}
 800cca2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cca4:	4605      	mov	r5, r0
 800cca6:	460c      	mov	r4, r1
 800cca8:	b976      	cbnz	r6, 800ccc8 <_Bfree+0x28>
 800ccaa:	2010      	movs	r0, #16
 800ccac:	f001 fac0 	bl	800e230 <malloc>
 800ccb0:	4602      	mov	r2, r0
 800ccb2:	6268      	str	r0, [r5, #36]	; 0x24
 800ccb4:	b920      	cbnz	r0, 800ccc0 <_Bfree+0x20>
 800ccb6:	4b09      	ldr	r3, [pc, #36]	; (800ccdc <_Bfree+0x3c>)
 800ccb8:	4809      	ldr	r0, [pc, #36]	; (800cce0 <_Bfree+0x40>)
 800ccba:	218a      	movs	r1, #138	; 0x8a
 800ccbc:	f001 fa44 	bl	800e148 <__assert_func>
 800ccc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ccc4:	6006      	str	r6, [r0, #0]
 800ccc6:	60c6      	str	r6, [r0, #12]
 800ccc8:	b13c      	cbz	r4, 800ccda <_Bfree+0x3a>
 800ccca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cccc:	6862      	ldr	r2, [r4, #4]
 800ccce:	68db      	ldr	r3, [r3, #12]
 800ccd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ccd4:	6021      	str	r1, [r4, #0]
 800ccd6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ccda:	bd70      	pop	{r4, r5, r6, pc}
 800ccdc:	0800ee60 	.word	0x0800ee60
 800cce0:	0800ee77 	.word	0x0800ee77

0800cce4 <__multadd>:
 800cce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cce8:	690e      	ldr	r6, [r1, #16]
 800ccea:	4607      	mov	r7, r0
 800ccec:	4698      	mov	r8, r3
 800ccee:	460c      	mov	r4, r1
 800ccf0:	f101 0014 	add.w	r0, r1, #20
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	6805      	ldr	r5, [r0, #0]
 800ccf8:	b2a9      	uxth	r1, r5
 800ccfa:	fb02 8101 	mla	r1, r2, r1, r8
 800ccfe:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800cd02:	0c2d      	lsrs	r5, r5, #16
 800cd04:	fb02 c505 	mla	r5, r2, r5, ip
 800cd08:	b289      	uxth	r1, r1
 800cd0a:	3301      	adds	r3, #1
 800cd0c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800cd10:	429e      	cmp	r6, r3
 800cd12:	f840 1b04 	str.w	r1, [r0], #4
 800cd16:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800cd1a:	dcec      	bgt.n	800ccf6 <__multadd+0x12>
 800cd1c:	f1b8 0f00 	cmp.w	r8, #0
 800cd20:	d022      	beq.n	800cd68 <__multadd+0x84>
 800cd22:	68a3      	ldr	r3, [r4, #8]
 800cd24:	42b3      	cmp	r3, r6
 800cd26:	dc19      	bgt.n	800cd5c <__multadd+0x78>
 800cd28:	6861      	ldr	r1, [r4, #4]
 800cd2a:	4638      	mov	r0, r7
 800cd2c:	3101      	adds	r1, #1
 800cd2e:	f7ff ff77 	bl	800cc20 <_Balloc>
 800cd32:	4605      	mov	r5, r0
 800cd34:	b928      	cbnz	r0, 800cd42 <__multadd+0x5e>
 800cd36:	4602      	mov	r2, r0
 800cd38:	4b0d      	ldr	r3, [pc, #52]	; (800cd70 <__multadd+0x8c>)
 800cd3a:	480e      	ldr	r0, [pc, #56]	; (800cd74 <__multadd+0x90>)
 800cd3c:	21b5      	movs	r1, #181	; 0xb5
 800cd3e:	f001 fa03 	bl	800e148 <__assert_func>
 800cd42:	6922      	ldr	r2, [r4, #16]
 800cd44:	3202      	adds	r2, #2
 800cd46:	f104 010c 	add.w	r1, r4, #12
 800cd4a:	0092      	lsls	r2, r2, #2
 800cd4c:	300c      	adds	r0, #12
 800cd4e:	f7fe f8cc 	bl	800aeea <memcpy>
 800cd52:	4621      	mov	r1, r4
 800cd54:	4638      	mov	r0, r7
 800cd56:	f7ff ffa3 	bl	800cca0 <_Bfree>
 800cd5a:	462c      	mov	r4, r5
 800cd5c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800cd60:	3601      	adds	r6, #1
 800cd62:	f8c3 8014 	str.w	r8, [r3, #20]
 800cd66:	6126      	str	r6, [r4, #16]
 800cd68:	4620      	mov	r0, r4
 800cd6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd6e:	bf00      	nop
 800cd70:	0800edd0 	.word	0x0800edd0
 800cd74:	0800ee77 	.word	0x0800ee77

0800cd78 <__s2b>:
 800cd78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd7c:	460c      	mov	r4, r1
 800cd7e:	4615      	mov	r5, r2
 800cd80:	461f      	mov	r7, r3
 800cd82:	2209      	movs	r2, #9
 800cd84:	3308      	adds	r3, #8
 800cd86:	4606      	mov	r6, r0
 800cd88:	fb93 f3f2 	sdiv	r3, r3, r2
 800cd8c:	2100      	movs	r1, #0
 800cd8e:	2201      	movs	r2, #1
 800cd90:	429a      	cmp	r2, r3
 800cd92:	db09      	blt.n	800cda8 <__s2b+0x30>
 800cd94:	4630      	mov	r0, r6
 800cd96:	f7ff ff43 	bl	800cc20 <_Balloc>
 800cd9a:	b940      	cbnz	r0, 800cdae <__s2b+0x36>
 800cd9c:	4602      	mov	r2, r0
 800cd9e:	4b19      	ldr	r3, [pc, #100]	; (800ce04 <__s2b+0x8c>)
 800cda0:	4819      	ldr	r0, [pc, #100]	; (800ce08 <__s2b+0x90>)
 800cda2:	21ce      	movs	r1, #206	; 0xce
 800cda4:	f001 f9d0 	bl	800e148 <__assert_func>
 800cda8:	0052      	lsls	r2, r2, #1
 800cdaa:	3101      	adds	r1, #1
 800cdac:	e7f0      	b.n	800cd90 <__s2b+0x18>
 800cdae:	9b08      	ldr	r3, [sp, #32]
 800cdb0:	6143      	str	r3, [r0, #20]
 800cdb2:	2d09      	cmp	r5, #9
 800cdb4:	f04f 0301 	mov.w	r3, #1
 800cdb8:	6103      	str	r3, [r0, #16]
 800cdba:	dd16      	ble.n	800cdea <__s2b+0x72>
 800cdbc:	f104 0909 	add.w	r9, r4, #9
 800cdc0:	46c8      	mov	r8, r9
 800cdc2:	442c      	add	r4, r5
 800cdc4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cdc8:	4601      	mov	r1, r0
 800cdca:	3b30      	subs	r3, #48	; 0x30
 800cdcc:	220a      	movs	r2, #10
 800cdce:	4630      	mov	r0, r6
 800cdd0:	f7ff ff88 	bl	800cce4 <__multadd>
 800cdd4:	45a0      	cmp	r8, r4
 800cdd6:	d1f5      	bne.n	800cdc4 <__s2b+0x4c>
 800cdd8:	f1a5 0408 	sub.w	r4, r5, #8
 800cddc:	444c      	add	r4, r9
 800cdde:	1b2d      	subs	r5, r5, r4
 800cde0:	1963      	adds	r3, r4, r5
 800cde2:	42bb      	cmp	r3, r7
 800cde4:	db04      	blt.n	800cdf0 <__s2b+0x78>
 800cde6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdea:	340a      	adds	r4, #10
 800cdec:	2509      	movs	r5, #9
 800cdee:	e7f6      	b.n	800cdde <__s2b+0x66>
 800cdf0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cdf4:	4601      	mov	r1, r0
 800cdf6:	3b30      	subs	r3, #48	; 0x30
 800cdf8:	220a      	movs	r2, #10
 800cdfa:	4630      	mov	r0, r6
 800cdfc:	f7ff ff72 	bl	800cce4 <__multadd>
 800ce00:	e7ee      	b.n	800cde0 <__s2b+0x68>
 800ce02:	bf00      	nop
 800ce04:	0800edd0 	.word	0x0800edd0
 800ce08:	0800ee77 	.word	0x0800ee77

0800ce0c <__hi0bits>:
 800ce0c:	0c03      	lsrs	r3, r0, #16
 800ce0e:	041b      	lsls	r3, r3, #16
 800ce10:	b9d3      	cbnz	r3, 800ce48 <__hi0bits+0x3c>
 800ce12:	0400      	lsls	r0, r0, #16
 800ce14:	2310      	movs	r3, #16
 800ce16:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ce1a:	bf04      	itt	eq
 800ce1c:	0200      	lsleq	r0, r0, #8
 800ce1e:	3308      	addeq	r3, #8
 800ce20:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ce24:	bf04      	itt	eq
 800ce26:	0100      	lsleq	r0, r0, #4
 800ce28:	3304      	addeq	r3, #4
 800ce2a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ce2e:	bf04      	itt	eq
 800ce30:	0080      	lsleq	r0, r0, #2
 800ce32:	3302      	addeq	r3, #2
 800ce34:	2800      	cmp	r0, #0
 800ce36:	db05      	blt.n	800ce44 <__hi0bits+0x38>
 800ce38:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ce3c:	f103 0301 	add.w	r3, r3, #1
 800ce40:	bf08      	it	eq
 800ce42:	2320      	moveq	r3, #32
 800ce44:	4618      	mov	r0, r3
 800ce46:	4770      	bx	lr
 800ce48:	2300      	movs	r3, #0
 800ce4a:	e7e4      	b.n	800ce16 <__hi0bits+0xa>

0800ce4c <__lo0bits>:
 800ce4c:	6803      	ldr	r3, [r0, #0]
 800ce4e:	f013 0207 	ands.w	r2, r3, #7
 800ce52:	4601      	mov	r1, r0
 800ce54:	d00b      	beq.n	800ce6e <__lo0bits+0x22>
 800ce56:	07da      	lsls	r2, r3, #31
 800ce58:	d424      	bmi.n	800cea4 <__lo0bits+0x58>
 800ce5a:	0798      	lsls	r0, r3, #30
 800ce5c:	bf49      	itett	mi
 800ce5e:	085b      	lsrmi	r3, r3, #1
 800ce60:	089b      	lsrpl	r3, r3, #2
 800ce62:	2001      	movmi	r0, #1
 800ce64:	600b      	strmi	r3, [r1, #0]
 800ce66:	bf5c      	itt	pl
 800ce68:	600b      	strpl	r3, [r1, #0]
 800ce6a:	2002      	movpl	r0, #2
 800ce6c:	4770      	bx	lr
 800ce6e:	b298      	uxth	r0, r3
 800ce70:	b9b0      	cbnz	r0, 800cea0 <__lo0bits+0x54>
 800ce72:	0c1b      	lsrs	r3, r3, #16
 800ce74:	2010      	movs	r0, #16
 800ce76:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ce7a:	bf04      	itt	eq
 800ce7c:	0a1b      	lsreq	r3, r3, #8
 800ce7e:	3008      	addeq	r0, #8
 800ce80:	071a      	lsls	r2, r3, #28
 800ce82:	bf04      	itt	eq
 800ce84:	091b      	lsreq	r3, r3, #4
 800ce86:	3004      	addeq	r0, #4
 800ce88:	079a      	lsls	r2, r3, #30
 800ce8a:	bf04      	itt	eq
 800ce8c:	089b      	lsreq	r3, r3, #2
 800ce8e:	3002      	addeq	r0, #2
 800ce90:	07da      	lsls	r2, r3, #31
 800ce92:	d403      	bmi.n	800ce9c <__lo0bits+0x50>
 800ce94:	085b      	lsrs	r3, r3, #1
 800ce96:	f100 0001 	add.w	r0, r0, #1
 800ce9a:	d005      	beq.n	800cea8 <__lo0bits+0x5c>
 800ce9c:	600b      	str	r3, [r1, #0]
 800ce9e:	4770      	bx	lr
 800cea0:	4610      	mov	r0, r2
 800cea2:	e7e8      	b.n	800ce76 <__lo0bits+0x2a>
 800cea4:	2000      	movs	r0, #0
 800cea6:	4770      	bx	lr
 800cea8:	2020      	movs	r0, #32
 800ceaa:	4770      	bx	lr

0800ceac <__i2b>:
 800ceac:	b510      	push	{r4, lr}
 800ceae:	460c      	mov	r4, r1
 800ceb0:	2101      	movs	r1, #1
 800ceb2:	f7ff feb5 	bl	800cc20 <_Balloc>
 800ceb6:	4602      	mov	r2, r0
 800ceb8:	b928      	cbnz	r0, 800cec6 <__i2b+0x1a>
 800ceba:	4b05      	ldr	r3, [pc, #20]	; (800ced0 <__i2b+0x24>)
 800cebc:	4805      	ldr	r0, [pc, #20]	; (800ced4 <__i2b+0x28>)
 800cebe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cec2:	f001 f941 	bl	800e148 <__assert_func>
 800cec6:	2301      	movs	r3, #1
 800cec8:	6144      	str	r4, [r0, #20]
 800ceca:	6103      	str	r3, [r0, #16]
 800cecc:	bd10      	pop	{r4, pc}
 800cece:	bf00      	nop
 800ced0:	0800edd0 	.word	0x0800edd0
 800ced4:	0800ee77 	.word	0x0800ee77

0800ced8 <__multiply>:
 800ced8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cedc:	4614      	mov	r4, r2
 800cede:	690a      	ldr	r2, [r1, #16]
 800cee0:	6923      	ldr	r3, [r4, #16]
 800cee2:	429a      	cmp	r2, r3
 800cee4:	bfb8      	it	lt
 800cee6:	460b      	movlt	r3, r1
 800cee8:	460d      	mov	r5, r1
 800ceea:	bfbc      	itt	lt
 800ceec:	4625      	movlt	r5, r4
 800ceee:	461c      	movlt	r4, r3
 800cef0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800cef4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800cef8:	68ab      	ldr	r3, [r5, #8]
 800cefa:	6869      	ldr	r1, [r5, #4]
 800cefc:	eb0a 0709 	add.w	r7, sl, r9
 800cf00:	42bb      	cmp	r3, r7
 800cf02:	b085      	sub	sp, #20
 800cf04:	bfb8      	it	lt
 800cf06:	3101      	addlt	r1, #1
 800cf08:	f7ff fe8a 	bl	800cc20 <_Balloc>
 800cf0c:	b930      	cbnz	r0, 800cf1c <__multiply+0x44>
 800cf0e:	4602      	mov	r2, r0
 800cf10:	4b42      	ldr	r3, [pc, #264]	; (800d01c <__multiply+0x144>)
 800cf12:	4843      	ldr	r0, [pc, #268]	; (800d020 <__multiply+0x148>)
 800cf14:	f240 115d 	movw	r1, #349	; 0x15d
 800cf18:	f001 f916 	bl	800e148 <__assert_func>
 800cf1c:	f100 0614 	add.w	r6, r0, #20
 800cf20:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800cf24:	4633      	mov	r3, r6
 800cf26:	2200      	movs	r2, #0
 800cf28:	4543      	cmp	r3, r8
 800cf2a:	d31e      	bcc.n	800cf6a <__multiply+0x92>
 800cf2c:	f105 0c14 	add.w	ip, r5, #20
 800cf30:	f104 0314 	add.w	r3, r4, #20
 800cf34:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800cf38:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800cf3c:	9202      	str	r2, [sp, #8]
 800cf3e:	ebac 0205 	sub.w	r2, ip, r5
 800cf42:	3a15      	subs	r2, #21
 800cf44:	f022 0203 	bic.w	r2, r2, #3
 800cf48:	3204      	adds	r2, #4
 800cf4a:	f105 0115 	add.w	r1, r5, #21
 800cf4e:	458c      	cmp	ip, r1
 800cf50:	bf38      	it	cc
 800cf52:	2204      	movcc	r2, #4
 800cf54:	9201      	str	r2, [sp, #4]
 800cf56:	9a02      	ldr	r2, [sp, #8]
 800cf58:	9303      	str	r3, [sp, #12]
 800cf5a:	429a      	cmp	r2, r3
 800cf5c:	d808      	bhi.n	800cf70 <__multiply+0x98>
 800cf5e:	2f00      	cmp	r7, #0
 800cf60:	dc55      	bgt.n	800d00e <__multiply+0x136>
 800cf62:	6107      	str	r7, [r0, #16]
 800cf64:	b005      	add	sp, #20
 800cf66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf6a:	f843 2b04 	str.w	r2, [r3], #4
 800cf6e:	e7db      	b.n	800cf28 <__multiply+0x50>
 800cf70:	f8b3 a000 	ldrh.w	sl, [r3]
 800cf74:	f1ba 0f00 	cmp.w	sl, #0
 800cf78:	d020      	beq.n	800cfbc <__multiply+0xe4>
 800cf7a:	f105 0e14 	add.w	lr, r5, #20
 800cf7e:	46b1      	mov	r9, r6
 800cf80:	2200      	movs	r2, #0
 800cf82:	f85e 4b04 	ldr.w	r4, [lr], #4
 800cf86:	f8d9 b000 	ldr.w	fp, [r9]
 800cf8a:	b2a1      	uxth	r1, r4
 800cf8c:	fa1f fb8b 	uxth.w	fp, fp
 800cf90:	fb0a b101 	mla	r1, sl, r1, fp
 800cf94:	4411      	add	r1, r2
 800cf96:	f8d9 2000 	ldr.w	r2, [r9]
 800cf9a:	0c24      	lsrs	r4, r4, #16
 800cf9c:	0c12      	lsrs	r2, r2, #16
 800cf9e:	fb0a 2404 	mla	r4, sl, r4, r2
 800cfa2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800cfa6:	b289      	uxth	r1, r1
 800cfa8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800cfac:	45f4      	cmp	ip, lr
 800cfae:	f849 1b04 	str.w	r1, [r9], #4
 800cfb2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800cfb6:	d8e4      	bhi.n	800cf82 <__multiply+0xaa>
 800cfb8:	9901      	ldr	r1, [sp, #4]
 800cfba:	5072      	str	r2, [r6, r1]
 800cfbc:	9a03      	ldr	r2, [sp, #12]
 800cfbe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cfc2:	3304      	adds	r3, #4
 800cfc4:	f1b9 0f00 	cmp.w	r9, #0
 800cfc8:	d01f      	beq.n	800d00a <__multiply+0x132>
 800cfca:	6834      	ldr	r4, [r6, #0]
 800cfcc:	f105 0114 	add.w	r1, r5, #20
 800cfd0:	46b6      	mov	lr, r6
 800cfd2:	f04f 0a00 	mov.w	sl, #0
 800cfd6:	880a      	ldrh	r2, [r1, #0]
 800cfd8:	f8be b002 	ldrh.w	fp, [lr, #2]
 800cfdc:	fb09 b202 	mla	r2, r9, r2, fp
 800cfe0:	4492      	add	sl, r2
 800cfe2:	b2a4      	uxth	r4, r4
 800cfe4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800cfe8:	f84e 4b04 	str.w	r4, [lr], #4
 800cfec:	f851 4b04 	ldr.w	r4, [r1], #4
 800cff0:	f8be 2000 	ldrh.w	r2, [lr]
 800cff4:	0c24      	lsrs	r4, r4, #16
 800cff6:	fb09 2404 	mla	r4, r9, r4, r2
 800cffa:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800cffe:	458c      	cmp	ip, r1
 800d000:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d004:	d8e7      	bhi.n	800cfd6 <__multiply+0xfe>
 800d006:	9a01      	ldr	r2, [sp, #4]
 800d008:	50b4      	str	r4, [r6, r2]
 800d00a:	3604      	adds	r6, #4
 800d00c:	e7a3      	b.n	800cf56 <__multiply+0x7e>
 800d00e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d012:	2b00      	cmp	r3, #0
 800d014:	d1a5      	bne.n	800cf62 <__multiply+0x8a>
 800d016:	3f01      	subs	r7, #1
 800d018:	e7a1      	b.n	800cf5e <__multiply+0x86>
 800d01a:	bf00      	nop
 800d01c:	0800edd0 	.word	0x0800edd0
 800d020:	0800ee77 	.word	0x0800ee77

0800d024 <__pow5mult>:
 800d024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d028:	4615      	mov	r5, r2
 800d02a:	f012 0203 	ands.w	r2, r2, #3
 800d02e:	4606      	mov	r6, r0
 800d030:	460f      	mov	r7, r1
 800d032:	d007      	beq.n	800d044 <__pow5mult+0x20>
 800d034:	4c25      	ldr	r4, [pc, #148]	; (800d0cc <__pow5mult+0xa8>)
 800d036:	3a01      	subs	r2, #1
 800d038:	2300      	movs	r3, #0
 800d03a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d03e:	f7ff fe51 	bl	800cce4 <__multadd>
 800d042:	4607      	mov	r7, r0
 800d044:	10ad      	asrs	r5, r5, #2
 800d046:	d03d      	beq.n	800d0c4 <__pow5mult+0xa0>
 800d048:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d04a:	b97c      	cbnz	r4, 800d06c <__pow5mult+0x48>
 800d04c:	2010      	movs	r0, #16
 800d04e:	f001 f8ef 	bl	800e230 <malloc>
 800d052:	4602      	mov	r2, r0
 800d054:	6270      	str	r0, [r6, #36]	; 0x24
 800d056:	b928      	cbnz	r0, 800d064 <__pow5mult+0x40>
 800d058:	4b1d      	ldr	r3, [pc, #116]	; (800d0d0 <__pow5mult+0xac>)
 800d05a:	481e      	ldr	r0, [pc, #120]	; (800d0d4 <__pow5mult+0xb0>)
 800d05c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d060:	f001 f872 	bl	800e148 <__assert_func>
 800d064:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d068:	6004      	str	r4, [r0, #0]
 800d06a:	60c4      	str	r4, [r0, #12]
 800d06c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d070:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d074:	b94c      	cbnz	r4, 800d08a <__pow5mult+0x66>
 800d076:	f240 2171 	movw	r1, #625	; 0x271
 800d07a:	4630      	mov	r0, r6
 800d07c:	f7ff ff16 	bl	800ceac <__i2b>
 800d080:	2300      	movs	r3, #0
 800d082:	f8c8 0008 	str.w	r0, [r8, #8]
 800d086:	4604      	mov	r4, r0
 800d088:	6003      	str	r3, [r0, #0]
 800d08a:	f04f 0900 	mov.w	r9, #0
 800d08e:	07eb      	lsls	r3, r5, #31
 800d090:	d50a      	bpl.n	800d0a8 <__pow5mult+0x84>
 800d092:	4639      	mov	r1, r7
 800d094:	4622      	mov	r2, r4
 800d096:	4630      	mov	r0, r6
 800d098:	f7ff ff1e 	bl	800ced8 <__multiply>
 800d09c:	4639      	mov	r1, r7
 800d09e:	4680      	mov	r8, r0
 800d0a0:	4630      	mov	r0, r6
 800d0a2:	f7ff fdfd 	bl	800cca0 <_Bfree>
 800d0a6:	4647      	mov	r7, r8
 800d0a8:	106d      	asrs	r5, r5, #1
 800d0aa:	d00b      	beq.n	800d0c4 <__pow5mult+0xa0>
 800d0ac:	6820      	ldr	r0, [r4, #0]
 800d0ae:	b938      	cbnz	r0, 800d0c0 <__pow5mult+0x9c>
 800d0b0:	4622      	mov	r2, r4
 800d0b2:	4621      	mov	r1, r4
 800d0b4:	4630      	mov	r0, r6
 800d0b6:	f7ff ff0f 	bl	800ced8 <__multiply>
 800d0ba:	6020      	str	r0, [r4, #0]
 800d0bc:	f8c0 9000 	str.w	r9, [r0]
 800d0c0:	4604      	mov	r4, r0
 800d0c2:	e7e4      	b.n	800d08e <__pow5mult+0x6a>
 800d0c4:	4638      	mov	r0, r7
 800d0c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0ca:	bf00      	nop
 800d0cc:	0800efc8 	.word	0x0800efc8
 800d0d0:	0800ee60 	.word	0x0800ee60
 800d0d4:	0800ee77 	.word	0x0800ee77

0800d0d8 <__lshift>:
 800d0d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0dc:	460c      	mov	r4, r1
 800d0de:	6849      	ldr	r1, [r1, #4]
 800d0e0:	6923      	ldr	r3, [r4, #16]
 800d0e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d0e6:	68a3      	ldr	r3, [r4, #8]
 800d0e8:	4607      	mov	r7, r0
 800d0ea:	4691      	mov	r9, r2
 800d0ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d0f0:	f108 0601 	add.w	r6, r8, #1
 800d0f4:	42b3      	cmp	r3, r6
 800d0f6:	db0b      	blt.n	800d110 <__lshift+0x38>
 800d0f8:	4638      	mov	r0, r7
 800d0fa:	f7ff fd91 	bl	800cc20 <_Balloc>
 800d0fe:	4605      	mov	r5, r0
 800d100:	b948      	cbnz	r0, 800d116 <__lshift+0x3e>
 800d102:	4602      	mov	r2, r0
 800d104:	4b28      	ldr	r3, [pc, #160]	; (800d1a8 <__lshift+0xd0>)
 800d106:	4829      	ldr	r0, [pc, #164]	; (800d1ac <__lshift+0xd4>)
 800d108:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d10c:	f001 f81c 	bl	800e148 <__assert_func>
 800d110:	3101      	adds	r1, #1
 800d112:	005b      	lsls	r3, r3, #1
 800d114:	e7ee      	b.n	800d0f4 <__lshift+0x1c>
 800d116:	2300      	movs	r3, #0
 800d118:	f100 0114 	add.w	r1, r0, #20
 800d11c:	f100 0210 	add.w	r2, r0, #16
 800d120:	4618      	mov	r0, r3
 800d122:	4553      	cmp	r3, sl
 800d124:	db33      	blt.n	800d18e <__lshift+0xb6>
 800d126:	6920      	ldr	r0, [r4, #16]
 800d128:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d12c:	f104 0314 	add.w	r3, r4, #20
 800d130:	f019 091f 	ands.w	r9, r9, #31
 800d134:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d138:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d13c:	d02b      	beq.n	800d196 <__lshift+0xbe>
 800d13e:	f1c9 0e20 	rsb	lr, r9, #32
 800d142:	468a      	mov	sl, r1
 800d144:	2200      	movs	r2, #0
 800d146:	6818      	ldr	r0, [r3, #0]
 800d148:	fa00 f009 	lsl.w	r0, r0, r9
 800d14c:	4302      	orrs	r2, r0
 800d14e:	f84a 2b04 	str.w	r2, [sl], #4
 800d152:	f853 2b04 	ldr.w	r2, [r3], #4
 800d156:	459c      	cmp	ip, r3
 800d158:	fa22 f20e 	lsr.w	r2, r2, lr
 800d15c:	d8f3      	bhi.n	800d146 <__lshift+0x6e>
 800d15e:	ebac 0304 	sub.w	r3, ip, r4
 800d162:	3b15      	subs	r3, #21
 800d164:	f023 0303 	bic.w	r3, r3, #3
 800d168:	3304      	adds	r3, #4
 800d16a:	f104 0015 	add.w	r0, r4, #21
 800d16e:	4584      	cmp	ip, r0
 800d170:	bf38      	it	cc
 800d172:	2304      	movcc	r3, #4
 800d174:	50ca      	str	r2, [r1, r3]
 800d176:	b10a      	cbz	r2, 800d17c <__lshift+0xa4>
 800d178:	f108 0602 	add.w	r6, r8, #2
 800d17c:	3e01      	subs	r6, #1
 800d17e:	4638      	mov	r0, r7
 800d180:	612e      	str	r6, [r5, #16]
 800d182:	4621      	mov	r1, r4
 800d184:	f7ff fd8c 	bl	800cca0 <_Bfree>
 800d188:	4628      	mov	r0, r5
 800d18a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d18e:	f842 0f04 	str.w	r0, [r2, #4]!
 800d192:	3301      	adds	r3, #1
 800d194:	e7c5      	b.n	800d122 <__lshift+0x4a>
 800d196:	3904      	subs	r1, #4
 800d198:	f853 2b04 	ldr.w	r2, [r3], #4
 800d19c:	f841 2f04 	str.w	r2, [r1, #4]!
 800d1a0:	459c      	cmp	ip, r3
 800d1a2:	d8f9      	bhi.n	800d198 <__lshift+0xc0>
 800d1a4:	e7ea      	b.n	800d17c <__lshift+0xa4>
 800d1a6:	bf00      	nop
 800d1a8:	0800edd0 	.word	0x0800edd0
 800d1ac:	0800ee77 	.word	0x0800ee77

0800d1b0 <__mcmp>:
 800d1b0:	b530      	push	{r4, r5, lr}
 800d1b2:	6902      	ldr	r2, [r0, #16]
 800d1b4:	690c      	ldr	r4, [r1, #16]
 800d1b6:	1b12      	subs	r2, r2, r4
 800d1b8:	d10e      	bne.n	800d1d8 <__mcmp+0x28>
 800d1ba:	f100 0314 	add.w	r3, r0, #20
 800d1be:	3114      	adds	r1, #20
 800d1c0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d1c4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d1c8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d1cc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d1d0:	42a5      	cmp	r5, r4
 800d1d2:	d003      	beq.n	800d1dc <__mcmp+0x2c>
 800d1d4:	d305      	bcc.n	800d1e2 <__mcmp+0x32>
 800d1d6:	2201      	movs	r2, #1
 800d1d8:	4610      	mov	r0, r2
 800d1da:	bd30      	pop	{r4, r5, pc}
 800d1dc:	4283      	cmp	r3, r0
 800d1de:	d3f3      	bcc.n	800d1c8 <__mcmp+0x18>
 800d1e0:	e7fa      	b.n	800d1d8 <__mcmp+0x28>
 800d1e2:	f04f 32ff 	mov.w	r2, #4294967295
 800d1e6:	e7f7      	b.n	800d1d8 <__mcmp+0x28>

0800d1e8 <__mdiff>:
 800d1e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1ec:	460c      	mov	r4, r1
 800d1ee:	4606      	mov	r6, r0
 800d1f0:	4611      	mov	r1, r2
 800d1f2:	4620      	mov	r0, r4
 800d1f4:	4617      	mov	r7, r2
 800d1f6:	f7ff ffdb 	bl	800d1b0 <__mcmp>
 800d1fa:	1e05      	subs	r5, r0, #0
 800d1fc:	d110      	bne.n	800d220 <__mdiff+0x38>
 800d1fe:	4629      	mov	r1, r5
 800d200:	4630      	mov	r0, r6
 800d202:	f7ff fd0d 	bl	800cc20 <_Balloc>
 800d206:	b930      	cbnz	r0, 800d216 <__mdiff+0x2e>
 800d208:	4b39      	ldr	r3, [pc, #228]	; (800d2f0 <__mdiff+0x108>)
 800d20a:	4602      	mov	r2, r0
 800d20c:	f240 2132 	movw	r1, #562	; 0x232
 800d210:	4838      	ldr	r0, [pc, #224]	; (800d2f4 <__mdiff+0x10c>)
 800d212:	f000 ff99 	bl	800e148 <__assert_func>
 800d216:	2301      	movs	r3, #1
 800d218:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d21c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d220:	bfa4      	itt	ge
 800d222:	463b      	movge	r3, r7
 800d224:	4627      	movge	r7, r4
 800d226:	4630      	mov	r0, r6
 800d228:	6879      	ldr	r1, [r7, #4]
 800d22a:	bfa6      	itte	ge
 800d22c:	461c      	movge	r4, r3
 800d22e:	2500      	movge	r5, #0
 800d230:	2501      	movlt	r5, #1
 800d232:	f7ff fcf5 	bl	800cc20 <_Balloc>
 800d236:	b920      	cbnz	r0, 800d242 <__mdiff+0x5a>
 800d238:	4b2d      	ldr	r3, [pc, #180]	; (800d2f0 <__mdiff+0x108>)
 800d23a:	4602      	mov	r2, r0
 800d23c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d240:	e7e6      	b.n	800d210 <__mdiff+0x28>
 800d242:	693e      	ldr	r6, [r7, #16]
 800d244:	60c5      	str	r5, [r0, #12]
 800d246:	6925      	ldr	r5, [r4, #16]
 800d248:	f107 0114 	add.w	r1, r7, #20
 800d24c:	f104 0914 	add.w	r9, r4, #20
 800d250:	f100 0e14 	add.w	lr, r0, #20
 800d254:	f107 0210 	add.w	r2, r7, #16
 800d258:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800d25c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800d260:	46f2      	mov	sl, lr
 800d262:	2700      	movs	r7, #0
 800d264:	f859 3b04 	ldr.w	r3, [r9], #4
 800d268:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d26c:	fa1f f883 	uxth.w	r8, r3
 800d270:	fa17 f78b 	uxtah	r7, r7, fp
 800d274:	0c1b      	lsrs	r3, r3, #16
 800d276:	eba7 0808 	sub.w	r8, r7, r8
 800d27a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d27e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d282:	fa1f f888 	uxth.w	r8, r8
 800d286:	141f      	asrs	r7, r3, #16
 800d288:	454d      	cmp	r5, r9
 800d28a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d28e:	f84a 3b04 	str.w	r3, [sl], #4
 800d292:	d8e7      	bhi.n	800d264 <__mdiff+0x7c>
 800d294:	1b2b      	subs	r3, r5, r4
 800d296:	3b15      	subs	r3, #21
 800d298:	f023 0303 	bic.w	r3, r3, #3
 800d29c:	3304      	adds	r3, #4
 800d29e:	3415      	adds	r4, #21
 800d2a0:	42a5      	cmp	r5, r4
 800d2a2:	bf38      	it	cc
 800d2a4:	2304      	movcc	r3, #4
 800d2a6:	4419      	add	r1, r3
 800d2a8:	4473      	add	r3, lr
 800d2aa:	469e      	mov	lr, r3
 800d2ac:	460d      	mov	r5, r1
 800d2ae:	4565      	cmp	r5, ip
 800d2b0:	d30e      	bcc.n	800d2d0 <__mdiff+0xe8>
 800d2b2:	f10c 0203 	add.w	r2, ip, #3
 800d2b6:	1a52      	subs	r2, r2, r1
 800d2b8:	f022 0203 	bic.w	r2, r2, #3
 800d2bc:	3903      	subs	r1, #3
 800d2be:	458c      	cmp	ip, r1
 800d2c0:	bf38      	it	cc
 800d2c2:	2200      	movcc	r2, #0
 800d2c4:	441a      	add	r2, r3
 800d2c6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d2ca:	b17b      	cbz	r3, 800d2ec <__mdiff+0x104>
 800d2cc:	6106      	str	r6, [r0, #16]
 800d2ce:	e7a5      	b.n	800d21c <__mdiff+0x34>
 800d2d0:	f855 8b04 	ldr.w	r8, [r5], #4
 800d2d4:	fa17 f488 	uxtah	r4, r7, r8
 800d2d8:	1422      	asrs	r2, r4, #16
 800d2da:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800d2de:	b2a4      	uxth	r4, r4
 800d2e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800d2e4:	f84e 4b04 	str.w	r4, [lr], #4
 800d2e8:	1417      	asrs	r7, r2, #16
 800d2ea:	e7e0      	b.n	800d2ae <__mdiff+0xc6>
 800d2ec:	3e01      	subs	r6, #1
 800d2ee:	e7ea      	b.n	800d2c6 <__mdiff+0xde>
 800d2f0:	0800edd0 	.word	0x0800edd0
 800d2f4:	0800ee77 	.word	0x0800ee77

0800d2f8 <__ulp>:
 800d2f8:	b082      	sub	sp, #8
 800d2fa:	ed8d 0b00 	vstr	d0, [sp]
 800d2fe:	9b01      	ldr	r3, [sp, #4]
 800d300:	4912      	ldr	r1, [pc, #72]	; (800d34c <__ulp+0x54>)
 800d302:	4019      	ands	r1, r3
 800d304:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d308:	2900      	cmp	r1, #0
 800d30a:	dd05      	ble.n	800d318 <__ulp+0x20>
 800d30c:	2200      	movs	r2, #0
 800d30e:	460b      	mov	r3, r1
 800d310:	ec43 2b10 	vmov	d0, r2, r3
 800d314:	b002      	add	sp, #8
 800d316:	4770      	bx	lr
 800d318:	4249      	negs	r1, r1
 800d31a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d31e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d322:	f04f 0200 	mov.w	r2, #0
 800d326:	f04f 0300 	mov.w	r3, #0
 800d32a:	da04      	bge.n	800d336 <__ulp+0x3e>
 800d32c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d330:	fa41 f300 	asr.w	r3, r1, r0
 800d334:	e7ec      	b.n	800d310 <__ulp+0x18>
 800d336:	f1a0 0114 	sub.w	r1, r0, #20
 800d33a:	291e      	cmp	r1, #30
 800d33c:	bfda      	itte	le
 800d33e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d342:	fa20 f101 	lsrle.w	r1, r0, r1
 800d346:	2101      	movgt	r1, #1
 800d348:	460a      	mov	r2, r1
 800d34a:	e7e1      	b.n	800d310 <__ulp+0x18>
 800d34c:	7ff00000 	.word	0x7ff00000

0800d350 <__b2d>:
 800d350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d352:	6905      	ldr	r5, [r0, #16]
 800d354:	f100 0714 	add.w	r7, r0, #20
 800d358:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d35c:	1f2e      	subs	r6, r5, #4
 800d35e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d362:	4620      	mov	r0, r4
 800d364:	f7ff fd52 	bl	800ce0c <__hi0bits>
 800d368:	f1c0 0320 	rsb	r3, r0, #32
 800d36c:	280a      	cmp	r0, #10
 800d36e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d3ec <__b2d+0x9c>
 800d372:	600b      	str	r3, [r1, #0]
 800d374:	dc14      	bgt.n	800d3a0 <__b2d+0x50>
 800d376:	f1c0 0e0b 	rsb	lr, r0, #11
 800d37a:	fa24 f10e 	lsr.w	r1, r4, lr
 800d37e:	42b7      	cmp	r7, r6
 800d380:	ea41 030c 	orr.w	r3, r1, ip
 800d384:	bf34      	ite	cc
 800d386:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d38a:	2100      	movcs	r1, #0
 800d38c:	3015      	adds	r0, #21
 800d38e:	fa04 f000 	lsl.w	r0, r4, r0
 800d392:	fa21 f10e 	lsr.w	r1, r1, lr
 800d396:	ea40 0201 	orr.w	r2, r0, r1
 800d39a:	ec43 2b10 	vmov	d0, r2, r3
 800d39e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3a0:	42b7      	cmp	r7, r6
 800d3a2:	bf3a      	itte	cc
 800d3a4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d3a8:	f1a5 0608 	subcc.w	r6, r5, #8
 800d3ac:	2100      	movcs	r1, #0
 800d3ae:	380b      	subs	r0, #11
 800d3b0:	d017      	beq.n	800d3e2 <__b2d+0x92>
 800d3b2:	f1c0 0c20 	rsb	ip, r0, #32
 800d3b6:	fa04 f500 	lsl.w	r5, r4, r0
 800d3ba:	42be      	cmp	r6, r7
 800d3bc:	fa21 f40c 	lsr.w	r4, r1, ip
 800d3c0:	ea45 0504 	orr.w	r5, r5, r4
 800d3c4:	bf8c      	ite	hi
 800d3c6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d3ca:	2400      	movls	r4, #0
 800d3cc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d3d0:	fa01 f000 	lsl.w	r0, r1, r0
 800d3d4:	fa24 f40c 	lsr.w	r4, r4, ip
 800d3d8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d3dc:	ea40 0204 	orr.w	r2, r0, r4
 800d3e0:	e7db      	b.n	800d39a <__b2d+0x4a>
 800d3e2:	ea44 030c 	orr.w	r3, r4, ip
 800d3e6:	460a      	mov	r2, r1
 800d3e8:	e7d7      	b.n	800d39a <__b2d+0x4a>
 800d3ea:	bf00      	nop
 800d3ec:	3ff00000 	.word	0x3ff00000

0800d3f0 <__d2b>:
 800d3f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d3f4:	4689      	mov	r9, r1
 800d3f6:	2101      	movs	r1, #1
 800d3f8:	ec57 6b10 	vmov	r6, r7, d0
 800d3fc:	4690      	mov	r8, r2
 800d3fe:	f7ff fc0f 	bl	800cc20 <_Balloc>
 800d402:	4604      	mov	r4, r0
 800d404:	b930      	cbnz	r0, 800d414 <__d2b+0x24>
 800d406:	4602      	mov	r2, r0
 800d408:	4b25      	ldr	r3, [pc, #148]	; (800d4a0 <__d2b+0xb0>)
 800d40a:	4826      	ldr	r0, [pc, #152]	; (800d4a4 <__d2b+0xb4>)
 800d40c:	f240 310a 	movw	r1, #778	; 0x30a
 800d410:	f000 fe9a 	bl	800e148 <__assert_func>
 800d414:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d418:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d41c:	bb35      	cbnz	r5, 800d46c <__d2b+0x7c>
 800d41e:	2e00      	cmp	r6, #0
 800d420:	9301      	str	r3, [sp, #4]
 800d422:	d028      	beq.n	800d476 <__d2b+0x86>
 800d424:	4668      	mov	r0, sp
 800d426:	9600      	str	r6, [sp, #0]
 800d428:	f7ff fd10 	bl	800ce4c <__lo0bits>
 800d42c:	9900      	ldr	r1, [sp, #0]
 800d42e:	b300      	cbz	r0, 800d472 <__d2b+0x82>
 800d430:	9a01      	ldr	r2, [sp, #4]
 800d432:	f1c0 0320 	rsb	r3, r0, #32
 800d436:	fa02 f303 	lsl.w	r3, r2, r3
 800d43a:	430b      	orrs	r3, r1
 800d43c:	40c2      	lsrs	r2, r0
 800d43e:	6163      	str	r3, [r4, #20]
 800d440:	9201      	str	r2, [sp, #4]
 800d442:	9b01      	ldr	r3, [sp, #4]
 800d444:	61a3      	str	r3, [r4, #24]
 800d446:	2b00      	cmp	r3, #0
 800d448:	bf14      	ite	ne
 800d44a:	2202      	movne	r2, #2
 800d44c:	2201      	moveq	r2, #1
 800d44e:	6122      	str	r2, [r4, #16]
 800d450:	b1d5      	cbz	r5, 800d488 <__d2b+0x98>
 800d452:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d456:	4405      	add	r5, r0
 800d458:	f8c9 5000 	str.w	r5, [r9]
 800d45c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d460:	f8c8 0000 	str.w	r0, [r8]
 800d464:	4620      	mov	r0, r4
 800d466:	b003      	add	sp, #12
 800d468:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d46c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d470:	e7d5      	b.n	800d41e <__d2b+0x2e>
 800d472:	6161      	str	r1, [r4, #20]
 800d474:	e7e5      	b.n	800d442 <__d2b+0x52>
 800d476:	a801      	add	r0, sp, #4
 800d478:	f7ff fce8 	bl	800ce4c <__lo0bits>
 800d47c:	9b01      	ldr	r3, [sp, #4]
 800d47e:	6163      	str	r3, [r4, #20]
 800d480:	2201      	movs	r2, #1
 800d482:	6122      	str	r2, [r4, #16]
 800d484:	3020      	adds	r0, #32
 800d486:	e7e3      	b.n	800d450 <__d2b+0x60>
 800d488:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d48c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d490:	f8c9 0000 	str.w	r0, [r9]
 800d494:	6918      	ldr	r0, [r3, #16]
 800d496:	f7ff fcb9 	bl	800ce0c <__hi0bits>
 800d49a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d49e:	e7df      	b.n	800d460 <__d2b+0x70>
 800d4a0:	0800edd0 	.word	0x0800edd0
 800d4a4:	0800ee77 	.word	0x0800ee77

0800d4a8 <__ratio>:
 800d4a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4ac:	4688      	mov	r8, r1
 800d4ae:	4669      	mov	r1, sp
 800d4b0:	4681      	mov	r9, r0
 800d4b2:	f7ff ff4d 	bl	800d350 <__b2d>
 800d4b6:	a901      	add	r1, sp, #4
 800d4b8:	4640      	mov	r0, r8
 800d4ba:	ec55 4b10 	vmov	r4, r5, d0
 800d4be:	f7ff ff47 	bl	800d350 <__b2d>
 800d4c2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d4c6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d4ca:	eba3 0c02 	sub.w	ip, r3, r2
 800d4ce:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d4d2:	1a9b      	subs	r3, r3, r2
 800d4d4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d4d8:	ec51 0b10 	vmov	r0, r1, d0
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	bfd6      	itet	le
 800d4e0:	460a      	movle	r2, r1
 800d4e2:	462a      	movgt	r2, r5
 800d4e4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d4e8:	468b      	mov	fp, r1
 800d4ea:	462f      	mov	r7, r5
 800d4ec:	bfd4      	ite	le
 800d4ee:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d4f2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d4f6:	4620      	mov	r0, r4
 800d4f8:	ee10 2a10 	vmov	r2, s0
 800d4fc:	465b      	mov	r3, fp
 800d4fe:	4639      	mov	r1, r7
 800d500:	f7f3 f9a4 	bl	800084c <__aeabi_ddiv>
 800d504:	ec41 0b10 	vmov	d0, r0, r1
 800d508:	b003      	add	sp, #12
 800d50a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d50e <__copybits>:
 800d50e:	3901      	subs	r1, #1
 800d510:	b570      	push	{r4, r5, r6, lr}
 800d512:	1149      	asrs	r1, r1, #5
 800d514:	6914      	ldr	r4, [r2, #16]
 800d516:	3101      	adds	r1, #1
 800d518:	f102 0314 	add.w	r3, r2, #20
 800d51c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d520:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d524:	1f05      	subs	r5, r0, #4
 800d526:	42a3      	cmp	r3, r4
 800d528:	d30c      	bcc.n	800d544 <__copybits+0x36>
 800d52a:	1aa3      	subs	r3, r4, r2
 800d52c:	3b11      	subs	r3, #17
 800d52e:	f023 0303 	bic.w	r3, r3, #3
 800d532:	3211      	adds	r2, #17
 800d534:	42a2      	cmp	r2, r4
 800d536:	bf88      	it	hi
 800d538:	2300      	movhi	r3, #0
 800d53a:	4418      	add	r0, r3
 800d53c:	2300      	movs	r3, #0
 800d53e:	4288      	cmp	r0, r1
 800d540:	d305      	bcc.n	800d54e <__copybits+0x40>
 800d542:	bd70      	pop	{r4, r5, r6, pc}
 800d544:	f853 6b04 	ldr.w	r6, [r3], #4
 800d548:	f845 6f04 	str.w	r6, [r5, #4]!
 800d54c:	e7eb      	b.n	800d526 <__copybits+0x18>
 800d54e:	f840 3b04 	str.w	r3, [r0], #4
 800d552:	e7f4      	b.n	800d53e <__copybits+0x30>

0800d554 <__any_on>:
 800d554:	f100 0214 	add.w	r2, r0, #20
 800d558:	6900      	ldr	r0, [r0, #16]
 800d55a:	114b      	asrs	r3, r1, #5
 800d55c:	4298      	cmp	r0, r3
 800d55e:	b510      	push	{r4, lr}
 800d560:	db11      	blt.n	800d586 <__any_on+0x32>
 800d562:	dd0a      	ble.n	800d57a <__any_on+0x26>
 800d564:	f011 011f 	ands.w	r1, r1, #31
 800d568:	d007      	beq.n	800d57a <__any_on+0x26>
 800d56a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d56e:	fa24 f001 	lsr.w	r0, r4, r1
 800d572:	fa00 f101 	lsl.w	r1, r0, r1
 800d576:	428c      	cmp	r4, r1
 800d578:	d10b      	bne.n	800d592 <__any_on+0x3e>
 800d57a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d57e:	4293      	cmp	r3, r2
 800d580:	d803      	bhi.n	800d58a <__any_on+0x36>
 800d582:	2000      	movs	r0, #0
 800d584:	bd10      	pop	{r4, pc}
 800d586:	4603      	mov	r3, r0
 800d588:	e7f7      	b.n	800d57a <__any_on+0x26>
 800d58a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d58e:	2900      	cmp	r1, #0
 800d590:	d0f5      	beq.n	800d57e <__any_on+0x2a>
 800d592:	2001      	movs	r0, #1
 800d594:	e7f6      	b.n	800d584 <__any_on+0x30>

0800d596 <_calloc_r>:
 800d596:	b513      	push	{r0, r1, r4, lr}
 800d598:	434a      	muls	r2, r1
 800d59a:	4611      	mov	r1, r2
 800d59c:	9201      	str	r2, [sp, #4]
 800d59e:	f000 f859 	bl	800d654 <_malloc_r>
 800d5a2:	4604      	mov	r4, r0
 800d5a4:	b118      	cbz	r0, 800d5ae <_calloc_r+0x18>
 800d5a6:	9a01      	ldr	r2, [sp, #4]
 800d5a8:	2100      	movs	r1, #0
 800d5aa:	f7fd fcc6 	bl	800af3a <memset>
 800d5ae:	4620      	mov	r0, r4
 800d5b0:	b002      	add	sp, #8
 800d5b2:	bd10      	pop	{r4, pc}

0800d5b4 <_free_r>:
 800d5b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d5b6:	2900      	cmp	r1, #0
 800d5b8:	d048      	beq.n	800d64c <_free_r+0x98>
 800d5ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d5be:	9001      	str	r0, [sp, #4]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	f1a1 0404 	sub.w	r4, r1, #4
 800d5c6:	bfb8      	it	lt
 800d5c8:	18e4      	addlt	r4, r4, r3
 800d5ca:	f000 fe39 	bl	800e240 <__malloc_lock>
 800d5ce:	4a20      	ldr	r2, [pc, #128]	; (800d650 <_free_r+0x9c>)
 800d5d0:	9801      	ldr	r0, [sp, #4]
 800d5d2:	6813      	ldr	r3, [r2, #0]
 800d5d4:	4615      	mov	r5, r2
 800d5d6:	b933      	cbnz	r3, 800d5e6 <_free_r+0x32>
 800d5d8:	6063      	str	r3, [r4, #4]
 800d5da:	6014      	str	r4, [r2, #0]
 800d5dc:	b003      	add	sp, #12
 800d5de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d5e2:	f000 be33 	b.w	800e24c <__malloc_unlock>
 800d5e6:	42a3      	cmp	r3, r4
 800d5e8:	d90b      	bls.n	800d602 <_free_r+0x4e>
 800d5ea:	6821      	ldr	r1, [r4, #0]
 800d5ec:	1862      	adds	r2, r4, r1
 800d5ee:	4293      	cmp	r3, r2
 800d5f0:	bf04      	itt	eq
 800d5f2:	681a      	ldreq	r2, [r3, #0]
 800d5f4:	685b      	ldreq	r3, [r3, #4]
 800d5f6:	6063      	str	r3, [r4, #4]
 800d5f8:	bf04      	itt	eq
 800d5fa:	1852      	addeq	r2, r2, r1
 800d5fc:	6022      	streq	r2, [r4, #0]
 800d5fe:	602c      	str	r4, [r5, #0]
 800d600:	e7ec      	b.n	800d5dc <_free_r+0x28>
 800d602:	461a      	mov	r2, r3
 800d604:	685b      	ldr	r3, [r3, #4]
 800d606:	b10b      	cbz	r3, 800d60c <_free_r+0x58>
 800d608:	42a3      	cmp	r3, r4
 800d60a:	d9fa      	bls.n	800d602 <_free_r+0x4e>
 800d60c:	6811      	ldr	r1, [r2, #0]
 800d60e:	1855      	adds	r5, r2, r1
 800d610:	42a5      	cmp	r5, r4
 800d612:	d10b      	bne.n	800d62c <_free_r+0x78>
 800d614:	6824      	ldr	r4, [r4, #0]
 800d616:	4421      	add	r1, r4
 800d618:	1854      	adds	r4, r2, r1
 800d61a:	42a3      	cmp	r3, r4
 800d61c:	6011      	str	r1, [r2, #0]
 800d61e:	d1dd      	bne.n	800d5dc <_free_r+0x28>
 800d620:	681c      	ldr	r4, [r3, #0]
 800d622:	685b      	ldr	r3, [r3, #4]
 800d624:	6053      	str	r3, [r2, #4]
 800d626:	4421      	add	r1, r4
 800d628:	6011      	str	r1, [r2, #0]
 800d62a:	e7d7      	b.n	800d5dc <_free_r+0x28>
 800d62c:	d902      	bls.n	800d634 <_free_r+0x80>
 800d62e:	230c      	movs	r3, #12
 800d630:	6003      	str	r3, [r0, #0]
 800d632:	e7d3      	b.n	800d5dc <_free_r+0x28>
 800d634:	6825      	ldr	r5, [r4, #0]
 800d636:	1961      	adds	r1, r4, r5
 800d638:	428b      	cmp	r3, r1
 800d63a:	bf04      	itt	eq
 800d63c:	6819      	ldreq	r1, [r3, #0]
 800d63e:	685b      	ldreq	r3, [r3, #4]
 800d640:	6063      	str	r3, [r4, #4]
 800d642:	bf04      	itt	eq
 800d644:	1949      	addeq	r1, r1, r5
 800d646:	6021      	streq	r1, [r4, #0]
 800d648:	6054      	str	r4, [r2, #4]
 800d64a:	e7c7      	b.n	800d5dc <_free_r+0x28>
 800d64c:	b003      	add	sp, #12
 800d64e:	bd30      	pop	{r4, r5, pc}
 800d650:	20001020 	.word	0x20001020

0800d654 <_malloc_r>:
 800d654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d656:	1ccd      	adds	r5, r1, #3
 800d658:	f025 0503 	bic.w	r5, r5, #3
 800d65c:	3508      	adds	r5, #8
 800d65e:	2d0c      	cmp	r5, #12
 800d660:	bf38      	it	cc
 800d662:	250c      	movcc	r5, #12
 800d664:	2d00      	cmp	r5, #0
 800d666:	4606      	mov	r6, r0
 800d668:	db01      	blt.n	800d66e <_malloc_r+0x1a>
 800d66a:	42a9      	cmp	r1, r5
 800d66c:	d903      	bls.n	800d676 <_malloc_r+0x22>
 800d66e:	230c      	movs	r3, #12
 800d670:	6033      	str	r3, [r6, #0]
 800d672:	2000      	movs	r0, #0
 800d674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d676:	f000 fde3 	bl	800e240 <__malloc_lock>
 800d67a:	4921      	ldr	r1, [pc, #132]	; (800d700 <_malloc_r+0xac>)
 800d67c:	680a      	ldr	r2, [r1, #0]
 800d67e:	4614      	mov	r4, r2
 800d680:	b99c      	cbnz	r4, 800d6aa <_malloc_r+0x56>
 800d682:	4f20      	ldr	r7, [pc, #128]	; (800d704 <_malloc_r+0xb0>)
 800d684:	683b      	ldr	r3, [r7, #0]
 800d686:	b923      	cbnz	r3, 800d692 <_malloc_r+0x3e>
 800d688:	4621      	mov	r1, r4
 800d68a:	4630      	mov	r0, r6
 800d68c:	f000 fcd8 	bl	800e040 <_sbrk_r>
 800d690:	6038      	str	r0, [r7, #0]
 800d692:	4629      	mov	r1, r5
 800d694:	4630      	mov	r0, r6
 800d696:	f000 fcd3 	bl	800e040 <_sbrk_r>
 800d69a:	1c43      	adds	r3, r0, #1
 800d69c:	d123      	bne.n	800d6e6 <_malloc_r+0x92>
 800d69e:	230c      	movs	r3, #12
 800d6a0:	6033      	str	r3, [r6, #0]
 800d6a2:	4630      	mov	r0, r6
 800d6a4:	f000 fdd2 	bl	800e24c <__malloc_unlock>
 800d6a8:	e7e3      	b.n	800d672 <_malloc_r+0x1e>
 800d6aa:	6823      	ldr	r3, [r4, #0]
 800d6ac:	1b5b      	subs	r3, r3, r5
 800d6ae:	d417      	bmi.n	800d6e0 <_malloc_r+0x8c>
 800d6b0:	2b0b      	cmp	r3, #11
 800d6b2:	d903      	bls.n	800d6bc <_malloc_r+0x68>
 800d6b4:	6023      	str	r3, [r4, #0]
 800d6b6:	441c      	add	r4, r3
 800d6b8:	6025      	str	r5, [r4, #0]
 800d6ba:	e004      	b.n	800d6c6 <_malloc_r+0x72>
 800d6bc:	6863      	ldr	r3, [r4, #4]
 800d6be:	42a2      	cmp	r2, r4
 800d6c0:	bf0c      	ite	eq
 800d6c2:	600b      	streq	r3, [r1, #0]
 800d6c4:	6053      	strne	r3, [r2, #4]
 800d6c6:	4630      	mov	r0, r6
 800d6c8:	f000 fdc0 	bl	800e24c <__malloc_unlock>
 800d6cc:	f104 000b 	add.w	r0, r4, #11
 800d6d0:	1d23      	adds	r3, r4, #4
 800d6d2:	f020 0007 	bic.w	r0, r0, #7
 800d6d6:	1ac2      	subs	r2, r0, r3
 800d6d8:	d0cc      	beq.n	800d674 <_malloc_r+0x20>
 800d6da:	1a1b      	subs	r3, r3, r0
 800d6dc:	50a3      	str	r3, [r4, r2]
 800d6de:	e7c9      	b.n	800d674 <_malloc_r+0x20>
 800d6e0:	4622      	mov	r2, r4
 800d6e2:	6864      	ldr	r4, [r4, #4]
 800d6e4:	e7cc      	b.n	800d680 <_malloc_r+0x2c>
 800d6e6:	1cc4      	adds	r4, r0, #3
 800d6e8:	f024 0403 	bic.w	r4, r4, #3
 800d6ec:	42a0      	cmp	r0, r4
 800d6ee:	d0e3      	beq.n	800d6b8 <_malloc_r+0x64>
 800d6f0:	1a21      	subs	r1, r4, r0
 800d6f2:	4630      	mov	r0, r6
 800d6f4:	f000 fca4 	bl	800e040 <_sbrk_r>
 800d6f8:	3001      	adds	r0, #1
 800d6fa:	d1dd      	bne.n	800d6b8 <_malloc_r+0x64>
 800d6fc:	e7cf      	b.n	800d69e <_malloc_r+0x4a>
 800d6fe:	bf00      	nop
 800d700:	20001020 	.word	0x20001020
 800d704:	20001024 	.word	0x20001024

0800d708 <__ssputs_r>:
 800d708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d70c:	688e      	ldr	r6, [r1, #8]
 800d70e:	429e      	cmp	r6, r3
 800d710:	4682      	mov	sl, r0
 800d712:	460c      	mov	r4, r1
 800d714:	4690      	mov	r8, r2
 800d716:	461f      	mov	r7, r3
 800d718:	d838      	bhi.n	800d78c <__ssputs_r+0x84>
 800d71a:	898a      	ldrh	r2, [r1, #12]
 800d71c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d720:	d032      	beq.n	800d788 <__ssputs_r+0x80>
 800d722:	6825      	ldr	r5, [r4, #0]
 800d724:	6909      	ldr	r1, [r1, #16]
 800d726:	eba5 0901 	sub.w	r9, r5, r1
 800d72a:	6965      	ldr	r5, [r4, #20]
 800d72c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d730:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d734:	3301      	adds	r3, #1
 800d736:	444b      	add	r3, r9
 800d738:	106d      	asrs	r5, r5, #1
 800d73a:	429d      	cmp	r5, r3
 800d73c:	bf38      	it	cc
 800d73e:	461d      	movcc	r5, r3
 800d740:	0553      	lsls	r3, r2, #21
 800d742:	d531      	bpl.n	800d7a8 <__ssputs_r+0xa0>
 800d744:	4629      	mov	r1, r5
 800d746:	f7ff ff85 	bl	800d654 <_malloc_r>
 800d74a:	4606      	mov	r6, r0
 800d74c:	b950      	cbnz	r0, 800d764 <__ssputs_r+0x5c>
 800d74e:	230c      	movs	r3, #12
 800d750:	f8ca 3000 	str.w	r3, [sl]
 800d754:	89a3      	ldrh	r3, [r4, #12]
 800d756:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d75a:	81a3      	strh	r3, [r4, #12]
 800d75c:	f04f 30ff 	mov.w	r0, #4294967295
 800d760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d764:	6921      	ldr	r1, [r4, #16]
 800d766:	464a      	mov	r2, r9
 800d768:	f7fd fbbf 	bl	800aeea <memcpy>
 800d76c:	89a3      	ldrh	r3, [r4, #12]
 800d76e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d776:	81a3      	strh	r3, [r4, #12]
 800d778:	6126      	str	r6, [r4, #16]
 800d77a:	6165      	str	r5, [r4, #20]
 800d77c:	444e      	add	r6, r9
 800d77e:	eba5 0509 	sub.w	r5, r5, r9
 800d782:	6026      	str	r6, [r4, #0]
 800d784:	60a5      	str	r5, [r4, #8]
 800d786:	463e      	mov	r6, r7
 800d788:	42be      	cmp	r6, r7
 800d78a:	d900      	bls.n	800d78e <__ssputs_r+0x86>
 800d78c:	463e      	mov	r6, r7
 800d78e:	4632      	mov	r2, r6
 800d790:	6820      	ldr	r0, [r4, #0]
 800d792:	4641      	mov	r1, r8
 800d794:	f7fd fbb7 	bl	800af06 <memmove>
 800d798:	68a3      	ldr	r3, [r4, #8]
 800d79a:	6822      	ldr	r2, [r4, #0]
 800d79c:	1b9b      	subs	r3, r3, r6
 800d79e:	4432      	add	r2, r6
 800d7a0:	60a3      	str	r3, [r4, #8]
 800d7a2:	6022      	str	r2, [r4, #0]
 800d7a4:	2000      	movs	r0, #0
 800d7a6:	e7db      	b.n	800d760 <__ssputs_r+0x58>
 800d7a8:	462a      	mov	r2, r5
 800d7aa:	f000 fd55 	bl	800e258 <_realloc_r>
 800d7ae:	4606      	mov	r6, r0
 800d7b0:	2800      	cmp	r0, #0
 800d7b2:	d1e1      	bne.n	800d778 <__ssputs_r+0x70>
 800d7b4:	6921      	ldr	r1, [r4, #16]
 800d7b6:	4650      	mov	r0, sl
 800d7b8:	f7ff fefc 	bl	800d5b4 <_free_r>
 800d7bc:	e7c7      	b.n	800d74e <__ssputs_r+0x46>
	...

0800d7c0 <_svfiprintf_r>:
 800d7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7c4:	4698      	mov	r8, r3
 800d7c6:	898b      	ldrh	r3, [r1, #12]
 800d7c8:	061b      	lsls	r3, r3, #24
 800d7ca:	b09d      	sub	sp, #116	; 0x74
 800d7cc:	4607      	mov	r7, r0
 800d7ce:	460d      	mov	r5, r1
 800d7d0:	4614      	mov	r4, r2
 800d7d2:	d50e      	bpl.n	800d7f2 <_svfiprintf_r+0x32>
 800d7d4:	690b      	ldr	r3, [r1, #16]
 800d7d6:	b963      	cbnz	r3, 800d7f2 <_svfiprintf_r+0x32>
 800d7d8:	2140      	movs	r1, #64	; 0x40
 800d7da:	f7ff ff3b 	bl	800d654 <_malloc_r>
 800d7de:	6028      	str	r0, [r5, #0]
 800d7e0:	6128      	str	r0, [r5, #16]
 800d7e2:	b920      	cbnz	r0, 800d7ee <_svfiprintf_r+0x2e>
 800d7e4:	230c      	movs	r3, #12
 800d7e6:	603b      	str	r3, [r7, #0]
 800d7e8:	f04f 30ff 	mov.w	r0, #4294967295
 800d7ec:	e0d1      	b.n	800d992 <_svfiprintf_r+0x1d2>
 800d7ee:	2340      	movs	r3, #64	; 0x40
 800d7f0:	616b      	str	r3, [r5, #20]
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	9309      	str	r3, [sp, #36]	; 0x24
 800d7f6:	2320      	movs	r3, #32
 800d7f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d7fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800d800:	2330      	movs	r3, #48	; 0x30
 800d802:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d9ac <_svfiprintf_r+0x1ec>
 800d806:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d80a:	f04f 0901 	mov.w	r9, #1
 800d80e:	4623      	mov	r3, r4
 800d810:	469a      	mov	sl, r3
 800d812:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d816:	b10a      	cbz	r2, 800d81c <_svfiprintf_r+0x5c>
 800d818:	2a25      	cmp	r2, #37	; 0x25
 800d81a:	d1f9      	bne.n	800d810 <_svfiprintf_r+0x50>
 800d81c:	ebba 0b04 	subs.w	fp, sl, r4
 800d820:	d00b      	beq.n	800d83a <_svfiprintf_r+0x7a>
 800d822:	465b      	mov	r3, fp
 800d824:	4622      	mov	r2, r4
 800d826:	4629      	mov	r1, r5
 800d828:	4638      	mov	r0, r7
 800d82a:	f7ff ff6d 	bl	800d708 <__ssputs_r>
 800d82e:	3001      	adds	r0, #1
 800d830:	f000 80aa 	beq.w	800d988 <_svfiprintf_r+0x1c8>
 800d834:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d836:	445a      	add	r2, fp
 800d838:	9209      	str	r2, [sp, #36]	; 0x24
 800d83a:	f89a 3000 	ldrb.w	r3, [sl]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	f000 80a2 	beq.w	800d988 <_svfiprintf_r+0x1c8>
 800d844:	2300      	movs	r3, #0
 800d846:	f04f 32ff 	mov.w	r2, #4294967295
 800d84a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d84e:	f10a 0a01 	add.w	sl, sl, #1
 800d852:	9304      	str	r3, [sp, #16]
 800d854:	9307      	str	r3, [sp, #28]
 800d856:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d85a:	931a      	str	r3, [sp, #104]	; 0x68
 800d85c:	4654      	mov	r4, sl
 800d85e:	2205      	movs	r2, #5
 800d860:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d864:	4851      	ldr	r0, [pc, #324]	; (800d9ac <_svfiprintf_r+0x1ec>)
 800d866:	f7f2 fcbb 	bl	80001e0 <memchr>
 800d86a:	9a04      	ldr	r2, [sp, #16]
 800d86c:	b9d8      	cbnz	r0, 800d8a6 <_svfiprintf_r+0xe6>
 800d86e:	06d0      	lsls	r0, r2, #27
 800d870:	bf44      	itt	mi
 800d872:	2320      	movmi	r3, #32
 800d874:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d878:	0711      	lsls	r1, r2, #28
 800d87a:	bf44      	itt	mi
 800d87c:	232b      	movmi	r3, #43	; 0x2b
 800d87e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d882:	f89a 3000 	ldrb.w	r3, [sl]
 800d886:	2b2a      	cmp	r3, #42	; 0x2a
 800d888:	d015      	beq.n	800d8b6 <_svfiprintf_r+0xf6>
 800d88a:	9a07      	ldr	r2, [sp, #28]
 800d88c:	4654      	mov	r4, sl
 800d88e:	2000      	movs	r0, #0
 800d890:	f04f 0c0a 	mov.w	ip, #10
 800d894:	4621      	mov	r1, r4
 800d896:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d89a:	3b30      	subs	r3, #48	; 0x30
 800d89c:	2b09      	cmp	r3, #9
 800d89e:	d94e      	bls.n	800d93e <_svfiprintf_r+0x17e>
 800d8a0:	b1b0      	cbz	r0, 800d8d0 <_svfiprintf_r+0x110>
 800d8a2:	9207      	str	r2, [sp, #28]
 800d8a4:	e014      	b.n	800d8d0 <_svfiprintf_r+0x110>
 800d8a6:	eba0 0308 	sub.w	r3, r0, r8
 800d8aa:	fa09 f303 	lsl.w	r3, r9, r3
 800d8ae:	4313      	orrs	r3, r2
 800d8b0:	9304      	str	r3, [sp, #16]
 800d8b2:	46a2      	mov	sl, r4
 800d8b4:	e7d2      	b.n	800d85c <_svfiprintf_r+0x9c>
 800d8b6:	9b03      	ldr	r3, [sp, #12]
 800d8b8:	1d19      	adds	r1, r3, #4
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	9103      	str	r1, [sp, #12]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	bfbb      	ittet	lt
 800d8c2:	425b      	neglt	r3, r3
 800d8c4:	f042 0202 	orrlt.w	r2, r2, #2
 800d8c8:	9307      	strge	r3, [sp, #28]
 800d8ca:	9307      	strlt	r3, [sp, #28]
 800d8cc:	bfb8      	it	lt
 800d8ce:	9204      	strlt	r2, [sp, #16]
 800d8d0:	7823      	ldrb	r3, [r4, #0]
 800d8d2:	2b2e      	cmp	r3, #46	; 0x2e
 800d8d4:	d10c      	bne.n	800d8f0 <_svfiprintf_r+0x130>
 800d8d6:	7863      	ldrb	r3, [r4, #1]
 800d8d8:	2b2a      	cmp	r3, #42	; 0x2a
 800d8da:	d135      	bne.n	800d948 <_svfiprintf_r+0x188>
 800d8dc:	9b03      	ldr	r3, [sp, #12]
 800d8de:	1d1a      	adds	r2, r3, #4
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	9203      	str	r2, [sp, #12]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	bfb8      	it	lt
 800d8e8:	f04f 33ff 	movlt.w	r3, #4294967295
 800d8ec:	3402      	adds	r4, #2
 800d8ee:	9305      	str	r3, [sp, #20]
 800d8f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d9bc <_svfiprintf_r+0x1fc>
 800d8f4:	7821      	ldrb	r1, [r4, #0]
 800d8f6:	2203      	movs	r2, #3
 800d8f8:	4650      	mov	r0, sl
 800d8fa:	f7f2 fc71 	bl	80001e0 <memchr>
 800d8fe:	b140      	cbz	r0, 800d912 <_svfiprintf_r+0x152>
 800d900:	2340      	movs	r3, #64	; 0x40
 800d902:	eba0 000a 	sub.w	r0, r0, sl
 800d906:	fa03 f000 	lsl.w	r0, r3, r0
 800d90a:	9b04      	ldr	r3, [sp, #16]
 800d90c:	4303      	orrs	r3, r0
 800d90e:	3401      	adds	r4, #1
 800d910:	9304      	str	r3, [sp, #16]
 800d912:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d916:	4826      	ldr	r0, [pc, #152]	; (800d9b0 <_svfiprintf_r+0x1f0>)
 800d918:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d91c:	2206      	movs	r2, #6
 800d91e:	f7f2 fc5f 	bl	80001e0 <memchr>
 800d922:	2800      	cmp	r0, #0
 800d924:	d038      	beq.n	800d998 <_svfiprintf_r+0x1d8>
 800d926:	4b23      	ldr	r3, [pc, #140]	; (800d9b4 <_svfiprintf_r+0x1f4>)
 800d928:	bb1b      	cbnz	r3, 800d972 <_svfiprintf_r+0x1b2>
 800d92a:	9b03      	ldr	r3, [sp, #12]
 800d92c:	3307      	adds	r3, #7
 800d92e:	f023 0307 	bic.w	r3, r3, #7
 800d932:	3308      	adds	r3, #8
 800d934:	9303      	str	r3, [sp, #12]
 800d936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d938:	4433      	add	r3, r6
 800d93a:	9309      	str	r3, [sp, #36]	; 0x24
 800d93c:	e767      	b.n	800d80e <_svfiprintf_r+0x4e>
 800d93e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d942:	460c      	mov	r4, r1
 800d944:	2001      	movs	r0, #1
 800d946:	e7a5      	b.n	800d894 <_svfiprintf_r+0xd4>
 800d948:	2300      	movs	r3, #0
 800d94a:	3401      	adds	r4, #1
 800d94c:	9305      	str	r3, [sp, #20]
 800d94e:	4619      	mov	r1, r3
 800d950:	f04f 0c0a 	mov.w	ip, #10
 800d954:	4620      	mov	r0, r4
 800d956:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d95a:	3a30      	subs	r2, #48	; 0x30
 800d95c:	2a09      	cmp	r2, #9
 800d95e:	d903      	bls.n	800d968 <_svfiprintf_r+0x1a8>
 800d960:	2b00      	cmp	r3, #0
 800d962:	d0c5      	beq.n	800d8f0 <_svfiprintf_r+0x130>
 800d964:	9105      	str	r1, [sp, #20]
 800d966:	e7c3      	b.n	800d8f0 <_svfiprintf_r+0x130>
 800d968:	fb0c 2101 	mla	r1, ip, r1, r2
 800d96c:	4604      	mov	r4, r0
 800d96e:	2301      	movs	r3, #1
 800d970:	e7f0      	b.n	800d954 <_svfiprintf_r+0x194>
 800d972:	ab03      	add	r3, sp, #12
 800d974:	9300      	str	r3, [sp, #0]
 800d976:	462a      	mov	r2, r5
 800d978:	4b0f      	ldr	r3, [pc, #60]	; (800d9b8 <_svfiprintf_r+0x1f8>)
 800d97a:	a904      	add	r1, sp, #16
 800d97c:	4638      	mov	r0, r7
 800d97e:	f3af 8000 	nop.w
 800d982:	1c42      	adds	r2, r0, #1
 800d984:	4606      	mov	r6, r0
 800d986:	d1d6      	bne.n	800d936 <_svfiprintf_r+0x176>
 800d988:	89ab      	ldrh	r3, [r5, #12]
 800d98a:	065b      	lsls	r3, r3, #25
 800d98c:	f53f af2c 	bmi.w	800d7e8 <_svfiprintf_r+0x28>
 800d990:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d992:	b01d      	add	sp, #116	; 0x74
 800d994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d998:	ab03      	add	r3, sp, #12
 800d99a:	9300      	str	r3, [sp, #0]
 800d99c:	462a      	mov	r2, r5
 800d99e:	4b06      	ldr	r3, [pc, #24]	; (800d9b8 <_svfiprintf_r+0x1f8>)
 800d9a0:	a904      	add	r1, sp, #16
 800d9a2:	4638      	mov	r0, r7
 800d9a4:	f000 f9d4 	bl	800dd50 <_printf_i>
 800d9a8:	e7eb      	b.n	800d982 <_svfiprintf_r+0x1c2>
 800d9aa:	bf00      	nop
 800d9ac:	0800efd4 	.word	0x0800efd4
 800d9b0:	0800efde 	.word	0x0800efde
 800d9b4:	00000000 	.word	0x00000000
 800d9b8:	0800d709 	.word	0x0800d709
 800d9bc:	0800efda 	.word	0x0800efda

0800d9c0 <__sfputc_r>:
 800d9c0:	6893      	ldr	r3, [r2, #8]
 800d9c2:	3b01      	subs	r3, #1
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	b410      	push	{r4}
 800d9c8:	6093      	str	r3, [r2, #8]
 800d9ca:	da08      	bge.n	800d9de <__sfputc_r+0x1e>
 800d9cc:	6994      	ldr	r4, [r2, #24]
 800d9ce:	42a3      	cmp	r3, r4
 800d9d0:	db01      	blt.n	800d9d6 <__sfputc_r+0x16>
 800d9d2:	290a      	cmp	r1, #10
 800d9d4:	d103      	bne.n	800d9de <__sfputc_r+0x1e>
 800d9d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d9da:	f7fe bac5 	b.w	800bf68 <__swbuf_r>
 800d9de:	6813      	ldr	r3, [r2, #0]
 800d9e0:	1c58      	adds	r0, r3, #1
 800d9e2:	6010      	str	r0, [r2, #0]
 800d9e4:	7019      	strb	r1, [r3, #0]
 800d9e6:	4608      	mov	r0, r1
 800d9e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d9ec:	4770      	bx	lr

0800d9ee <__sfputs_r>:
 800d9ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9f0:	4606      	mov	r6, r0
 800d9f2:	460f      	mov	r7, r1
 800d9f4:	4614      	mov	r4, r2
 800d9f6:	18d5      	adds	r5, r2, r3
 800d9f8:	42ac      	cmp	r4, r5
 800d9fa:	d101      	bne.n	800da00 <__sfputs_r+0x12>
 800d9fc:	2000      	movs	r0, #0
 800d9fe:	e007      	b.n	800da10 <__sfputs_r+0x22>
 800da00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da04:	463a      	mov	r2, r7
 800da06:	4630      	mov	r0, r6
 800da08:	f7ff ffda 	bl	800d9c0 <__sfputc_r>
 800da0c:	1c43      	adds	r3, r0, #1
 800da0e:	d1f3      	bne.n	800d9f8 <__sfputs_r+0xa>
 800da10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800da14 <_vfiprintf_r>:
 800da14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da18:	460d      	mov	r5, r1
 800da1a:	b09d      	sub	sp, #116	; 0x74
 800da1c:	4614      	mov	r4, r2
 800da1e:	4698      	mov	r8, r3
 800da20:	4606      	mov	r6, r0
 800da22:	b118      	cbz	r0, 800da2c <_vfiprintf_r+0x18>
 800da24:	6983      	ldr	r3, [r0, #24]
 800da26:	b90b      	cbnz	r3, 800da2c <_vfiprintf_r+0x18>
 800da28:	f7fe fc78 	bl	800c31c <__sinit>
 800da2c:	4b89      	ldr	r3, [pc, #548]	; (800dc54 <_vfiprintf_r+0x240>)
 800da2e:	429d      	cmp	r5, r3
 800da30:	d11b      	bne.n	800da6a <_vfiprintf_r+0x56>
 800da32:	6875      	ldr	r5, [r6, #4]
 800da34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da36:	07d9      	lsls	r1, r3, #31
 800da38:	d405      	bmi.n	800da46 <_vfiprintf_r+0x32>
 800da3a:	89ab      	ldrh	r3, [r5, #12]
 800da3c:	059a      	lsls	r2, r3, #22
 800da3e:	d402      	bmi.n	800da46 <_vfiprintf_r+0x32>
 800da40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800da42:	f7fd fa50 	bl	800aee6 <__retarget_lock_acquire_recursive>
 800da46:	89ab      	ldrh	r3, [r5, #12]
 800da48:	071b      	lsls	r3, r3, #28
 800da4a:	d501      	bpl.n	800da50 <_vfiprintf_r+0x3c>
 800da4c:	692b      	ldr	r3, [r5, #16]
 800da4e:	b9eb      	cbnz	r3, 800da8c <_vfiprintf_r+0x78>
 800da50:	4629      	mov	r1, r5
 800da52:	4630      	mov	r0, r6
 800da54:	f7fe fada 	bl	800c00c <__swsetup_r>
 800da58:	b1c0      	cbz	r0, 800da8c <_vfiprintf_r+0x78>
 800da5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da5c:	07dc      	lsls	r4, r3, #31
 800da5e:	d50e      	bpl.n	800da7e <_vfiprintf_r+0x6a>
 800da60:	f04f 30ff 	mov.w	r0, #4294967295
 800da64:	b01d      	add	sp, #116	; 0x74
 800da66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da6a:	4b7b      	ldr	r3, [pc, #492]	; (800dc58 <_vfiprintf_r+0x244>)
 800da6c:	429d      	cmp	r5, r3
 800da6e:	d101      	bne.n	800da74 <_vfiprintf_r+0x60>
 800da70:	68b5      	ldr	r5, [r6, #8]
 800da72:	e7df      	b.n	800da34 <_vfiprintf_r+0x20>
 800da74:	4b79      	ldr	r3, [pc, #484]	; (800dc5c <_vfiprintf_r+0x248>)
 800da76:	429d      	cmp	r5, r3
 800da78:	bf08      	it	eq
 800da7a:	68f5      	ldreq	r5, [r6, #12]
 800da7c:	e7da      	b.n	800da34 <_vfiprintf_r+0x20>
 800da7e:	89ab      	ldrh	r3, [r5, #12]
 800da80:	0598      	lsls	r0, r3, #22
 800da82:	d4ed      	bmi.n	800da60 <_vfiprintf_r+0x4c>
 800da84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800da86:	f7fd fa2f 	bl	800aee8 <__retarget_lock_release_recursive>
 800da8a:	e7e9      	b.n	800da60 <_vfiprintf_r+0x4c>
 800da8c:	2300      	movs	r3, #0
 800da8e:	9309      	str	r3, [sp, #36]	; 0x24
 800da90:	2320      	movs	r3, #32
 800da92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800da96:	f8cd 800c 	str.w	r8, [sp, #12]
 800da9a:	2330      	movs	r3, #48	; 0x30
 800da9c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800dc60 <_vfiprintf_r+0x24c>
 800daa0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800daa4:	f04f 0901 	mov.w	r9, #1
 800daa8:	4623      	mov	r3, r4
 800daaa:	469a      	mov	sl, r3
 800daac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dab0:	b10a      	cbz	r2, 800dab6 <_vfiprintf_r+0xa2>
 800dab2:	2a25      	cmp	r2, #37	; 0x25
 800dab4:	d1f9      	bne.n	800daaa <_vfiprintf_r+0x96>
 800dab6:	ebba 0b04 	subs.w	fp, sl, r4
 800daba:	d00b      	beq.n	800dad4 <_vfiprintf_r+0xc0>
 800dabc:	465b      	mov	r3, fp
 800dabe:	4622      	mov	r2, r4
 800dac0:	4629      	mov	r1, r5
 800dac2:	4630      	mov	r0, r6
 800dac4:	f7ff ff93 	bl	800d9ee <__sfputs_r>
 800dac8:	3001      	adds	r0, #1
 800daca:	f000 80aa 	beq.w	800dc22 <_vfiprintf_r+0x20e>
 800dace:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dad0:	445a      	add	r2, fp
 800dad2:	9209      	str	r2, [sp, #36]	; 0x24
 800dad4:	f89a 3000 	ldrb.w	r3, [sl]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	f000 80a2 	beq.w	800dc22 <_vfiprintf_r+0x20e>
 800dade:	2300      	movs	r3, #0
 800dae0:	f04f 32ff 	mov.w	r2, #4294967295
 800dae4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dae8:	f10a 0a01 	add.w	sl, sl, #1
 800daec:	9304      	str	r3, [sp, #16]
 800daee:	9307      	str	r3, [sp, #28]
 800daf0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800daf4:	931a      	str	r3, [sp, #104]	; 0x68
 800daf6:	4654      	mov	r4, sl
 800daf8:	2205      	movs	r2, #5
 800dafa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dafe:	4858      	ldr	r0, [pc, #352]	; (800dc60 <_vfiprintf_r+0x24c>)
 800db00:	f7f2 fb6e 	bl	80001e0 <memchr>
 800db04:	9a04      	ldr	r2, [sp, #16]
 800db06:	b9d8      	cbnz	r0, 800db40 <_vfiprintf_r+0x12c>
 800db08:	06d1      	lsls	r1, r2, #27
 800db0a:	bf44      	itt	mi
 800db0c:	2320      	movmi	r3, #32
 800db0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db12:	0713      	lsls	r3, r2, #28
 800db14:	bf44      	itt	mi
 800db16:	232b      	movmi	r3, #43	; 0x2b
 800db18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db1c:	f89a 3000 	ldrb.w	r3, [sl]
 800db20:	2b2a      	cmp	r3, #42	; 0x2a
 800db22:	d015      	beq.n	800db50 <_vfiprintf_r+0x13c>
 800db24:	9a07      	ldr	r2, [sp, #28]
 800db26:	4654      	mov	r4, sl
 800db28:	2000      	movs	r0, #0
 800db2a:	f04f 0c0a 	mov.w	ip, #10
 800db2e:	4621      	mov	r1, r4
 800db30:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db34:	3b30      	subs	r3, #48	; 0x30
 800db36:	2b09      	cmp	r3, #9
 800db38:	d94e      	bls.n	800dbd8 <_vfiprintf_r+0x1c4>
 800db3a:	b1b0      	cbz	r0, 800db6a <_vfiprintf_r+0x156>
 800db3c:	9207      	str	r2, [sp, #28]
 800db3e:	e014      	b.n	800db6a <_vfiprintf_r+0x156>
 800db40:	eba0 0308 	sub.w	r3, r0, r8
 800db44:	fa09 f303 	lsl.w	r3, r9, r3
 800db48:	4313      	orrs	r3, r2
 800db4a:	9304      	str	r3, [sp, #16]
 800db4c:	46a2      	mov	sl, r4
 800db4e:	e7d2      	b.n	800daf6 <_vfiprintf_r+0xe2>
 800db50:	9b03      	ldr	r3, [sp, #12]
 800db52:	1d19      	adds	r1, r3, #4
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	9103      	str	r1, [sp, #12]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	bfbb      	ittet	lt
 800db5c:	425b      	neglt	r3, r3
 800db5e:	f042 0202 	orrlt.w	r2, r2, #2
 800db62:	9307      	strge	r3, [sp, #28]
 800db64:	9307      	strlt	r3, [sp, #28]
 800db66:	bfb8      	it	lt
 800db68:	9204      	strlt	r2, [sp, #16]
 800db6a:	7823      	ldrb	r3, [r4, #0]
 800db6c:	2b2e      	cmp	r3, #46	; 0x2e
 800db6e:	d10c      	bne.n	800db8a <_vfiprintf_r+0x176>
 800db70:	7863      	ldrb	r3, [r4, #1]
 800db72:	2b2a      	cmp	r3, #42	; 0x2a
 800db74:	d135      	bne.n	800dbe2 <_vfiprintf_r+0x1ce>
 800db76:	9b03      	ldr	r3, [sp, #12]
 800db78:	1d1a      	adds	r2, r3, #4
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	9203      	str	r2, [sp, #12]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	bfb8      	it	lt
 800db82:	f04f 33ff 	movlt.w	r3, #4294967295
 800db86:	3402      	adds	r4, #2
 800db88:	9305      	str	r3, [sp, #20]
 800db8a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800dc70 <_vfiprintf_r+0x25c>
 800db8e:	7821      	ldrb	r1, [r4, #0]
 800db90:	2203      	movs	r2, #3
 800db92:	4650      	mov	r0, sl
 800db94:	f7f2 fb24 	bl	80001e0 <memchr>
 800db98:	b140      	cbz	r0, 800dbac <_vfiprintf_r+0x198>
 800db9a:	2340      	movs	r3, #64	; 0x40
 800db9c:	eba0 000a 	sub.w	r0, r0, sl
 800dba0:	fa03 f000 	lsl.w	r0, r3, r0
 800dba4:	9b04      	ldr	r3, [sp, #16]
 800dba6:	4303      	orrs	r3, r0
 800dba8:	3401      	adds	r4, #1
 800dbaa:	9304      	str	r3, [sp, #16]
 800dbac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbb0:	482c      	ldr	r0, [pc, #176]	; (800dc64 <_vfiprintf_r+0x250>)
 800dbb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dbb6:	2206      	movs	r2, #6
 800dbb8:	f7f2 fb12 	bl	80001e0 <memchr>
 800dbbc:	2800      	cmp	r0, #0
 800dbbe:	d03f      	beq.n	800dc40 <_vfiprintf_r+0x22c>
 800dbc0:	4b29      	ldr	r3, [pc, #164]	; (800dc68 <_vfiprintf_r+0x254>)
 800dbc2:	bb1b      	cbnz	r3, 800dc0c <_vfiprintf_r+0x1f8>
 800dbc4:	9b03      	ldr	r3, [sp, #12]
 800dbc6:	3307      	adds	r3, #7
 800dbc8:	f023 0307 	bic.w	r3, r3, #7
 800dbcc:	3308      	adds	r3, #8
 800dbce:	9303      	str	r3, [sp, #12]
 800dbd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbd2:	443b      	add	r3, r7
 800dbd4:	9309      	str	r3, [sp, #36]	; 0x24
 800dbd6:	e767      	b.n	800daa8 <_vfiprintf_r+0x94>
 800dbd8:	fb0c 3202 	mla	r2, ip, r2, r3
 800dbdc:	460c      	mov	r4, r1
 800dbde:	2001      	movs	r0, #1
 800dbe0:	e7a5      	b.n	800db2e <_vfiprintf_r+0x11a>
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	3401      	adds	r4, #1
 800dbe6:	9305      	str	r3, [sp, #20]
 800dbe8:	4619      	mov	r1, r3
 800dbea:	f04f 0c0a 	mov.w	ip, #10
 800dbee:	4620      	mov	r0, r4
 800dbf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dbf4:	3a30      	subs	r2, #48	; 0x30
 800dbf6:	2a09      	cmp	r2, #9
 800dbf8:	d903      	bls.n	800dc02 <_vfiprintf_r+0x1ee>
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d0c5      	beq.n	800db8a <_vfiprintf_r+0x176>
 800dbfe:	9105      	str	r1, [sp, #20]
 800dc00:	e7c3      	b.n	800db8a <_vfiprintf_r+0x176>
 800dc02:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc06:	4604      	mov	r4, r0
 800dc08:	2301      	movs	r3, #1
 800dc0a:	e7f0      	b.n	800dbee <_vfiprintf_r+0x1da>
 800dc0c:	ab03      	add	r3, sp, #12
 800dc0e:	9300      	str	r3, [sp, #0]
 800dc10:	462a      	mov	r2, r5
 800dc12:	4b16      	ldr	r3, [pc, #88]	; (800dc6c <_vfiprintf_r+0x258>)
 800dc14:	a904      	add	r1, sp, #16
 800dc16:	4630      	mov	r0, r6
 800dc18:	f3af 8000 	nop.w
 800dc1c:	4607      	mov	r7, r0
 800dc1e:	1c78      	adds	r0, r7, #1
 800dc20:	d1d6      	bne.n	800dbd0 <_vfiprintf_r+0x1bc>
 800dc22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dc24:	07d9      	lsls	r1, r3, #31
 800dc26:	d405      	bmi.n	800dc34 <_vfiprintf_r+0x220>
 800dc28:	89ab      	ldrh	r3, [r5, #12]
 800dc2a:	059a      	lsls	r2, r3, #22
 800dc2c:	d402      	bmi.n	800dc34 <_vfiprintf_r+0x220>
 800dc2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dc30:	f7fd f95a 	bl	800aee8 <__retarget_lock_release_recursive>
 800dc34:	89ab      	ldrh	r3, [r5, #12]
 800dc36:	065b      	lsls	r3, r3, #25
 800dc38:	f53f af12 	bmi.w	800da60 <_vfiprintf_r+0x4c>
 800dc3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc3e:	e711      	b.n	800da64 <_vfiprintf_r+0x50>
 800dc40:	ab03      	add	r3, sp, #12
 800dc42:	9300      	str	r3, [sp, #0]
 800dc44:	462a      	mov	r2, r5
 800dc46:	4b09      	ldr	r3, [pc, #36]	; (800dc6c <_vfiprintf_r+0x258>)
 800dc48:	a904      	add	r1, sp, #16
 800dc4a:	4630      	mov	r0, r6
 800dc4c:	f000 f880 	bl	800dd50 <_printf_i>
 800dc50:	e7e4      	b.n	800dc1c <_vfiprintf_r+0x208>
 800dc52:	bf00      	nop
 800dc54:	0800ed90 	.word	0x0800ed90
 800dc58:	0800edb0 	.word	0x0800edb0
 800dc5c:	0800ed70 	.word	0x0800ed70
 800dc60:	0800efd4 	.word	0x0800efd4
 800dc64:	0800efde 	.word	0x0800efde
 800dc68:	00000000 	.word	0x00000000
 800dc6c:	0800d9ef 	.word	0x0800d9ef
 800dc70:	0800efda 	.word	0x0800efda

0800dc74 <_printf_common>:
 800dc74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc78:	4616      	mov	r6, r2
 800dc7a:	4699      	mov	r9, r3
 800dc7c:	688a      	ldr	r2, [r1, #8]
 800dc7e:	690b      	ldr	r3, [r1, #16]
 800dc80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dc84:	4293      	cmp	r3, r2
 800dc86:	bfb8      	it	lt
 800dc88:	4613      	movlt	r3, r2
 800dc8a:	6033      	str	r3, [r6, #0]
 800dc8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dc90:	4607      	mov	r7, r0
 800dc92:	460c      	mov	r4, r1
 800dc94:	b10a      	cbz	r2, 800dc9a <_printf_common+0x26>
 800dc96:	3301      	adds	r3, #1
 800dc98:	6033      	str	r3, [r6, #0]
 800dc9a:	6823      	ldr	r3, [r4, #0]
 800dc9c:	0699      	lsls	r1, r3, #26
 800dc9e:	bf42      	ittt	mi
 800dca0:	6833      	ldrmi	r3, [r6, #0]
 800dca2:	3302      	addmi	r3, #2
 800dca4:	6033      	strmi	r3, [r6, #0]
 800dca6:	6825      	ldr	r5, [r4, #0]
 800dca8:	f015 0506 	ands.w	r5, r5, #6
 800dcac:	d106      	bne.n	800dcbc <_printf_common+0x48>
 800dcae:	f104 0a19 	add.w	sl, r4, #25
 800dcb2:	68e3      	ldr	r3, [r4, #12]
 800dcb4:	6832      	ldr	r2, [r6, #0]
 800dcb6:	1a9b      	subs	r3, r3, r2
 800dcb8:	42ab      	cmp	r3, r5
 800dcba:	dc26      	bgt.n	800dd0a <_printf_common+0x96>
 800dcbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dcc0:	1e13      	subs	r3, r2, #0
 800dcc2:	6822      	ldr	r2, [r4, #0]
 800dcc4:	bf18      	it	ne
 800dcc6:	2301      	movne	r3, #1
 800dcc8:	0692      	lsls	r2, r2, #26
 800dcca:	d42b      	bmi.n	800dd24 <_printf_common+0xb0>
 800dccc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dcd0:	4649      	mov	r1, r9
 800dcd2:	4638      	mov	r0, r7
 800dcd4:	47c0      	blx	r8
 800dcd6:	3001      	adds	r0, #1
 800dcd8:	d01e      	beq.n	800dd18 <_printf_common+0xa4>
 800dcda:	6823      	ldr	r3, [r4, #0]
 800dcdc:	68e5      	ldr	r5, [r4, #12]
 800dcde:	6832      	ldr	r2, [r6, #0]
 800dce0:	f003 0306 	and.w	r3, r3, #6
 800dce4:	2b04      	cmp	r3, #4
 800dce6:	bf08      	it	eq
 800dce8:	1aad      	subeq	r5, r5, r2
 800dcea:	68a3      	ldr	r3, [r4, #8]
 800dcec:	6922      	ldr	r2, [r4, #16]
 800dcee:	bf0c      	ite	eq
 800dcf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dcf4:	2500      	movne	r5, #0
 800dcf6:	4293      	cmp	r3, r2
 800dcf8:	bfc4      	itt	gt
 800dcfa:	1a9b      	subgt	r3, r3, r2
 800dcfc:	18ed      	addgt	r5, r5, r3
 800dcfe:	2600      	movs	r6, #0
 800dd00:	341a      	adds	r4, #26
 800dd02:	42b5      	cmp	r5, r6
 800dd04:	d11a      	bne.n	800dd3c <_printf_common+0xc8>
 800dd06:	2000      	movs	r0, #0
 800dd08:	e008      	b.n	800dd1c <_printf_common+0xa8>
 800dd0a:	2301      	movs	r3, #1
 800dd0c:	4652      	mov	r2, sl
 800dd0e:	4649      	mov	r1, r9
 800dd10:	4638      	mov	r0, r7
 800dd12:	47c0      	blx	r8
 800dd14:	3001      	adds	r0, #1
 800dd16:	d103      	bne.n	800dd20 <_printf_common+0xac>
 800dd18:	f04f 30ff 	mov.w	r0, #4294967295
 800dd1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd20:	3501      	adds	r5, #1
 800dd22:	e7c6      	b.n	800dcb2 <_printf_common+0x3e>
 800dd24:	18e1      	adds	r1, r4, r3
 800dd26:	1c5a      	adds	r2, r3, #1
 800dd28:	2030      	movs	r0, #48	; 0x30
 800dd2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dd2e:	4422      	add	r2, r4
 800dd30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dd34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dd38:	3302      	adds	r3, #2
 800dd3a:	e7c7      	b.n	800dccc <_printf_common+0x58>
 800dd3c:	2301      	movs	r3, #1
 800dd3e:	4622      	mov	r2, r4
 800dd40:	4649      	mov	r1, r9
 800dd42:	4638      	mov	r0, r7
 800dd44:	47c0      	blx	r8
 800dd46:	3001      	adds	r0, #1
 800dd48:	d0e6      	beq.n	800dd18 <_printf_common+0xa4>
 800dd4a:	3601      	adds	r6, #1
 800dd4c:	e7d9      	b.n	800dd02 <_printf_common+0x8e>
	...

0800dd50 <_printf_i>:
 800dd50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dd54:	460c      	mov	r4, r1
 800dd56:	4691      	mov	r9, r2
 800dd58:	7e27      	ldrb	r7, [r4, #24]
 800dd5a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800dd5c:	2f78      	cmp	r7, #120	; 0x78
 800dd5e:	4680      	mov	r8, r0
 800dd60:	469a      	mov	sl, r3
 800dd62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dd66:	d807      	bhi.n	800dd78 <_printf_i+0x28>
 800dd68:	2f62      	cmp	r7, #98	; 0x62
 800dd6a:	d80a      	bhi.n	800dd82 <_printf_i+0x32>
 800dd6c:	2f00      	cmp	r7, #0
 800dd6e:	f000 80d8 	beq.w	800df22 <_printf_i+0x1d2>
 800dd72:	2f58      	cmp	r7, #88	; 0x58
 800dd74:	f000 80a3 	beq.w	800debe <_printf_i+0x16e>
 800dd78:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800dd7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dd80:	e03a      	b.n	800ddf8 <_printf_i+0xa8>
 800dd82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dd86:	2b15      	cmp	r3, #21
 800dd88:	d8f6      	bhi.n	800dd78 <_printf_i+0x28>
 800dd8a:	a001      	add	r0, pc, #4	; (adr r0, 800dd90 <_printf_i+0x40>)
 800dd8c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800dd90:	0800dde9 	.word	0x0800dde9
 800dd94:	0800ddfd 	.word	0x0800ddfd
 800dd98:	0800dd79 	.word	0x0800dd79
 800dd9c:	0800dd79 	.word	0x0800dd79
 800dda0:	0800dd79 	.word	0x0800dd79
 800dda4:	0800dd79 	.word	0x0800dd79
 800dda8:	0800ddfd 	.word	0x0800ddfd
 800ddac:	0800dd79 	.word	0x0800dd79
 800ddb0:	0800dd79 	.word	0x0800dd79
 800ddb4:	0800dd79 	.word	0x0800dd79
 800ddb8:	0800dd79 	.word	0x0800dd79
 800ddbc:	0800df09 	.word	0x0800df09
 800ddc0:	0800de2d 	.word	0x0800de2d
 800ddc4:	0800deeb 	.word	0x0800deeb
 800ddc8:	0800dd79 	.word	0x0800dd79
 800ddcc:	0800dd79 	.word	0x0800dd79
 800ddd0:	0800df2b 	.word	0x0800df2b
 800ddd4:	0800dd79 	.word	0x0800dd79
 800ddd8:	0800de2d 	.word	0x0800de2d
 800dddc:	0800dd79 	.word	0x0800dd79
 800dde0:	0800dd79 	.word	0x0800dd79
 800dde4:	0800def3 	.word	0x0800def3
 800dde8:	680b      	ldr	r3, [r1, #0]
 800ddea:	1d1a      	adds	r2, r3, #4
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	600a      	str	r2, [r1, #0]
 800ddf0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ddf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ddf8:	2301      	movs	r3, #1
 800ddfa:	e0a3      	b.n	800df44 <_printf_i+0x1f4>
 800ddfc:	6825      	ldr	r5, [r4, #0]
 800ddfe:	6808      	ldr	r0, [r1, #0]
 800de00:	062e      	lsls	r6, r5, #24
 800de02:	f100 0304 	add.w	r3, r0, #4
 800de06:	d50a      	bpl.n	800de1e <_printf_i+0xce>
 800de08:	6805      	ldr	r5, [r0, #0]
 800de0a:	600b      	str	r3, [r1, #0]
 800de0c:	2d00      	cmp	r5, #0
 800de0e:	da03      	bge.n	800de18 <_printf_i+0xc8>
 800de10:	232d      	movs	r3, #45	; 0x2d
 800de12:	426d      	negs	r5, r5
 800de14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800de18:	485e      	ldr	r0, [pc, #376]	; (800df94 <_printf_i+0x244>)
 800de1a:	230a      	movs	r3, #10
 800de1c:	e019      	b.n	800de52 <_printf_i+0x102>
 800de1e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800de22:	6805      	ldr	r5, [r0, #0]
 800de24:	600b      	str	r3, [r1, #0]
 800de26:	bf18      	it	ne
 800de28:	b22d      	sxthne	r5, r5
 800de2a:	e7ef      	b.n	800de0c <_printf_i+0xbc>
 800de2c:	680b      	ldr	r3, [r1, #0]
 800de2e:	6825      	ldr	r5, [r4, #0]
 800de30:	1d18      	adds	r0, r3, #4
 800de32:	6008      	str	r0, [r1, #0]
 800de34:	0628      	lsls	r0, r5, #24
 800de36:	d501      	bpl.n	800de3c <_printf_i+0xec>
 800de38:	681d      	ldr	r5, [r3, #0]
 800de3a:	e002      	b.n	800de42 <_printf_i+0xf2>
 800de3c:	0669      	lsls	r1, r5, #25
 800de3e:	d5fb      	bpl.n	800de38 <_printf_i+0xe8>
 800de40:	881d      	ldrh	r5, [r3, #0]
 800de42:	4854      	ldr	r0, [pc, #336]	; (800df94 <_printf_i+0x244>)
 800de44:	2f6f      	cmp	r7, #111	; 0x6f
 800de46:	bf0c      	ite	eq
 800de48:	2308      	moveq	r3, #8
 800de4a:	230a      	movne	r3, #10
 800de4c:	2100      	movs	r1, #0
 800de4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800de52:	6866      	ldr	r6, [r4, #4]
 800de54:	60a6      	str	r6, [r4, #8]
 800de56:	2e00      	cmp	r6, #0
 800de58:	bfa2      	ittt	ge
 800de5a:	6821      	ldrge	r1, [r4, #0]
 800de5c:	f021 0104 	bicge.w	r1, r1, #4
 800de60:	6021      	strge	r1, [r4, #0]
 800de62:	b90d      	cbnz	r5, 800de68 <_printf_i+0x118>
 800de64:	2e00      	cmp	r6, #0
 800de66:	d04d      	beq.n	800df04 <_printf_i+0x1b4>
 800de68:	4616      	mov	r6, r2
 800de6a:	fbb5 f1f3 	udiv	r1, r5, r3
 800de6e:	fb03 5711 	mls	r7, r3, r1, r5
 800de72:	5dc7      	ldrb	r7, [r0, r7]
 800de74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800de78:	462f      	mov	r7, r5
 800de7a:	42bb      	cmp	r3, r7
 800de7c:	460d      	mov	r5, r1
 800de7e:	d9f4      	bls.n	800de6a <_printf_i+0x11a>
 800de80:	2b08      	cmp	r3, #8
 800de82:	d10b      	bne.n	800de9c <_printf_i+0x14c>
 800de84:	6823      	ldr	r3, [r4, #0]
 800de86:	07df      	lsls	r7, r3, #31
 800de88:	d508      	bpl.n	800de9c <_printf_i+0x14c>
 800de8a:	6923      	ldr	r3, [r4, #16]
 800de8c:	6861      	ldr	r1, [r4, #4]
 800de8e:	4299      	cmp	r1, r3
 800de90:	bfde      	ittt	le
 800de92:	2330      	movle	r3, #48	; 0x30
 800de94:	f806 3c01 	strble.w	r3, [r6, #-1]
 800de98:	f106 36ff 	addle.w	r6, r6, #4294967295
 800de9c:	1b92      	subs	r2, r2, r6
 800de9e:	6122      	str	r2, [r4, #16]
 800dea0:	f8cd a000 	str.w	sl, [sp]
 800dea4:	464b      	mov	r3, r9
 800dea6:	aa03      	add	r2, sp, #12
 800dea8:	4621      	mov	r1, r4
 800deaa:	4640      	mov	r0, r8
 800deac:	f7ff fee2 	bl	800dc74 <_printf_common>
 800deb0:	3001      	adds	r0, #1
 800deb2:	d14c      	bne.n	800df4e <_printf_i+0x1fe>
 800deb4:	f04f 30ff 	mov.w	r0, #4294967295
 800deb8:	b004      	add	sp, #16
 800deba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800debe:	4835      	ldr	r0, [pc, #212]	; (800df94 <_printf_i+0x244>)
 800dec0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800dec4:	6823      	ldr	r3, [r4, #0]
 800dec6:	680e      	ldr	r6, [r1, #0]
 800dec8:	061f      	lsls	r7, r3, #24
 800deca:	f856 5b04 	ldr.w	r5, [r6], #4
 800dece:	600e      	str	r6, [r1, #0]
 800ded0:	d514      	bpl.n	800defc <_printf_i+0x1ac>
 800ded2:	07d9      	lsls	r1, r3, #31
 800ded4:	bf44      	itt	mi
 800ded6:	f043 0320 	orrmi.w	r3, r3, #32
 800deda:	6023      	strmi	r3, [r4, #0]
 800dedc:	b91d      	cbnz	r5, 800dee6 <_printf_i+0x196>
 800dede:	6823      	ldr	r3, [r4, #0]
 800dee0:	f023 0320 	bic.w	r3, r3, #32
 800dee4:	6023      	str	r3, [r4, #0]
 800dee6:	2310      	movs	r3, #16
 800dee8:	e7b0      	b.n	800de4c <_printf_i+0xfc>
 800deea:	6823      	ldr	r3, [r4, #0]
 800deec:	f043 0320 	orr.w	r3, r3, #32
 800def0:	6023      	str	r3, [r4, #0]
 800def2:	2378      	movs	r3, #120	; 0x78
 800def4:	4828      	ldr	r0, [pc, #160]	; (800df98 <_printf_i+0x248>)
 800def6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800defa:	e7e3      	b.n	800dec4 <_printf_i+0x174>
 800defc:	065e      	lsls	r6, r3, #25
 800defe:	bf48      	it	mi
 800df00:	b2ad      	uxthmi	r5, r5
 800df02:	e7e6      	b.n	800ded2 <_printf_i+0x182>
 800df04:	4616      	mov	r6, r2
 800df06:	e7bb      	b.n	800de80 <_printf_i+0x130>
 800df08:	680b      	ldr	r3, [r1, #0]
 800df0a:	6826      	ldr	r6, [r4, #0]
 800df0c:	6960      	ldr	r0, [r4, #20]
 800df0e:	1d1d      	adds	r5, r3, #4
 800df10:	600d      	str	r5, [r1, #0]
 800df12:	0635      	lsls	r5, r6, #24
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	d501      	bpl.n	800df1c <_printf_i+0x1cc>
 800df18:	6018      	str	r0, [r3, #0]
 800df1a:	e002      	b.n	800df22 <_printf_i+0x1d2>
 800df1c:	0671      	lsls	r1, r6, #25
 800df1e:	d5fb      	bpl.n	800df18 <_printf_i+0x1c8>
 800df20:	8018      	strh	r0, [r3, #0]
 800df22:	2300      	movs	r3, #0
 800df24:	6123      	str	r3, [r4, #16]
 800df26:	4616      	mov	r6, r2
 800df28:	e7ba      	b.n	800dea0 <_printf_i+0x150>
 800df2a:	680b      	ldr	r3, [r1, #0]
 800df2c:	1d1a      	adds	r2, r3, #4
 800df2e:	600a      	str	r2, [r1, #0]
 800df30:	681e      	ldr	r6, [r3, #0]
 800df32:	6862      	ldr	r2, [r4, #4]
 800df34:	2100      	movs	r1, #0
 800df36:	4630      	mov	r0, r6
 800df38:	f7f2 f952 	bl	80001e0 <memchr>
 800df3c:	b108      	cbz	r0, 800df42 <_printf_i+0x1f2>
 800df3e:	1b80      	subs	r0, r0, r6
 800df40:	6060      	str	r0, [r4, #4]
 800df42:	6863      	ldr	r3, [r4, #4]
 800df44:	6123      	str	r3, [r4, #16]
 800df46:	2300      	movs	r3, #0
 800df48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800df4c:	e7a8      	b.n	800dea0 <_printf_i+0x150>
 800df4e:	6923      	ldr	r3, [r4, #16]
 800df50:	4632      	mov	r2, r6
 800df52:	4649      	mov	r1, r9
 800df54:	4640      	mov	r0, r8
 800df56:	47d0      	blx	sl
 800df58:	3001      	adds	r0, #1
 800df5a:	d0ab      	beq.n	800deb4 <_printf_i+0x164>
 800df5c:	6823      	ldr	r3, [r4, #0]
 800df5e:	079b      	lsls	r3, r3, #30
 800df60:	d413      	bmi.n	800df8a <_printf_i+0x23a>
 800df62:	68e0      	ldr	r0, [r4, #12]
 800df64:	9b03      	ldr	r3, [sp, #12]
 800df66:	4298      	cmp	r0, r3
 800df68:	bfb8      	it	lt
 800df6a:	4618      	movlt	r0, r3
 800df6c:	e7a4      	b.n	800deb8 <_printf_i+0x168>
 800df6e:	2301      	movs	r3, #1
 800df70:	4632      	mov	r2, r6
 800df72:	4649      	mov	r1, r9
 800df74:	4640      	mov	r0, r8
 800df76:	47d0      	blx	sl
 800df78:	3001      	adds	r0, #1
 800df7a:	d09b      	beq.n	800deb4 <_printf_i+0x164>
 800df7c:	3501      	adds	r5, #1
 800df7e:	68e3      	ldr	r3, [r4, #12]
 800df80:	9903      	ldr	r1, [sp, #12]
 800df82:	1a5b      	subs	r3, r3, r1
 800df84:	42ab      	cmp	r3, r5
 800df86:	dcf2      	bgt.n	800df6e <_printf_i+0x21e>
 800df88:	e7eb      	b.n	800df62 <_printf_i+0x212>
 800df8a:	2500      	movs	r5, #0
 800df8c:	f104 0619 	add.w	r6, r4, #25
 800df90:	e7f5      	b.n	800df7e <_printf_i+0x22e>
 800df92:	bf00      	nop
 800df94:	0800efe5 	.word	0x0800efe5
 800df98:	0800eff6 	.word	0x0800eff6

0800df9c <_putc_r>:
 800df9c:	b570      	push	{r4, r5, r6, lr}
 800df9e:	460d      	mov	r5, r1
 800dfa0:	4614      	mov	r4, r2
 800dfa2:	4606      	mov	r6, r0
 800dfa4:	b118      	cbz	r0, 800dfae <_putc_r+0x12>
 800dfa6:	6983      	ldr	r3, [r0, #24]
 800dfa8:	b90b      	cbnz	r3, 800dfae <_putc_r+0x12>
 800dfaa:	f7fe f9b7 	bl	800c31c <__sinit>
 800dfae:	4b1c      	ldr	r3, [pc, #112]	; (800e020 <_putc_r+0x84>)
 800dfb0:	429c      	cmp	r4, r3
 800dfb2:	d124      	bne.n	800dffe <_putc_r+0x62>
 800dfb4:	6874      	ldr	r4, [r6, #4]
 800dfb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dfb8:	07d8      	lsls	r0, r3, #31
 800dfba:	d405      	bmi.n	800dfc8 <_putc_r+0x2c>
 800dfbc:	89a3      	ldrh	r3, [r4, #12]
 800dfbe:	0599      	lsls	r1, r3, #22
 800dfc0:	d402      	bmi.n	800dfc8 <_putc_r+0x2c>
 800dfc2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dfc4:	f7fc ff8f 	bl	800aee6 <__retarget_lock_acquire_recursive>
 800dfc8:	68a3      	ldr	r3, [r4, #8]
 800dfca:	3b01      	subs	r3, #1
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	60a3      	str	r3, [r4, #8]
 800dfd0:	da05      	bge.n	800dfde <_putc_r+0x42>
 800dfd2:	69a2      	ldr	r2, [r4, #24]
 800dfd4:	4293      	cmp	r3, r2
 800dfd6:	db1c      	blt.n	800e012 <_putc_r+0x76>
 800dfd8:	b2eb      	uxtb	r3, r5
 800dfda:	2b0a      	cmp	r3, #10
 800dfdc:	d019      	beq.n	800e012 <_putc_r+0x76>
 800dfde:	6823      	ldr	r3, [r4, #0]
 800dfe0:	1c5a      	adds	r2, r3, #1
 800dfe2:	6022      	str	r2, [r4, #0]
 800dfe4:	701d      	strb	r5, [r3, #0]
 800dfe6:	b2ed      	uxtb	r5, r5
 800dfe8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dfea:	07da      	lsls	r2, r3, #31
 800dfec:	d405      	bmi.n	800dffa <_putc_r+0x5e>
 800dfee:	89a3      	ldrh	r3, [r4, #12]
 800dff0:	059b      	lsls	r3, r3, #22
 800dff2:	d402      	bmi.n	800dffa <_putc_r+0x5e>
 800dff4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dff6:	f7fc ff77 	bl	800aee8 <__retarget_lock_release_recursive>
 800dffa:	4628      	mov	r0, r5
 800dffc:	bd70      	pop	{r4, r5, r6, pc}
 800dffe:	4b09      	ldr	r3, [pc, #36]	; (800e024 <_putc_r+0x88>)
 800e000:	429c      	cmp	r4, r3
 800e002:	d101      	bne.n	800e008 <_putc_r+0x6c>
 800e004:	68b4      	ldr	r4, [r6, #8]
 800e006:	e7d6      	b.n	800dfb6 <_putc_r+0x1a>
 800e008:	4b07      	ldr	r3, [pc, #28]	; (800e028 <_putc_r+0x8c>)
 800e00a:	429c      	cmp	r4, r3
 800e00c:	bf08      	it	eq
 800e00e:	68f4      	ldreq	r4, [r6, #12]
 800e010:	e7d1      	b.n	800dfb6 <_putc_r+0x1a>
 800e012:	4629      	mov	r1, r5
 800e014:	4622      	mov	r2, r4
 800e016:	4630      	mov	r0, r6
 800e018:	f7fd ffa6 	bl	800bf68 <__swbuf_r>
 800e01c:	4605      	mov	r5, r0
 800e01e:	e7e3      	b.n	800dfe8 <_putc_r+0x4c>
 800e020:	0800ed90 	.word	0x0800ed90
 800e024:	0800edb0 	.word	0x0800edb0
 800e028:	0800ed70 	.word	0x0800ed70
 800e02c:	00000000 	.word	0x00000000

0800e030 <nan>:
 800e030:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e038 <nan+0x8>
 800e034:	4770      	bx	lr
 800e036:	bf00      	nop
 800e038:	00000000 	.word	0x00000000
 800e03c:	7ff80000 	.word	0x7ff80000

0800e040 <_sbrk_r>:
 800e040:	b538      	push	{r3, r4, r5, lr}
 800e042:	4d06      	ldr	r5, [pc, #24]	; (800e05c <_sbrk_r+0x1c>)
 800e044:	2300      	movs	r3, #0
 800e046:	4604      	mov	r4, r0
 800e048:	4608      	mov	r0, r1
 800e04a:	602b      	str	r3, [r5, #0]
 800e04c:	f7f4 f9ce 	bl	80023ec <_sbrk>
 800e050:	1c43      	adds	r3, r0, #1
 800e052:	d102      	bne.n	800e05a <_sbrk_r+0x1a>
 800e054:	682b      	ldr	r3, [r5, #0]
 800e056:	b103      	cbz	r3, 800e05a <_sbrk_r+0x1a>
 800e058:	6023      	str	r3, [r4, #0]
 800e05a:	bd38      	pop	{r3, r4, r5, pc}
 800e05c:	20002b84 	.word	0x20002b84

0800e060 <__sread>:
 800e060:	b510      	push	{r4, lr}
 800e062:	460c      	mov	r4, r1
 800e064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e068:	f000 f91c 	bl	800e2a4 <_read_r>
 800e06c:	2800      	cmp	r0, #0
 800e06e:	bfab      	itete	ge
 800e070:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e072:	89a3      	ldrhlt	r3, [r4, #12]
 800e074:	181b      	addge	r3, r3, r0
 800e076:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e07a:	bfac      	ite	ge
 800e07c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e07e:	81a3      	strhlt	r3, [r4, #12]
 800e080:	bd10      	pop	{r4, pc}

0800e082 <__swrite>:
 800e082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e086:	461f      	mov	r7, r3
 800e088:	898b      	ldrh	r3, [r1, #12]
 800e08a:	05db      	lsls	r3, r3, #23
 800e08c:	4605      	mov	r5, r0
 800e08e:	460c      	mov	r4, r1
 800e090:	4616      	mov	r6, r2
 800e092:	d505      	bpl.n	800e0a0 <__swrite+0x1e>
 800e094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e098:	2302      	movs	r3, #2
 800e09a:	2200      	movs	r2, #0
 800e09c:	f000 f8b6 	bl	800e20c <_lseek_r>
 800e0a0:	89a3      	ldrh	r3, [r4, #12]
 800e0a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e0a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e0aa:	81a3      	strh	r3, [r4, #12]
 800e0ac:	4632      	mov	r2, r6
 800e0ae:	463b      	mov	r3, r7
 800e0b0:	4628      	mov	r0, r5
 800e0b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e0b6:	f000 b835 	b.w	800e124 <_write_r>

0800e0ba <__sseek>:
 800e0ba:	b510      	push	{r4, lr}
 800e0bc:	460c      	mov	r4, r1
 800e0be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0c2:	f000 f8a3 	bl	800e20c <_lseek_r>
 800e0c6:	1c43      	adds	r3, r0, #1
 800e0c8:	89a3      	ldrh	r3, [r4, #12]
 800e0ca:	bf15      	itete	ne
 800e0cc:	6560      	strne	r0, [r4, #84]	; 0x54
 800e0ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e0d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e0d6:	81a3      	strheq	r3, [r4, #12]
 800e0d8:	bf18      	it	ne
 800e0da:	81a3      	strhne	r3, [r4, #12]
 800e0dc:	bd10      	pop	{r4, pc}

0800e0de <__sclose>:
 800e0de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0e2:	f000 b84f 	b.w	800e184 <_close_r>

0800e0e6 <strncmp>:
 800e0e6:	b510      	push	{r4, lr}
 800e0e8:	b16a      	cbz	r2, 800e106 <strncmp+0x20>
 800e0ea:	3901      	subs	r1, #1
 800e0ec:	1884      	adds	r4, r0, r2
 800e0ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 800e0f2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e0f6:	4293      	cmp	r3, r2
 800e0f8:	d103      	bne.n	800e102 <strncmp+0x1c>
 800e0fa:	42a0      	cmp	r0, r4
 800e0fc:	d001      	beq.n	800e102 <strncmp+0x1c>
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d1f5      	bne.n	800e0ee <strncmp+0x8>
 800e102:	1a98      	subs	r0, r3, r2
 800e104:	bd10      	pop	{r4, pc}
 800e106:	4610      	mov	r0, r2
 800e108:	e7fc      	b.n	800e104 <strncmp+0x1e>

0800e10a <__ascii_wctomb>:
 800e10a:	b149      	cbz	r1, 800e120 <__ascii_wctomb+0x16>
 800e10c:	2aff      	cmp	r2, #255	; 0xff
 800e10e:	bf85      	ittet	hi
 800e110:	238a      	movhi	r3, #138	; 0x8a
 800e112:	6003      	strhi	r3, [r0, #0]
 800e114:	700a      	strbls	r2, [r1, #0]
 800e116:	f04f 30ff 	movhi.w	r0, #4294967295
 800e11a:	bf98      	it	ls
 800e11c:	2001      	movls	r0, #1
 800e11e:	4770      	bx	lr
 800e120:	4608      	mov	r0, r1
 800e122:	4770      	bx	lr

0800e124 <_write_r>:
 800e124:	b538      	push	{r3, r4, r5, lr}
 800e126:	4d07      	ldr	r5, [pc, #28]	; (800e144 <_write_r+0x20>)
 800e128:	4604      	mov	r4, r0
 800e12a:	4608      	mov	r0, r1
 800e12c:	4611      	mov	r1, r2
 800e12e:	2200      	movs	r2, #0
 800e130:	602a      	str	r2, [r5, #0]
 800e132:	461a      	mov	r2, r3
 800e134:	f7f4 f909 	bl	800234a <_write>
 800e138:	1c43      	adds	r3, r0, #1
 800e13a:	d102      	bne.n	800e142 <_write_r+0x1e>
 800e13c:	682b      	ldr	r3, [r5, #0]
 800e13e:	b103      	cbz	r3, 800e142 <_write_r+0x1e>
 800e140:	6023      	str	r3, [r4, #0]
 800e142:	bd38      	pop	{r3, r4, r5, pc}
 800e144:	20002b84 	.word	0x20002b84

0800e148 <__assert_func>:
 800e148:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e14a:	4614      	mov	r4, r2
 800e14c:	461a      	mov	r2, r3
 800e14e:	4b09      	ldr	r3, [pc, #36]	; (800e174 <__assert_func+0x2c>)
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	4605      	mov	r5, r0
 800e154:	68d8      	ldr	r0, [r3, #12]
 800e156:	b14c      	cbz	r4, 800e16c <__assert_func+0x24>
 800e158:	4b07      	ldr	r3, [pc, #28]	; (800e178 <__assert_func+0x30>)
 800e15a:	9100      	str	r1, [sp, #0]
 800e15c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e160:	4906      	ldr	r1, [pc, #24]	; (800e17c <__assert_func+0x34>)
 800e162:	462b      	mov	r3, r5
 800e164:	f000 f81e 	bl	800e1a4 <fiprintf>
 800e168:	f000 f8ae 	bl	800e2c8 <abort>
 800e16c:	4b04      	ldr	r3, [pc, #16]	; (800e180 <__assert_func+0x38>)
 800e16e:	461c      	mov	r4, r3
 800e170:	e7f3      	b.n	800e15a <__assert_func+0x12>
 800e172:	bf00      	nop
 800e174:	20000a7c 	.word	0x20000a7c
 800e178:	0800f007 	.word	0x0800f007
 800e17c:	0800f014 	.word	0x0800f014
 800e180:	0800f042 	.word	0x0800f042

0800e184 <_close_r>:
 800e184:	b538      	push	{r3, r4, r5, lr}
 800e186:	4d06      	ldr	r5, [pc, #24]	; (800e1a0 <_close_r+0x1c>)
 800e188:	2300      	movs	r3, #0
 800e18a:	4604      	mov	r4, r0
 800e18c:	4608      	mov	r0, r1
 800e18e:	602b      	str	r3, [r5, #0]
 800e190:	f7f4 f8f7 	bl	8002382 <_close>
 800e194:	1c43      	adds	r3, r0, #1
 800e196:	d102      	bne.n	800e19e <_close_r+0x1a>
 800e198:	682b      	ldr	r3, [r5, #0]
 800e19a:	b103      	cbz	r3, 800e19e <_close_r+0x1a>
 800e19c:	6023      	str	r3, [r4, #0]
 800e19e:	bd38      	pop	{r3, r4, r5, pc}
 800e1a0:	20002b84 	.word	0x20002b84

0800e1a4 <fiprintf>:
 800e1a4:	b40e      	push	{r1, r2, r3}
 800e1a6:	b503      	push	{r0, r1, lr}
 800e1a8:	4601      	mov	r1, r0
 800e1aa:	ab03      	add	r3, sp, #12
 800e1ac:	4805      	ldr	r0, [pc, #20]	; (800e1c4 <fiprintf+0x20>)
 800e1ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1b2:	6800      	ldr	r0, [r0, #0]
 800e1b4:	9301      	str	r3, [sp, #4]
 800e1b6:	f7ff fc2d 	bl	800da14 <_vfiprintf_r>
 800e1ba:	b002      	add	sp, #8
 800e1bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800e1c0:	b003      	add	sp, #12
 800e1c2:	4770      	bx	lr
 800e1c4:	20000a7c 	.word	0x20000a7c

0800e1c8 <_fstat_r>:
 800e1c8:	b538      	push	{r3, r4, r5, lr}
 800e1ca:	4d07      	ldr	r5, [pc, #28]	; (800e1e8 <_fstat_r+0x20>)
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	4604      	mov	r4, r0
 800e1d0:	4608      	mov	r0, r1
 800e1d2:	4611      	mov	r1, r2
 800e1d4:	602b      	str	r3, [r5, #0]
 800e1d6:	f7f4 f8e0 	bl	800239a <_fstat>
 800e1da:	1c43      	adds	r3, r0, #1
 800e1dc:	d102      	bne.n	800e1e4 <_fstat_r+0x1c>
 800e1de:	682b      	ldr	r3, [r5, #0]
 800e1e0:	b103      	cbz	r3, 800e1e4 <_fstat_r+0x1c>
 800e1e2:	6023      	str	r3, [r4, #0]
 800e1e4:	bd38      	pop	{r3, r4, r5, pc}
 800e1e6:	bf00      	nop
 800e1e8:	20002b84 	.word	0x20002b84

0800e1ec <_isatty_r>:
 800e1ec:	b538      	push	{r3, r4, r5, lr}
 800e1ee:	4d06      	ldr	r5, [pc, #24]	; (800e208 <_isatty_r+0x1c>)
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	4604      	mov	r4, r0
 800e1f4:	4608      	mov	r0, r1
 800e1f6:	602b      	str	r3, [r5, #0]
 800e1f8:	f7f4 f8df 	bl	80023ba <_isatty>
 800e1fc:	1c43      	adds	r3, r0, #1
 800e1fe:	d102      	bne.n	800e206 <_isatty_r+0x1a>
 800e200:	682b      	ldr	r3, [r5, #0]
 800e202:	b103      	cbz	r3, 800e206 <_isatty_r+0x1a>
 800e204:	6023      	str	r3, [r4, #0]
 800e206:	bd38      	pop	{r3, r4, r5, pc}
 800e208:	20002b84 	.word	0x20002b84

0800e20c <_lseek_r>:
 800e20c:	b538      	push	{r3, r4, r5, lr}
 800e20e:	4d07      	ldr	r5, [pc, #28]	; (800e22c <_lseek_r+0x20>)
 800e210:	4604      	mov	r4, r0
 800e212:	4608      	mov	r0, r1
 800e214:	4611      	mov	r1, r2
 800e216:	2200      	movs	r2, #0
 800e218:	602a      	str	r2, [r5, #0]
 800e21a:	461a      	mov	r2, r3
 800e21c:	f7f4 f8d8 	bl	80023d0 <_lseek>
 800e220:	1c43      	adds	r3, r0, #1
 800e222:	d102      	bne.n	800e22a <_lseek_r+0x1e>
 800e224:	682b      	ldr	r3, [r5, #0]
 800e226:	b103      	cbz	r3, 800e22a <_lseek_r+0x1e>
 800e228:	6023      	str	r3, [r4, #0]
 800e22a:	bd38      	pop	{r3, r4, r5, pc}
 800e22c:	20002b84 	.word	0x20002b84

0800e230 <malloc>:
 800e230:	4b02      	ldr	r3, [pc, #8]	; (800e23c <malloc+0xc>)
 800e232:	4601      	mov	r1, r0
 800e234:	6818      	ldr	r0, [r3, #0]
 800e236:	f7ff ba0d 	b.w	800d654 <_malloc_r>
 800e23a:	bf00      	nop
 800e23c:	20000a7c 	.word	0x20000a7c

0800e240 <__malloc_lock>:
 800e240:	4801      	ldr	r0, [pc, #4]	; (800e248 <__malloc_lock+0x8>)
 800e242:	f7fc be50 	b.w	800aee6 <__retarget_lock_acquire_recursive>
 800e246:	bf00      	nop
 800e248:	20002b7c 	.word	0x20002b7c

0800e24c <__malloc_unlock>:
 800e24c:	4801      	ldr	r0, [pc, #4]	; (800e254 <__malloc_unlock+0x8>)
 800e24e:	f7fc be4b 	b.w	800aee8 <__retarget_lock_release_recursive>
 800e252:	bf00      	nop
 800e254:	20002b7c 	.word	0x20002b7c

0800e258 <_realloc_r>:
 800e258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e25a:	4607      	mov	r7, r0
 800e25c:	4614      	mov	r4, r2
 800e25e:	460e      	mov	r6, r1
 800e260:	b921      	cbnz	r1, 800e26c <_realloc_r+0x14>
 800e262:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e266:	4611      	mov	r1, r2
 800e268:	f7ff b9f4 	b.w	800d654 <_malloc_r>
 800e26c:	b922      	cbnz	r2, 800e278 <_realloc_r+0x20>
 800e26e:	f7ff f9a1 	bl	800d5b4 <_free_r>
 800e272:	4625      	mov	r5, r4
 800e274:	4628      	mov	r0, r5
 800e276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e278:	f000 f82d 	bl	800e2d6 <_malloc_usable_size_r>
 800e27c:	42a0      	cmp	r0, r4
 800e27e:	d20f      	bcs.n	800e2a0 <_realloc_r+0x48>
 800e280:	4621      	mov	r1, r4
 800e282:	4638      	mov	r0, r7
 800e284:	f7ff f9e6 	bl	800d654 <_malloc_r>
 800e288:	4605      	mov	r5, r0
 800e28a:	2800      	cmp	r0, #0
 800e28c:	d0f2      	beq.n	800e274 <_realloc_r+0x1c>
 800e28e:	4631      	mov	r1, r6
 800e290:	4622      	mov	r2, r4
 800e292:	f7fc fe2a 	bl	800aeea <memcpy>
 800e296:	4631      	mov	r1, r6
 800e298:	4638      	mov	r0, r7
 800e29a:	f7ff f98b 	bl	800d5b4 <_free_r>
 800e29e:	e7e9      	b.n	800e274 <_realloc_r+0x1c>
 800e2a0:	4635      	mov	r5, r6
 800e2a2:	e7e7      	b.n	800e274 <_realloc_r+0x1c>

0800e2a4 <_read_r>:
 800e2a4:	b538      	push	{r3, r4, r5, lr}
 800e2a6:	4d07      	ldr	r5, [pc, #28]	; (800e2c4 <_read_r+0x20>)
 800e2a8:	4604      	mov	r4, r0
 800e2aa:	4608      	mov	r0, r1
 800e2ac:	4611      	mov	r1, r2
 800e2ae:	2200      	movs	r2, #0
 800e2b0:	602a      	str	r2, [r5, #0]
 800e2b2:	461a      	mov	r2, r3
 800e2b4:	f7f4 f82c 	bl	8002310 <_read>
 800e2b8:	1c43      	adds	r3, r0, #1
 800e2ba:	d102      	bne.n	800e2c2 <_read_r+0x1e>
 800e2bc:	682b      	ldr	r3, [r5, #0]
 800e2be:	b103      	cbz	r3, 800e2c2 <_read_r+0x1e>
 800e2c0:	6023      	str	r3, [r4, #0]
 800e2c2:	bd38      	pop	{r3, r4, r5, pc}
 800e2c4:	20002b84 	.word	0x20002b84

0800e2c8 <abort>:
 800e2c8:	b508      	push	{r3, lr}
 800e2ca:	2006      	movs	r0, #6
 800e2cc:	f000 f834 	bl	800e338 <raise>
 800e2d0:	2001      	movs	r0, #1
 800e2d2:	f7f4 f813 	bl	80022fc <_exit>

0800e2d6 <_malloc_usable_size_r>:
 800e2d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e2da:	1f18      	subs	r0, r3, #4
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	bfbc      	itt	lt
 800e2e0:	580b      	ldrlt	r3, [r1, r0]
 800e2e2:	18c0      	addlt	r0, r0, r3
 800e2e4:	4770      	bx	lr

0800e2e6 <_raise_r>:
 800e2e6:	291f      	cmp	r1, #31
 800e2e8:	b538      	push	{r3, r4, r5, lr}
 800e2ea:	4604      	mov	r4, r0
 800e2ec:	460d      	mov	r5, r1
 800e2ee:	d904      	bls.n	800e2fa <_raise_r+0x14>
 800e2f0:	2316      	movs	r3, #22
 800e2f2:	6003      	str	r3, [r0, #0]
 800e2f4:	f04f 30ff 	mov.w	r0, #4294967295
 800e2f8:	bd38      	pop	{r3, r4, r5, pc}
 800e2fa:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e2fc:	b112      	cbz	r2, 800e304 <_raise_r+0x1e>
 800e2fe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e302:	b94b      	cbnz	r3, 800e318 <_raise_r+0x32>
 800e304:	4620      	mov	r0, r4
 800e306:	f000 f831 	bl	800e36c <_getpid_r>
 800e30a:	462a      	mov	r2, r5
 800e30c:	4601      	mov	r1, r0
 800e30e:	4620      	mov	r0, r4
 800e310:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e314:	f000 b818 	b.w	800e348 <_kill_r>
 800e318:	2b01      	cmp	r3, #1
 800e31a:	d00a      	beq.n	800e332 <_raise_r+0x4c>
 800e31c:	1c59      	adds	r1, r3, #1
 800e31e:	d103      	bne.n	800e328 <_raise_r+0x42>
 800e320:	2316      	movs	r3, #22
 800e322:	6003      	str	r3, [r0, #0]
 800e324:	2001      	movs	r0, #1
 800e326:	e7e7      	b.n	800e2f8 <_raise_r+0x12>
 800e328:	2400      	movs	r4, #0
 800e32a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e32e:	4628      	mov	r0, r5
 800e330:	4798      	blx	r3
 800e332:	2000      	movs	r0, #0
 800e334:	e7e0      	b.n	800e2f8 <_raise_r+0x12>
	...

0800e338 <raise>:
 800e338:	4b02      	ldr	r3, [pc, #8]	; (800e344 <raise+0xc>)
 800e33a:	4601      	mov	r1, r0
 800e33c:	6818      	ldr	r0, [r3, #0]
 800e33e:	f7ff bfd2 	b.w	800e2e6 <_raise_r>
 800e342:	bf00      	nop
 800e344:	20000a7c 	.word	0x20000a7c

0800e348 <_kill_r>:
 800e348:	b538      	push	{r3, r4, r5, lr}
 800e34a:	4d07      	ldr	r5, [pc, #28]	; (800e368 <_kill_r+0x20>)
 800e34c:	2300      	movs	r3, #0
 800e34e:	4604      	mov	r4, r0
 800e350:	4608      	mov	r0, r1
 800e352:	4611      	mov	r1, r2
 800e354:	602b      	str	r3, [r5, #0]
 800e356:	f7f3 ffc1 	bl	80022dc <_kill>
 800e35a:	1c43      	adds	r3, r0, #1
 800e35c:	d102      	bne.n	800e364 <_kill_r+0x1c>
 800e35e:	682b      	ldr	r3, [r5, #0]
 800e360:	b103      	cbz	r3, 800e364 <_kill_r+0x1c>
 800e362:	6023      	str	r3, [r4, #0]
 800e364:	bd38      	pop	{r3, r4, r5, pc}
 800e366:	bf00      	nop
 800e368:	20002b84 	.word	0x20002b84

0800e36c <_getpid_r>:
 800e36c:	f7f3 bfae 	b.w	80022cc <_getpid>

0800e370 <ceil>:
 800e370:	ec51 0b10 	vmov	r0, r1, d0
 800e374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e378:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800e37c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800e380:	2e13      	cmp	r6, #19
 800e382:	ee10 5a10 	vmov	r5, s0
 800e386:	ee10 8a10 	vmov	r8, s0
 800e38a:	460c      	mov	r4, r1
 800e38c:	dc30      	bgt.n	800e3f0 <ceil+0x80>
 800e38e:	2e00      	cmp	r6, #0
 800e390:	da12      	bge.n	800e3b8 <ceil+0x48>
 800e392:	a335      	add	r3, pc, #212	; (adr r3, 800e468 <ceil+0xf8>)
 800e394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e398:	f7f1 ff78 	bl	800028c <__adddf3>
 800e39c:	2200      	movs	r2, #0
 800e39e:	2300      	movs	r3, #0
 800e3a0:	f7f2 fbba 	bl	8000b18 <__aeabi_dcmpgt>
 800e3a4:	b128      	cbz	r0, 800e3b2 <ceil+0x42>
 800e3a6:	2c00      	cmp	r4, #0
 800e3a8:	db55      	blt.n	800e456 <ceil+0xe6>
 800e3aa:	432c      	orrs	r4, r5
 800e3ac:	d057      	beq.n	800e45e <ceil+0xee>
 800e3ae:	4c30      	ldr	r4, [pc, #192]	; (800e470 <ceil+0x100>)
 800e3b0:	2500      	movs	r5, #0
 800e3b2:	4621      	mov	r1, r4
 800e3b4:	4628      	mov	r0, r5
 800e3b6:	e025      	b.n	800e404 <ceil+0x94>
 800e3b8:	4f2e      	ldr	r7, [pc, #184]	; (800e474 <ceil+0x104>)
 800e3ba:	4137      	asrs	r7, r6
 800e3bc:	ea01 0307 	and.w	r3, r1, r7
 800e3c0:	4303      	orrs	r3, r0
 800e3c2:	d01f      	beq.n	800e404 <ceil+0x94>
 800e3c4:	a328      	add	r3, pc, #160	; (adr r3, 800e468 <ceil+0xf8>)
 800e3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3ca:	f7f1 ff5f 	bl	800028c <__adddf3>
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	f7f2 fba1 	bl	8000b18 <__aeabi_dcmpgt>
 800e3d6:	2800      	cmp	r0, #0
 800e3d8:	d0eb      	beq.n	800e3b2 <ceil+0x42>
 800e3da:	2c00      	cmp	r4, #0
 800e3dc:	bfc2      	ittt	gt
 800e3de:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 800e3e2:	fa43 f606 	asrgt.w	r6, r3, r6
 800e3e6:	19a4      	addgt	r4, r4, r6
 800e3e8:	ea24 0407 	bic.w	r4, r4, r7
 800e3ec:	2500      	movs	r5, #0
 800e3ee:	e7e0      	b.n	800e3b2 <ceil+0x42>
 800e3f0:	2e33      	cmp	r6, #51	; 0x33
 800e3f2:	dd0b      	ble.n	800e40c <ceil+0x9c>
 800e3f4:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e3f8:	d104      	bne.n	800e404 <ceil+0x94>
 800e3fa:	ee10 2a10 	vmov	r2, s0
 800e3fe:	460b      	mov	r3, r1
 800e400:	f7f1 ff44 	bl	800028c <__adddf3>
 800e404:	ec41 0b10 	vmov	d0, r0, r1
 800e408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e40c:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800e410:	f04f 33ff 	mov.w	r3, #4294967295
 800e414:	fa23 f707 	lsr.w	r7, r3, r7
 800e418:	4207      	tst	r7, r0
 800e41a:	d0f3      	beq.n	800e404 <ceil+0x94>
 800e41c:	a312      	add	r3, pc, #72	; (adr r3, 800e468 <ceil+0xf8>)
 800e41e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e422:	f7f1 ff33 	bl	800028c <__adddf3>
 800e426:	2200      	movs	r2, #0
 800e428:	2300      	movs	r3, #0
 800e42a:	f7f2 fb75 	bl	8000b18 <__aeabi_dcmpgt>
 800e42e:	2800      	cmp	r0, #0
 800e430:	d0bf      	beq.n	800e3b2 <ceil+0x42>
 800e432:	2c00      	cmp	r4, #0
 800e434:	dd02      	ble.n	800e43c <ceil+0xcc>
 800e436:	2e14      	cmp	r6, #20
 800e438:	d103      	bne.n	800e442 <ceil+0xd2>
 800e43a:	3401      	adds	r4, #1
 800e43c:	ea25 0507 	bic.w	r5, r5, r7
 800e440:	e7b7      	b.n	800e3b2 <ceil+0x42>
 800e442:	2301      	movs	r3, #1
 800e444:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e448:	fa03 f606 	lsl.w	r6, r3, r6
 800e44c:	4435      	add	r5, r6
 800e44e:	4545      	cmp	r5, r8
 800e450:	bf38      	it	cc
 800e452:	18e4      	addcc	r4, r4, r3
 800e454:	e7f2      	b.n	800e43c <ceil+0xcc>
 800e456:	2500      	movs	r5, #0
 800e458:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800e45c:	e7a9      	b.n	800e3b2 <ceil+0x42>
 800e45e:	4625      	mov	r5, r4
 800e460:	e7a7      	b.n	800e3b2 <ceil+0x42>
 800e462:	bf00      	nop
 800e464:	f3af 8000 	nop.w
 800e468:	8800759c 	.word	0x8800759c
 800e46c:	7e37e43c 	.word	0x7e37e43c
 800e470:	3ff00000 	.word	0x3ff00000
 800e474:	000fffff 	.word	0x000fffff

0800e478 <_init>:
 800e478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e47a:	bf00      	nop
 800e47c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e47e:	bc08      	pop	{r3}
 800e480:	469e      	mov	lr, r3
 800e482:	4770      	bx	lr

0800e484 <_fini>:
 800e484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e486:	bf00      	nop
 800e488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e48a:	bc08      	pop	{r3}
 800e48c:	469e      	mov	lr, r3
 800e48e:	4770      	bx	lr
